<?php
/**
 * ApplicationsApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  Acquia\CloudApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Acquia Cloud API Documentation
 *
 * Acquia Cloud API  # Compatibility  ## Stability  The response for all resource endpoints includes an `X-CloudAPI-Stability` header that indicates what changes, if any, Acquia will make to the resource and how changes will be communicated.  There are three levels of stability:  * `prototype`: A prototype resource is experimental and major changes are likely. A prototype resource may not reach production.     * Compatible and emergency changes may be made with no advance notice     * Disruptive changes may be made with one week notice     * Deprecated resources will remain available for at least one month after deprecation * `development`: A resource that is unlikely to change, but is still being worked on, will be marked as in development. These resources are very likely to reach production.     * Compatible and emergency changes may be made with no advance notice     * Disruptive changes may be made with one month notice     * Deprecated resources will remain available for at least six months after deprecation * `production`: A production resource will not introduce breaking changes within a version, and any breaking changes between versions will be communicated ahead of time.  ## Deprecation  Over time, endpoints may become obsolete and will be removed in the future. These endpoints will be marked with an `X-CloudAPI-Deprecated` header indicating the version in which they were deprecated and the reason for the deprecation. Deprecated endpoints may be removed in the next version of the resource.  ## Versioning  All resource endpoints are versioned within the API. Endpoints that have reached production will not introduce breaking changes between versions. Non-production endpoints will not version for changes.  A specific version of an endpoint can be requested via the `Accept` header:      Accept: application/json, version=2  If the version is not specified, the latest version of the endpoint will be used.  Starting with version 3, we will support the current version of an endpoint and the previous version. Version 1 of the API is [provided elsewhere](https://cloudapi.acquia.com/).  ## Errors  Some endpoints will return a 503 status when dependent services are unavailable:      application/json     {         \"error\": \"system\",         \"message\": \"This action is currently unavailable. Please try again later.\"     }  ## Authentication  All Acquia Cloud API calls require authentication to work properly.  Learn more: <a href='https://docs.acquia.com/acquia-cloud/develop/api/auth/' target='_blank'>https://docs.acquia.com/acquia-cloud/develop/api/auth/</a>  ### Example implementation  An example PHP script for making authenticated API requests can be found at <a href='https://docs.acquia.com/_downloads/api-v2-auth.php' target='_blank'>https://docs.acquia.com/_downloads/api-v2-auth.php</a>. This script uses the <a href='https://oauth2-client.thephpleague.com/' target='_blank'>League/oauth2-client</a> library, installed via Composer.
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace Acquia\CloudApi\Test\Api;

use \Acquia\CloudApi\Configuration;
use \Acquia\CloudApi\ApiException;
use \Acquia\CloudApi\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * ApplicationsApiTest Class Doc Comment
 *
 * @category Class
 * @package  Acquia\CloudApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ApplicationsApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for deleteApplicationSearchConfigurationSet
     *
     * Removes and deletes a specific search configuration set from an application..
     *
     */
    public function testDeleteApplicationSearchConfigurationSet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteApplicationTags
     *
     * Deletes an application tag..
     *
     */
    public function testDeleteApplicationTags()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getApplicationByUuid
     *
     * Return details about a specific application..
     *
     */
    public function testGetApplicationByUuid()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getApplicationDatabases
     *
     * Returns a list database names for the application..
     *
     */
    public function testGetApplicationDatabases()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getApplicationEmailDomains
     *
     * Returns a list of email domains associated with the application..
     *
     */
    public function testGetApplicationEmailDomains()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getApplicationEnvironments
     *
     * Returns a list of environments within this application by its UUID..
     *
     */
    public function testGetApplicationEnvironments()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getApplicationFeatures
     *
     * Return application features..
     *
     */
    public function testGetApplicationFeatures()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getApplicationHostingSettings
     *
     * Returns the hosting settings for this application..
     *
     */
    public function testGetApplicationHostingSettings()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getApplicationIdes
     *
     * Returns a list of Cloud IDEs associated with this application..
     *
     */
    public function testGetApplicationIdes()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getApplicationLegacyProductKeysSettings
     *
     * Returns the legacy product keys for this application..
     *
     */
    public function testGetApplicationLegacyProductKeysSettings()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getApplicationMessages
     *
     * Returns a list of messages associated with this application..
     *
     */
    public function testGetApplicationMessages()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getApplicationNotificationByUuid
     *
     * Returns a single notification..
     *
     */
    public function testGetApplicationNotificationByUuid()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getApplicationNotifications
     *
     * Returns a list of notifications associated with this application by its UUID..
     *
     */
    public function testGetApplicationNotifications()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getApplicationPermissions
     *
     * Returns a list of permissions the user has for this application by its UUID..
     *
     */
    public function testGetApplicationPermissions()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getApplicationRemoteAdministrationSettings
     *
     * Returns the remote administration settings for this application..
     *
     */
    public function testGetApplicationRemoteAdministrationSettings()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getApplicationSearchConfigurationSet
     *
     * Returns a search configuration set for an application.
     *
     */
    public function testGetApplicationSearchConfigurationSet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getApplicationSearchConfigurationSets
     *
     * Returns a collection of search configuration sets for an application.
     *
     */
    public function testGetApplicationSearchConfigurationSets()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getApplicationSearchList
     *
     * Returns a traversal endpoint for search entities for the application..
     *
     */
    public function testGetApplicationSearchList()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getApplicationSecuritySettings
     *
     * Returns the security policy settings for this application..
     *
     */
    public function testGetApplicationSecuritySettings()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getApplicationSettings
     *
     * Returns available settings for this application..
     *
     */
    public function testGetApplicationSettings()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getApplicationTags
     *
     * Returns a list of application tags associated with this application..
     *
     */
    public function testGetApplicationTags()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getApplicationTasks
     *
     * Returns a list of tasks associated with this application by its UUID..
     *
     */
    public function testGetApplicationTasks()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getApplicationTeams
     *
     * Returns a list of teams associated with this application..
     *
     */
    public function testGetApplicationTeams()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getApplications
     *
     * Return a list of applications the current user has access to..
     *
     */
    public function testGetApplications()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getApplicationsUsageData
     *
     * Retrieves aggregate usage data for an application, filterable by views or visits and by environment..
     *
     */
    public function testGetApplicationsUsageData()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getApplicationsUsageDataByEnvironment
     *
     * Retrieves usage data (views or visits) for an application, broken down by environment..
     *
     */
    public function testGetApplicationsUsageDataByEnvironment()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getApplicationsUsageLinks
     *
     * Retrieves traversal links for detailed metrics on usage (views and visits) of your application..
     *
     */
    public function testGetApplicationsUsageLinks()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getApplicationsUsageMetricData
     *
     * Retrieves aggregate usage metric data (views or visits) for an application...
     *
     */
    public function testGetApplicationsUsageMetricData()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getApplicationsUsageViewsDataByEnvironment
     *
     * Retrieves views data for an application, broken down by environment..
     *
     */
    public function testGetApplicationsUsageViewsDataByEnvironment()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getApplicationsUsageVisitsDataByEnvironment
     *
     * Retrieves visits data for an application, broken down by environment..
     *
     */
    public function testGetApplicationsUsageVisitsDataByEnvironment()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getArtifactByApplicationUuidAndId
     *
     * Return details about a specific artifact..
     *
     */
    public function testGetArtifactByApplicationUuidAndId()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getArtifactsByApplicationUuid
     *
     * Return application artifacts..
     *
     */
    public function testGetArtifactsByApplicationUuid()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getCodeByApplicationUuid
     *
     * Return application branches and release tags..
     *
     */
    public function testGetCodeByApplicationUuid()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for postApplicationAssociateEmailDomain
     *
     * Associates an email domain with an Application..
     *
     */
    public function testPostApplicationAssociateEmailDomain()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for postApplicationDatabaseCreate
     *
     * Creates a database..
     *
     */
    public function testPostApplicationDatabaseCreate()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for postApplicationDatabaseDelete
     *
     * Drops (deletes) a database..
     *
     */
    public function testPostApplicationDatabaseDelete()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for postApplicationDatabaseErase
     *
     * Erases (truncates) a database..
     *
     */
    public function testPostApplicationDatabaseErase()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for postApplicationDisassociateEmailDomain
     *
     * Disassociates an email domain with an Application..
     *
     */
    public function testPostApplicationDisassociateEmailDomain()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for postApplicationEnvironments
     *
     * Add a new continuous delivery environment to an application by the application UUID..
     *
     */
    public function testPostApplicationEnvironments()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for postApplicationSearchConfigurationSets
     *
     * Creates a search configuration set for an application..
     *
     */
    public function testPostApplicationSearchConfigurationSets()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for postApplicationsIde
     *
     * Creates a new Cloud IDE..
     *
     */
    public function testPostApplicationsIde()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for postApplicationsTags
     *
     * Creates a new application tag..
     *
     */
    public function testPostApplicationsTags()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for putApplicationByUuid
     *
     * Renames an application..
     *
     */
    public function testPutApplicationByUuid()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for putApplicationRemoteAdministrationSettings
     *
     * Modifies the remote administration settings for an application..
     *
     */
    public function testPutApplicationRemoteAdministrationSettings()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for putApplicationSecuritySettings
     *
     * Modifies the security policy settings for an application..
     *
     */
    public function testPutApplicationSecuritySettings()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }
}
