<?php
/**
 * AccountApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  Acquia\CloudApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Acquia Cloud API Documentation
 *
 * Acquia Cloud API  # Compatibility  ## Stability  The response for all resource endpoints includes an `X-CloudAPI-Stability` header that indicates what changes, if any, Acquia will make to the resource and how changes will be communicated.  There are three levels of stability:  * `prototype`: A prototype resource is experimental and major changes are likely. A prototype resource may not reach production.     * Compatible and emergency changes may be made with no advance notice     * Disruptive changes may be made with one week notice     * Deprecated resources will remain available for at least one month after deprecation * `development`: A resource that is unlikely to change, but is still being worked on, will be marked as in development. These resources are very likely to reach production.     * Compatible and emergency changes may be made with no advance notice     * Disruptive changes may be made with one month notice     * Deprecated resources will remain available for at least six months after deprecation * `production`: A production resource will not introduce breaking changes within a version, and any breaking changes between versions will be communicated ahead of time.  ## Deprecation  Over time, endpoints may become obsolete and will be removed in the future. These endpoints will be marked with an `X-CloudAPI-Deprecated` header indicating the version in which they were deprecated and the reason for the deprecation. Deprecated endpoints may be removed in the next version of the resource.  ## Versioning  All resource endpoints are versioned within the API. Endpoints that have reached production will not introduce breaking changes between versions. Non-production endpoints will not version for changes.  A specific version of an endpoint can be requested via the `Accept` header:      Accept: application/json, version=2  If the version is not specified, the latest version of the endpoint will be used.  Starting with version 3, we will support the current version of an endpoint and the previous version. Version 1 of the API is [provided elsewhere](https://cloudapi.acquia.com/).  ## Errors  Some endpoints will return a 503 status when dependent services are unavailable:      application/json     {         \"error\": \"system\",         \"message\": \"This action is currently unavailable. Please try again later.\"     }  ## Authentication  All Acquia Cloud API calls require authentication to work properly.  Learn more: <a href='https://docs.acquia.com/acquia-cloud/develop/api/auth/' target='_blank'>https://docs.acquia.com/acquia-cloud/develop/api/auth/</a>  ### Example implementation  An example PHP script for making authenticated API requests can be found at <a href='https://docs.acquia.com/_downloads/api-v2-auth.php' target='_blank'>https://docs.acquia.com/_downloads/api-v2-auth.php</a>. This script uses the <a href='https://oauth2-client.thephpleague.com/' target='_blank'>League/oauth2-client</a> library, installed via Composer.
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace Acquia\CloudApi\Test\Api;

use \Acquia\CloudApi\Configuration;
use \Acquia\CloudApi\ApiException;
use \Acquia\CloudApi\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * AccountApiTest Class Doc Comment
 *
 * @category Class
 * @package  Acquia\CloudApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AccountApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for deleteAccountSshKey
     *
     * Deletes an SSH key..
     *
     */
    public function testDeleteAccountSshKey()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteAccountToken
     *
     * Revokes an access token..
     *
     */
    public function testDeleteAccountToken()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getAccount
     *
     * Returns details about your account..
     *
     */
    public function testGetAccount()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getAccountApplicationHasPermission
     *
     * Returns whether your account has access to a specific application permission..
     *
     */
    public function testGetAccountApplicationHasPermission()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getAccountApplicationIsAdministrator
     *
     * Returns whether your account is an administrator for an application..
     *
     */
    public function testGetAccountApplicationIsAdministrator()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getAccountApplicationIsOwner
     *
     * Returns whether your account is the owner for an application..
     *
     */
    public function testGetAccountApplicationIsOwner()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getAccountDrushAliasesDownload
     *
     * Returns the drush aliases as a compressed archive download..
     *
     */
    public function testGetAccountDrushAliasesDownload()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getAccountIdes
     *
     * Returns a list of Cloud IDEs associated with the current user..
     *
     */
    public function testGetAccountIdes()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getAccountInvites
     *
     * Gets a list of all organization admin and team invites that are pending for the current user..
     *
     */
    public function testGetAccountInvites()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getAccountMessages
     *
     * Returns a list of messages associated with the current user..
     *
     */
    public function testGetAccountMessages()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getAccountOrganizationIsAdministrator
     *
     * Returns whether your account is an administrator for an organization..
     *
     */
    public function testGetAccountOrganizationIsAdministrator()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getAccountOrganizationIsOwner
     *
     * Returns whether your account is the owner for an organization..
     *
     */
    public function testGetAccountOrganizationIsOwner()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getAccountSshKey
     *
     * Get an SSH key associated with the currently-logged in user..
     *
     */
    public function testGetAccountSshKey()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getAccountSshKeys
     *
     * Gets a list of SSH keys associated with the current user..
     *
     */
    public function testGetAccountSshKeys()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getAccountSubscriptionIsAdministrator
     *
     * Returns whether your account is an administrator for a subscription..
     *
     */
    public function testGetAccountSubscriptionIsAdministrator()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getAccountSubscriptionIsOwner
     *
     * Returns whether your account is the owner for a subscription..
     *
     */
    public function testGetAccountSubscriptionIsOwner()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getAccountTeamHasPermission
     *
     * Returns whether your account has access to a specific team permission..
     *
     */
    public function testGetAccountTeamHasPermission()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getAccountTeamIsAdministrator
     *
     * Returns whether your account is an administrator for a team..
     *
     */
    public function testGetAccountTeamIsAdministrator()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getAccountTeamIsOwner
     *
     * Returns whether your account is the owner for a team..
     *
     */
    public function testGetAccountTeamIsOwner()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getAccountToken
     *
     * Return details about a specific token..
     *
     */
    public function testGetAccountToken()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getAccountTokens
     *
     * Returns a list of metadata for API access tokens tied to your account..
     *
     */
    public function testGetAccountTokens()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for postAccountApplicationMarkRecent
     *
     * Marks an application as recently viewed..
     *
     */
    public function testPostAccountApplicationMarkRecent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for postAccountApplicationStar
     *
     * Stars an application..
     *
     */
    public function testPostAccountApplicationStar()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for postAccountApplicationUnstar
     *
     * Removes an application from the user's starred list..
     *
     */
    public function testPostAccountApplicationUnstar()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for postAccountPassword
     *
     * Verifies that the supplied password matches the current user's password..
     *
     */
    public function testPostAccountPassword()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for postAccountSshKeys
     *
     * Installs a new SSH key for the current user..
     *
     */
    public function testPostAccountSshKeys()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for postAccountTokens
     *
     * Creates an API access token tied to your account..
     *
     */
    public function testPostAccountTokens()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }
}
