<?php
/**
 * OrganizationsApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  Acquia\CloudApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Acquia Cloud API Documentation
 *
 * Acquia Cloud API  # Compatibility  ## Stability  The response for all resource endpoints includes an `X-CloudAPI-Stability` header that indicates what changes, if any, Acquia will make to the resource and how changes will be communicated.  There are three levels of stability:  * `prototype`: A prototype resource is experimental and major changes are likely. A prototype resource may not reach production.     * Compatible and emergency changes may be made with no advance notice     * Disruptive changes may be made with one week notice     * Deprecated resources will remain available for at least one month after deprecation * `development`: A resource that is unlikely to change, but is still being worked on, will be marked as in development. These resources are very likely to reach production.     * Compatible and emergency changes may be made with no advance notice     * Disruptive changes may be made with one month notice     * Deprecated resources will remain available for at least six months after deprecation * `production`: A production resource will not introduce breaking changes within a version, and any breaking changes between versions will be communicated ahead of time.  ## Deprecation  Over time, endpoints may become obsolete and will be removed in the future. These endpoints will be marked with an `X-CloudAPI-Deprecated` header indicating the version in which they were deprecated and the reason for the deprecation. Deprecated endpoints may be removed in the next version of the resource.  ## Versioning  All resource endpoints are versioned within the API. Endpoints that have reached production will not introduce breaking changes between versions. Non-production endpoints will not version for changes.  A specific version of an endpoint can be requested via the `Accept` header:      Accept: application/json, version=2  If the version is not specified, the latest version of the endpoint will be used.  Starting with version 3, we will support the current version of an endpoint and the previous version. Version 1 of the API is [provided elsewhere](https://cloudapi.acquia.com/).  ## Errors  Some endpoints will return a 503 status when dependent services are unavailable:      application/json     {         \"error\": \"system\",         \"message\": \"This action is currently unavailable. Please try again later.\"     }  ## Authentication  All Acquia Cloud API calls require authentication to work properly.  Learn more: <a href='https://docs.acquia.com/acquia-cloud/develop/api/auth/' target='_blank'>https://docs.acquia.com/acquia-cloud/develop/api/auth/</a>  ### Example implementation  An example PHP script for making authenticated API requests can be found at <a href='https://docs.acquia.com/_downloads/api-v2-auth.php' target='_blank'>https://docs.acquia.com/_downloads/api-v2-auth.php</a>. This script uses the <a href='https://oauth2-client.thephpleague.com/' target='_blank'>League/oauth2-client</a> library, installed via Composer.
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace Acquia\CloudApi\Test\Api;

use \Acquia\CloudApi\Configuration;
use \Acquia\CloudApi\ApiException;
use \Acquia\CloudApi\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * OrganizationsApiTest Class Doc Comment
 *
 * @category Class
 * @package  Acquia\CloudApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class OrganizationsApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for deleteOrganization
     *
     * Deletes a specific organization by its UUID..
     *
     */
    public function testDeleteOrganization()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteOrganizationAdmin
     *
     * Removes the user from the list of administrators for the organization..
     *
     */
    public function testDeleteOrganizationAdmin()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteOrganizationAvailableTags
     *
     * Deletes bulk tags from organization resources..
     *
     */
    public function testDeleteOrganizationAvailableTags()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationAdmin
     *
     * Returns the user profile of this organization administrator..
     *
     */
    public function testGetOrganizationAdmin()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationAdminInvites
     *
     * Gets a list of invitations of administrators for this organization..
     *
     */
    public function testGetOrganizationAdminInvites()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationAdmins
     *
     * Returns a list of organization administrators..
     *
     */
    public function testGetOrganizationAdmins()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationApplications
     *
     * Returns a list of applications that belong to the organization..
     *
     */
    public function testGetOrganizationApplications()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationAvailableTags
     *
     * Returns a list of all available application tags..
     *
     */
    public function testGetOrganizationAvailableTags()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationByUuid
     *
     * Return details about a specific organization..
     *
     */
    public function testGetOrganizationByUuid()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationIdentityProvider
     *
     * Returns an identity provider for an organization..
     *
     */
    public function testGetOrganizationIdentityProvider()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationMember
     *
     * Returns the user profile of this organization member..
     *
     */
    public function testGetOrganizationMember()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationMemberApplications
     *
     * Returns a list of applications that an organization member has access to..
     *
     */
    public function testGetOrganizationMemberApplications()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationMembers
     *
     * Returns a list of all organization members..
     *
     */
    public function testGetOrganizationMembers()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationNotifications
     *
     * Returns a list of notifications associated with this organization by its UUID..
     *
     */
    public function testGetOrganizationNotifications()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationRoles
     *
     * Returns a list of all the canonical roles within the organization..
     *
     */
    public function testGetOrganizationRoles()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationSubscriptions
     *
     * Returns a list of subscriptions that belong to the organization..
     *
     */
    public function testGetOrganizationSubscriptions()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationTeamInvites
     *
     * Gets a list of member invitations for all teams in this organization..
     *
     */
    public function testGetOrganizationTeamInvites()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationTeams
     *
     * Returns a list of teams associated with the organization..
     *
     */
    public function testGetOrganizationTeams()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizations
     *
     * Return a list of organizations..
     *
     */
    public function testGetOrganizations()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for postChangeOrganizationOwner
     *
     * Changes the organization owner..
     *
     */
    public function testPostChangeOrganizationOwner()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for postLeaveOrganization
     *
     * Removes your account from an organization..
     *
     */
    public function testPostLeaveOrganization()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for postOrganizationAdminInvite
     *
     * Invites a user to be an administrator in this organization..
     *
     */
    public function testPostOrganizationAdminInvite()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for postOrganizationAvailableTags
     *
     * Adds bulk tags to organization resources..
     *
     */
    public function testPostOrganizationAvailableTags()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for postOrganizationMemberDelete
     *
     * Removes the member from the organization..
     *
     */
    public function testPostOrganizationMemberDelete()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for postOrganizationRoles
     *
     * Creates a role..
     *
     */
    public function testPostOrganizationRoles()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for postOrganizationTeams
     *
     * Creates a team..
     *
     */
    public function testPostOrganizationTeams()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for postOrganizationsCreate
     *
     * Creates a new organization..
     *
     */
    public function testPostOrganizationsCreate()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for putOrganization
     *
     * Renames an organization..
     *
     */
    public function testPutOrganization()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }
}
