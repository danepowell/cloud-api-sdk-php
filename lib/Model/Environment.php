<?php
/**
 * Environment
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Acquia\CloudApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Acquia Cloud API Documentation
 *
 * Acquia Cloud API  # Compatibility  ## Stability  The response for all resource endpoints includes an `X-CloudAPI-Stability` header that indicates what changes, if any, Acquia will make to the resource and how changes will be communicated.  There are three levels of stability:  * `prototype`: A prototype resource is experimental and major changes are likely. A prototype resource may not reach production.     * Compatible and emergency changes may be made with no advance notice     * Disruptive changes may be made with one week notice     * Deprecated resources will remain available for at least one month after deprecation * `development`: A resource that is unlikely to change, but is still being worked on, will be marked as in development. These resources are very likely to reach production.     * Compatible and emergency changes may be made with no advance notice     * Disruptive changes may be made with one month notice     * Deprecated resources will remain available for at least six months after deprecation * `production`: A production resource will not introduce breaking changes within a version, and any breaking changes between versions will be communicated ahead of time.  ## Deprecation  Over time, endpoints may become obsolete and will be removed in the future. These endpoints will be marked with an `X-CloudAPI-Deprecated` header indicating the version in which they were deprecated and the reason for the deprecation. Deprecated endpoints may be removed in the next version of the resource.  ## Versioning  All resource endpoints are versioned within the API. Endpoints that have reached production will not introduce breaking changes between versions. Non-production endpoints will not version for changes.  A specific version of an endpoint can be requested via the `Accept` header:      Accept: application/json, version=2  If the version is not specified, the latest version of the endpoint will be used.  Starting with version 3, we will support the current version of an endpoint and the previous version. Version 1 of the API is [provided elsewhere](https://cloudapi.acquia.com/).  ## Errors  Some endpoints will return a 503 status when dependent services are unavailable:      application/json     {         \"error\": \"system\",         \"message\": \"This action is currently unavailable. Please try again later.\"     }  ## Authentication  All Acquia Cloud API calls require authentication to work properly.  Learn more: <a href='https://docs.acquia.com/acquia-cloud/develop/api/auth/' target='_blank'>https://docs.acquia.com/acquia-cloud/develop/api/auth/</a>  ### Example implementation  An example PHP script for making authenticated API requests can be found at <a href='https://docs.acquia.com/_downloads/api-v2-auth.php' target='_blank'>https://docs.acquia.com/_downloads/api-v2-auth.php</a>. This script uses the <a href='https://oauth2-client.thephpleague.com/' target='_blank'>League/oauth2-client</a> library, installed via Composer.
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Acquia\CloudApi\Model;

use \ArrayAccess;
use \Acquia\CloudApi\ObjectSerializer;

/**
 * Environment Class Doc Comment
 *
 * @category Class
 * @package  Acquia\CloudApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Environment implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Environment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'label' => 'string',
        'name' => 'string',
        'application' => '\Acquia\CloudApi\Model\ApplicationStub',
        'domains' => 'string[]',
        'active_domain' => 'string',
        'default_domain' => 'string',
        'image_url' => 'string',
        'ssh_url' => 'string',
        'ips' => 'string[]',
        'region' => 'string',
        'balancer' => 'string',
        'platform' => 'string',
        'status' => 'string',
        'type' => 'string',
        'size' => 'string',
        'weight' => 'int',
        'vcs' => '\Acquia\CloudApi\Model\Vcs',
        'flags' => 'array<string,\Acquia\CloudApi\Model\EnvironmentFlagsValue>',
        'configuration' => '\Acquia\CloudApi\Model\EnvironmentConfiguration',
        'artifact' => '\Acquia\CloudApi\Model\ArtifactStub',
        '_links' => '\Acquia\CloudApi\Model\Links'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'label' => null,
        'name' => null,
        'application' => null,
        'domains' => 'uri',
        'active_domain' => 'uri',
        'default_domain' => 'uri',
        'image_url' => 'uri',
        'ssh_url' => null,
        'ips' => 'ipv4',
        'region' => null,
        'balancer' => null,
        'platform' => null,
        'status' => null,
        'type' => null,
        'size' => null,
        'weight' => null,
        'vcs' => null,
        'flags' => null,
        'configuration' => null,
        'artifact' => null,
        '_links' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'label' => false,
		'name' => false,
		'application' => false,
		'domains' => false,
		'active_domain' => false,
		'default_domain' => false,
		'image_url' => false,
		'ssh_url' => false,
		'ips' => false,
		'region' => false,
		'balancer' => false,
		'platform' => false,
		'status' => false,
		'type' => false,
		'size' => false,
		'weight' => false,
		'vcs' => false,
		'flags' => false,
		'configuration' => false,
		'artifact' => false,
		'_links' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'label' => 'label',
        'name' => 'name',
        'application' => 'application',
        'domains' => 'domains',
        'active_domain' => 'active_domain',
        'default_domain' => 'default_domain',
        'image_url' => 'image_url',
        'ssh_url' => 'ssh_url',
        'ips' => 'ips',
        'region' => 'region',
        'balancer' => 'balancer',
        'platform' => 'platform',
        'status' => 'status',
        'type' => 'type',
        'size' => 'size',
        'weight' => 'weight',
        'vcs' => 'vcs',
        'flags' => 'flags',
        'configuration' => 'configuration',
        'artifact' => 'artifact',
        '_links' => '_links'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'label' => 'setLabel',
        'name' => 'setName',
        'application' => 'setApplication',
        'domains' => 'setDomains',
        'active_domain' => 'setActiveDomain',
        'default_domain' => 'setDefaultDomain',
        'image_url' => 'setImageUrl',
        'ssh_url' => 'setSshUrl',
        'ips' => 'setIps',
        'region' => 'setRegion',
        'balancer' => 'setBalancer',
        'platform' => 'setPlatform',
        'status' => 'setStatus',
        'type' => 'setType',
        'size' => 'setSize',
        'weight' => 'setWeight',
        'vcs' => 'setVcs',
        'flags' => 'setFlags',
        'configuration' => 'setConfiguration',
        'artifact' => 'setArtifact',
        '_links' => 'setLinks'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'label' => 'getLabel',
        'name' => 'getName',
        'application' => 'getApplication',
        'domains' => 'getDomains',
        'active_domain' => 'getActiveDomain',
        'default_domain' => 'getDefaultDomain',
        'image_url' => 'getImageUrl',
        'ssh_url' => 'getSshUrl',
        'ips' => 'getIps',
        'region' => 'getRegion',
        'balancer' => 'getBalancer',
        'platform' => 'getPlatform',
        'status' => 'getStatus',
        'type' => 'getType',
        'size' => 'getSize',
        'weight' => 'getWeight',
        'vcs' => 'getVcs',
        'flags' => 'getFlags',
        'configuration' => 'getConfiguration',
        'artifact' => 'getArtifact',
        '_links' => 'getLinks'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const BALANCER_BALANCERS = 'balancers';
    public const BALANCER_ELB = 'elb';
    public const BALANCER_CLUSTER = 'cluster';
    public const PLATFORM_CLOUD = 'cloud';
    public const PLATFORM_CLOUD_NEXT = 'cloud-next';
    public const PLATFORM_UNKNOWN = 'unknown';
    public const TYPE_NODE = 'node';
    public const TYPE_DRUPAL = 'drupal';
    public const TYPE_UNKNOWN = 'unknown';
    public const SIZE_SMALL = 'small';
    public const SIZE_MEDIUM = 'medium';
    public const SIZE_LARGE = 'large';
    public const SIZE_UNKNOWN = 'unknown';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBalancerAllowableValues()
    {
        return [
            self::BALANCER_BALANCERS,
            self::BALANCER_ELB,
            self::BALANCER_CLUSTER,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPlatformAllowableValues()
    {
        return [
            self::PLATFORM_CLOUD,
            self::PLATFORM_CLOUD_NEXT,
            self::PLATFORM_UNKNOWN,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_NODE,
            self::TYPE_DRUPAL,
            self::TYPE_UNKNOWN,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSizeAllowableValues()
    {
        return [
            self::SIZE_SMALL,
            self::SIZE_MEDIUM,
            self::SIZE_LARGE,
            self::SIZE_UNKNOWN,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('label', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('application', $data ?? [], null);
        $this->setIfExists('domains', $data ?? [], null);
        $this->setIfExists('active_domain', $data ?? [], null);
        $this->setIfExists('default_domain', $data ?? [], null);
        $this->setIfExists('image_url', $data ?? [], null);
        $this->setIfExists('ssh_url', $data ?? [], null);
        $this->setIfExists('ips', $data ?? [], null);
        $this->setIfExists('region', $data ?? [], null);
        $this->setIfExists('balancer', $data ?? [], null);
        $this->setIfExists('platform', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('size', $data ?? [], null);
        $this->setIfExists('weight', $data ?? [], null);
        $this->setIfExists('vcs', $data ?? [], null);
        $this->setIfExists('flags', $data ?? [], null);
        $this->setIfExists('configuration', $data ?? [], null);
        $this->setIfExists('artifact', $data ?? [], null);
        $this->setIfExists('_links', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['label'] === null) {
            $invalidProperties[] = "'label' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['application'] === null) {
            $invalidProperties[] = "'application' can't be null";
        }
        if ($this->container['domains'] === null) {
            $invalidProperties[] = "'domains' can't be null";
        }
        if ($this->container['active_domain'] === null) {
            $invalidProperties[] = "'active_domain' can't be null";
        }
        if ($this->container['default_domain'] === null) {
            $invalidProperties[] = "'default_domain' can't be null";
        }
        if ($this->container['image_url'] === null) {
            $invalidProperties[] = "'image_url' can't be null";
        }
        if ($this->container['ssh_url'] === null) {
            $invalidProperties[] = "'ssh_url' can't be null";
        }
        if ($this->container['ips'] === null) {
            $invalidProperties[] = "'ips' can't be null";
        }
        if ($this->container['region'] === null) {
            $invalidProperties[] = "'region' can't be null";
        }
        if ($this->container['balancer'] === null) {
            $invalidProperties[] = "'balancer' can't be null";
        }
        $allowedValues = $this->getBalancerAllowableValues();
        if (!is_null($this->container['balancer']) && !in_array($this->container['balancer'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'balancer', must be one of '%s'",
                $this->container['balancer'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['platform'] === null) {
            $invalidProperties[] = "'platform' can't be null";
        }
        $allowedValues = $this->getPlatformAllowableValues();
        if (!is_null($this->container['platform']) && !in_array($this->container['platform'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'platform', must be one of '%s'",
                $this->container['platform'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['size'] === null) {
            $invalidProperties[] = "'size' can't be null";
        }
        $allowedValues = $this->getSizeAllowableValues();
        if (!is_null($this->container['size']) && !in_array($this->container['size'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'size', must be one of '%s'",
                $this->container['size'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['weight'] === null) {
            $invalidProperties[] = "'weight' can't be null";
        }
        if ($this->container['vcs'] === null) {
            $invalidProperties[] = "'vcs' can't be null";
        }
        if ($this->container['flags'] === null) {
            $invalidProperties[] = "'flags' can't be null";
        }
        if ($this->container['configuration'] === null) {
            $invalidProperties[] = "'configuration' can't be null";
        }
        if ($this->container['artifact'] === null) {
            $invalidProperties[] = "'artifact' can't be null";
        }
        if ($this->container['_links'] === null) {
            $invalidProperties[] = "'_links' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The ID of the environment. The ID is a compound key consisting of the internal database ID of the environment and the application UUID.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets label
     *
     * @return string
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param string $label The human-readable name of the environment.
     *
     * @return self
     */
    public function setLabel($label)
    {
        if (is_null($label)) {
            throw new \InvalidArgumentException('non-nullable label cannot be null');
        }
        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The stage name of the environment.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets application
     *
     * @return \Acquia\CloudApi\Model\ApplicationStub
     */
    public function getApplication()
    {
        return $this->container['application'];
    }

    /**
     * Sets application
     *
     * @param \Acquia\CloudApi\Model\ApplicationStub $application application
     *
     * @return self
     */
    public function setApplication($application)
    {
        if (is_null($application)) {
            throw new \InvalidArgumentException('non-nullable application cannot be null');
        }
        $this->container['application'] = $application;

        return $this;
    }

    /**
     * Gets domains
     *
     * @return string[]
     */
    public function getDomains()
    {
        return $this->container['domains'];
    }

    /**
     * Sets domains
     *
     * @param string[] $domains An array of domain names attached to this environment.
     *
     * @return self
     */
    public function setDomains($domains)
    {
        if (is_null($domains)) {
            throw new \InvalidArgumentException('non-nullable domains cannot be null');
        }
        $this->container['domains'] = $domains;

        return $this;
    }

    /**
     * Gets active_domain
     *
     * @return string
     */
    public function getActiveDomain()
    {
        return $this->container['active_domain'];
    }

    /**
     * Sets active_domain
     *
     * @param string $active_domain The active domain name for this environment.
     *
     * @return self
     */
    public function setActiveDomain($active_domain)
    {
        if (is_null($active_domain)) {
            throw new \InvalidArgumentException('non-nullable active_domain cannot be null');
        }
        $this->container['active_domain'] = $active_domain;

        return $this;
    }

    /**
     * Gets default_domain
     *
     * @return string
     */
    public function getDefaultDomain()
    {
        return $this->container['default_domain'];
    }

    /**
     * Sets default_domain
     *
     * @param string $default_domain The default domain name for this environment.
     *
     * @return self
     */
    public function setDefaultDomain($default_domain)
    {
        if (is_null($default_domain)) {
            throw new \InvalidArgumentException('non-nullable default_domain cannot be null');
        }
        $this->container['default_domain'] = $default_domain;

        return $this;
    }

    /**
     * Gets image_url
     *
     * @return string
     */
    public function getImageUrl()
    {
        return $this->container['image_url'];
    }

    /**
     * Sets image_url
     *
     * @param string $image_url The URL to the image for this environment.
     *
     * @return self
     */
    public function setImageUrl($image_url)
    {
        if (is_null($image_url)) {
            throw new \InvalidArgumentException('non-nullable image_url cannot be null');
        }
        $this->container['image_url'] = $image_url;

        return $this;
    }

    /**
     * Gets ssh_url
     *
     * @return string
     */
    public function getSshUrl()
    {
        return $this->container['ssh_url'];
    }

    /**
     * Sets ssh_url
     *
     * @param string $ssh_url The URL used to SSH into the environment.
     *
     * @return self
     */
    public function setSshUrl($ssh_url)
    {
        if (is_null($ssh_url)) {
            throw new \InvalidArgumentException('non-nullable ssh_url cannot be null');
        }
        $this->container['ssh_url'] = $ssh_url;

        return $this;
    }

    /**
     * Gets ips
     *
     * @return string[]
     * @deprecated
     */
    public function getIps()
    {
        return $this->container['ips'];
    }

    /**
     * Sets ips
     *
     * @param string[] $ips An array of IP addresses attached to this environment.
     *
     * @return self
     * @deprecated
     */
    public function setIps($ips)
    {
        if (is_null($ips)) {
            throw new \InvalidArgumentException('non-nullable ips cannot be null');
        }
        $this->container['ips'] = $ips;

        return $this;
    }

    /**
     * Gets region
     *
     * @return string
     */
    public function getRegion()
    {
        return $this->container['region'];
    }

    /**
     * Sets region
     *
     * @param string $region The region the environment resides in.
     *
     * @return self
     */
    public function setRegion($region)
    {
        if (is_null($region)) {
            throw new \InvalidArgumentException('non-nullable region cannot be null');
        }
        $this->container['region'] = $region;

        return $this;
    }

    /**
     * Gets balancer
     *
     * @return string
     */
    public function getBalancer()
    {
        return $this->container['balancer'];
    }

    /**
     * Sets balancer
     *
     * @param string $balancer The balancer type. - balancers: The environment is behind a Legacy balancer. - elb: The environment is behind an ELB balancer. - cluster: The environment is behind an Edge Cluster balancer.
     *
     * @return self
     */
    public function setBalancer($balancer)
    {
        if (is_null($balancer)) {
            throw new \InvalidArgumentException('non-nullable balancer cannot be null');
        }
        $allowedValues = $this->getBalancerAllowableValues();
        if (!in_array($balancer, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'balancer', must be one of '%s'",
                    $balancer,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['balancer'] = $balancer;

        return $this;
    }

    /**
     * Gets platform
     *
     * @return string
     */
    public function getPlatform()
    {
        return $this->container['platform'];
    }

    /**
     * Sets platform
     *
     * @param string $platform The platform type. - cloud: The environment is hosted on a Cloud Classic Platform. - cloud-next: The environment is hosted on a Cloud Next Platform. - unknown:  The host information is not available for the environment.
     *
     * @return self
     */
    public function setPlatform($platform)
    {
        if (is_null($platform)) {
            throw new \InvalidArgumentException('non-nullable platform cannot be null');
        }
        $allowedValues = $this->getPlatformAllowableValues();
        if (!in_array($platform, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'platform', must be one of '%s'",
                    $platform,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['platform'] = $platform;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status The status of this environment.
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type The type of environment. - node: A NodeJS environment. - drupal: A Drupal environment. - unknown: We were unable to determine the environment type.
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets size
     *
     * @return string
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     *
     * @param string $size The size of the environment. Will be null if the environment type does not support sizes.
     *
     * @return self
     */
    public function setSize($size)
    {
        if (is_null($size)) {
            throw new \InvalidArgumentException('non-nullable size cannot be null');
        }
        $allowedValues = $this->getSizeAllowableValues();
        if (!in_array($size, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'size', must be one of '%s'",
                    $size,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return int
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param int $weight The environment weight for display purposes.
     *
     * @return self
     */
    public function setWeight($weight)
    {
        if (is_null($weight)) {
            throw new \InvalidArgumentException('non-nullable weight cannot be null');
        }
        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets vcs
     *
     * @return \Acquia\CloudApi\Model\Vcs
     */
    public function getVcs()
    {
        return $this->container['vcs'];
    }

    /**
     * Sets vcs
     *
     * @param \Acquia\CloudApi\Model\Vcs $vcs vcs
     *
     * @return self
     */
    public function setVcs($vcs)
    {
        if (is_null($vcs)) {
            throw new \InvalidArgumentException('non-nullable vcs cannot be null');
        }
        $this->container['vcs'] = $vcs;

        return $this;
    }

    /**
     * Gets flags
     *
     * @return array<string,\Acquia\CloudApi\Model\EnvironmentFlagsValue>
     */
    public function getFlags()
    {
        return $this->container['flags'];
    }

    /**
     * Sets flags
     *
     * @param array<string,\Acquia\CloudApi\Model\EnvironmentFlagsValue> $flags An array of various flags that indicate functionality associated with the environment.
     *
     * @return self
     */
    public function setFlags($flags)
    {
        if (is_null($flags)) {
            throw new \InvalidArgumentException('non-nullable flags cannot be null');
        }
        $this->container['flags'] = $flags;

        return $this;
    }

    /**
     * Gets configuration
     *
     * @return \Acquia\CloudApi\Model\EnvironmentConfiguration
     */
    public function getConfiguration()
    {
        return $this->container['configuration'];
    }

    /**
     * Sets configuration
     *
     * @param \Acquia\CloudApi\Model\EnvironmentConfiguration $configuration configuration
     *
     * @return self
     */
    public function setConfiguration($configuration)
    {
        if (is_null($configuration)) {
            throw new \InvalidArgumentException('non-nullable configuration cannot be null');
        }
        $this->container['configuration'] = $configuration;

        return $this;
    }

    /**
     * Gets artifact
     *
     * @return \Acquia\CloudApi\Model\ArtifactStub
     */
    public function getArtifact()
    {
        return $this->container['artifact'];
    }

    /**
     * Sets artifact
     *
     * @param \Acquia\CloudApi\Model\ArtifactStub $artifact artifact
     *
     * @return self
     */
    public function setArtifact($artifact)
    {
        if (is_null($artifact)) {
            throw new \InvalidArgumentException('non-nullable artifact cannot be null');
        }
        $this->container['artifact'] = $artifact;

        return $this;
    }

    /**
     * Gets _links
     *
     * @return \Acquia\CloudApi\Model\Links
     */
    public function getLinks()
    {
        return $this->container['_links'];
    }

    /**
     * Sets _links
     *
     * @param \Acquia\CloudApi\Model\Links $_links _links
     *
     * @return self
     */
    public function setLinks($_links)
    {
        if (is_null($_links)) {
            throw new \InvalidArgumentException('non-nullable _links cannot be null');
        }
        $this->container['_links'] = $_links;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


