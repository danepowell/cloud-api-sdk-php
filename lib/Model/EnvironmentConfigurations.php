<?php
/**
 * EnvironmentConfigurations
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Acquia\CloudApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Acquia Cloud API Documentation
 *
 * Acquia Cloud API  # Compatibility  ## Stability  The response for all resource endpoints includes an `X-CloudAPI-Stability` header that indicates what changes, if any, Acquia will make to the resource and how changes will be communicated.  There are three levels of stability:  * `prototype`: A prototype resource is experimental and major changes are likely. A prototype resource may not reach production.     * Compatible and emergency changes may be made with no advance notice     * Disruptive changes may be made with one week notice     * Deprecated resources will remain available for at least one month after deprecation * `development`: A resource that is unlikely to change, but is still being worked on, will be marked as in development. These resources are very likely to reach production.     * Compatible and emergency changes may be made with no advance notice     * Disruptive changes may be made with one month notice     * Deprecated resources will remain available for at least six months after deprecation * `production`: A production resource will not introduce breaking changes within a version, and any breaking changes between versions will be communicated ahead of time.  ## Deprecation  Over time, endpoints may become obsolete and will be removed in the future. These endpoints will be marked with an `X-CloudAPI-Deprecated` header indicating the version in which they were deprecated and the reason for the deprecation. Deprecated endpoints may be removed in the next version of the resource.  ## Versioning  All resource endpoints are versioned within the API. Endpoints that have reached production will not introduce breaking changes between versions. Non-production endpoints will not version for changes.  A specific version of an endpoint can be requested via the `Accept` header:      Accept: application/json, version=2  If the version is not specified, the latest version of the endpoint will be used.  Starting with version 3, we will support the current version of an endpoint and the previous version. Version 1 of the API is [provided elsewhere](https://cloudapi.acquia.com/).  ## Errors  Some endpoints will return a 503 status when dependent services are unavailable:      application/json     {         \"error\": \"system\",         \"message\": \"This action is currently unavailable. Please try again later.\"     }  ## Authentication  All Acquia Cloud API calls require authentication to work properly.  Learn more: <a href='https://docs.acquia.com/acquia-cloud/develop/api/auth/' target='_blank'>https://docs.acquia.com/acquia-cloud/develop/api/auth/</a>  ### Example implementation  An example PHP script for making authenticated API requests can be found at <a href='https://docs.acquia.com/_downloads/api-v2-auth.php' target='_blank'>https://docs.acquia.com/_downloads/api-v2-auth.php</a>. This script uses the <a href='https://oauth2-client.thephpleague.com/' target='_blank'>League/oauth2-client</a> library, installed via Composer.
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Acquia\CloudApi\Model;

use \ArrayAccess;
use \Acquia\CloudApi\ObjectSerializer;

/**
 * EnvironmentConfigurations Class Doc Comment
 *
 * @category Class
 * @description An array of configuration details for the environment.
 * @package  Acquia\CloudApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EnvironmentConfigurations implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'EnvironmentConfigurations';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'version' => 'string',
        'memory_limit' => 'int',
        'opcache' => 'int',
        'apcu' => 'int',
        'interned_strings_buffer' => 'int',
        'max_execution_time' => 'int',
        'max_post_size' => 'int',
        'max_input_vars' => 'int',
        'memcached_limit' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'version' => null,
        'memory_limit' => null,
        'opcache' => null,
        'apcu' => null,
        'interned_strings_buffer' => null,
        'max_execution_time' => null,
        'max_post_size' => null,
        'max_input_vars' => null,
        'memcached_limit' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'version' => false,
		'memory_limit' => false,
		'opcache' => false,
		'apcu' => false,
		'interned_strings_buffer' => false,
		'max_execution_time' => false,
		'max_post_size' => false,
		'max_input_vars' => false,
		'memcached_limit' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'version' => 'version',
        'memory_limit' => 'memory_limit',
        'opcache' => 'opcache',
        'apcu' => 'apcu',
        'interned_strings_buffer' => 'interned_strings_buffer',
        'max_execution_time' => 'max_execution_time',
        'max_post_size' => 'max_post_size',
        'max_input_vars' => 'max_input_vars',
        'memcached_limit' => 'memcached_limit'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'version' => 'setVersion',
        'memory_limit' => 'setMemoryLimit',
        'opcache' => 'setOpcache',
        'apcu' => 'setApcu',
        'interned_strings_buffer' => 'setInternedStringsBuffer',
        'max_execution_time' => 'setMaxExecutionTime',
        'max_post_size' => 'setMaxPostSize',
        'max_input_vars' => 'setMaxInputVars',
        'memcached_limit' => 'setMemcachedLimit'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'version' => 'getVersion',
        'memory_limit' => 'getMemoryLimit',
        'opcache' => 'getOpcache',
        'apcu' => 'getApcu',
        'interned_strings_buffer' => 'getInternedStringsBuffer',
        'max_execution_time' => 'getMaxExecutionTime',
        'max_post_size' => 'getMaxPostSize',
        'max_input_vars' => 'getMaxInputVars',
        'memcached_limit' => 'getMemcachedLimit'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('version', $data ?? [], null);
        $this->setIfExists('memory_limit', $data ?? [], 128);
        $this->setIfExists('opcache', $data ?? [], 96);
        $this->setIfExists('apcu', $data ?? [], 32);
        $this->setIfExists('interned_strings_buffer', $data ?? [], 8);
        $this->setIfExists('max_execution_time', $data ?? [], 300);
        $this->setIfExists('max_post_size', $data ?? [], 256);
        $this->setIfExists('max_input_vars', $data ?? [], 1000);
        $this->setIfExists('memcached_limit', $data ?? [], 64);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['memory_limit']) && ($this->container['memory_limit'] > 1024)) {
            $invalidProperties[] = "invalid value for 'memory_limit', must be smaller than or equal to 1024.";
        }

        if (!is_null($this->container['memory_limit']) && ($this->container['memory_limit'] < 128)) {
            $invalidProperties[] = "invalid value for 'memory_limit', must be bigger than or equal to 128.";
        }

        if (!is_null($this->container['opcache']) && ($this->container['opcache'] > 512)) {
            $invalidProperties[] = "invalid value for 'opcache', must be smaller than or equal to 512.";
        }

        if (!is_null($this->container['opcache']) && ($this->container['opcache'] < 96)) {
            $invalidProperties[] = "invalid value for 'opcache', must be bigger than or equal to 96.";
        }

        if (!is_null($this->container['apcu']) && ($this->container['apcu'] > 512)) {
            $invalidProperties[] = "invalid value for 'apcu', must be smaller than or equal to 512.";
        }

        if (!is_null($this->container['apcu']) && ($this->container['apcu'] < 32)) {
            $invalidProperties[] = "invalid value for 'apcu', must be bigger than or equal to 32.";
        }

        if (!is_null($this->container['interned_strings_buffer']) && ($this->container['interned_strings_buffer'] > 32)) {
            $invalidProperties[] = "invalid value for 'interned_strings_buffer', must be smaller than or equal to 32.";
        }

        if (!is_null($this->container['interned_strings_buffer']) && ($this->container['interned_strings_buffer'] < 8)) {
            $invalidProperties[] = "invalid value for 'interned_strings_buffer', must be bigger than or equal to 8.";
        }

        if (!is_null($this->container['max_execution_time']) && ($this->container['max_execution_time'] > 300)) {
            $invalidProperties[] = "invalid value for 'max_execution_time', must be smaller than or equal to 300.";
        }

        if (!is_null($this->container['max_execution_time']) && ($this->container['max_execution_time'] < 1)) {
            $invalidProperties[] = "invalid value for 'max_execution_time', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['max_post_size']) && ($this->container['max_post_size'] > 1024)) {
            $invalidProperties[] = "invalid value for 'max_post_size', must be smaller than or equal to 1024.";
        }

        if (!is_null($this->container['max_post_size']) && ($this->container['max_post_size'] < 64)) {
            $invalidProperties[] = "invalid value for 'max_post_size', must be bigger than or equal to 64.";
        }

        if (!is_null($this->container['max_input_vars']) && ($this->container['max_input_vars'] > 20000)) {
            $invalidProperties[] = "invalid value for 'max_input_vars', must be smaller than or equal to 20000.";
        }

        if (!is_null($this->container['max_input_vars']) && ($this->container['max_input_vars'] < 500)) {
            $invalidProperties[] = "invalid value for 'max_input_vars', must be bigger than or equal to 500.";
        }

        if (!is_null($this->container['memcached_limit']) && ($this->container['memcached_limit'] > 12288)) {
            $invalidProperties[] = "invalid value for 'memcached_limit', must be smaller than or equal to 12288.";
        }

        if (!is_null($this->container['memcached_limit']) && ($this->container['memcached_limit'] < 0)) {
            $invalidProperties[] = "invalid value for 'memcached_limit', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets version
     *
     * @return string|null
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string|null $version The PHP or Node version.
     *
     * @return self
     */
    public function setVersion($version)
    {
        if (is_null($version)) {
            throw new \InvalidArgumentException('non-nullable version cannot be null');
        }
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets memory_limit
     *
     * @return int|null
     */
    public function getMemoryLimit()
    {
        return $this->container['memory_limit'];
    }

    /**
     * Sets memory_limit
     *
     * @param int|null $memory_limit Limits PHP request memory usage in megabytes.
     *
     * @return self
     */
    public function setMemoryLimit($memory_limit)
    {
        if (is_null($memory_limit)) {
            throw new \InvalidArgumentException('non-nullable memory_limit cannot be null');
        }

        if (($memory_limit > 1024)) {
            throw new \InvalidArgumentException('invalid value for $memory_limit when calling EnvironmentConfigurations., must be smaller than or equal to 1024.');
        }
        if (($memory_limit < 128)) {
            throw new \InvalidArgumentException('invalid value for $memory_limit when calling EnvironmentConfigurations., must be bigger than or equal to 128.');
        }

        $this->container['memory_limit'] = $memory_limit;

        return $this;
    }

    /**
     * Gets opcache
     *
     * @return int|null
     */
    public function getOpcache()
    {
        return $this->container['opcache'];
    }

    /**
     * Sets opcache
     *
     * @param int|null $opcache This is the total amount of memory available for caching precompiled script bytecode per PHP/FPM process.
     *
     * @return self
     */
    public function setOpcache($opcache)
    {
        if (is_null($opcache)) {
            throw new \InvalidArgumentException('non-nullable opcache cannot be null');
        }

        if (($opcache > 512)) {
            throw new \InvalidArgumentException('invalid value for $opcache when calling EnvironmentConfigurations., must be smaller than or equal to 512.');
        }
        if (($opcache < 96)) {
            throw new \InvalidArgumentException('invalid value for $opcache when calling EnvironmentConfigurations., must be bigger than or equal to 96.');
        }

        $this->container['opcache'] = $opcache;

        return $this;
    }

    /**
     * Gets apcu
     *
     * @return int|null
     */
    public function getApcu()
    {
        return $this->container['apcu'];
    }

    /**
     * Sets apcu
     *
     * @param int|null $apcu APCu shared memory size per web server.
     *
     * @return self
     */
    public function setApcu($apcu)
    {
        if (is_null($apcu)) {
            throw new \InvalidArgumentException('non-nullable apcu cannot be null');
        }

        if (($apcu > 512)) {
            throw new \InvalidArgumentException('invalid value for $apcu when calling EnvironmentConfigurations., must be smaller than or equal to 512.');
        }
        if (($apcu < 32)) {
            throw new \InvalidArgumentException('invalid value for $apcu when calling EnvironmentConfigurations., must be bigger than or equal to 32.');
        }

        $this->container['apcu'] = $apcu;

        return $this;
    }

    /**
     * Gets interned_strings_buffer
     *
     * @return int|null
     */
    public function getInternedStringsBuffer()
    {
        return $this->container['interned_strings_buffer'];
    }

    /**
     * Sets interned_strings_buffer
     *
     * @param int|null $interned_strings_buffer Sets PHP Opcache key count per server.
     *
     * @return self
     */
    public function setInternedStringsBuffer($interned_strings_buffer)
    {
        if (is_null($interned_strings_buffer)) {
            throw new \InvalidArgumentException('non-nullable interned_strings_buffer cannot be null');
        }

        if (($interned_strings_buffer > 32)) {
            throw new \InvalidArgumentException('invalid value for $interned_strings_buffer when calling EnvironmentConfigurations., must be smaller than or equal to 32.');
        }
        if (($interned_strings_buffer < 8)) {
            throw new \InvalidArgumentException('invalid value for $interned_strings_buffer when calling EnvironmentConfigurations., must be bigger than or equal to 8.');
        }

        $this->container['interned_strings_buffer'] = $interned_strings_buffer;

        return $this;
    }

    /**
     * Gets max_execution_time
     *
     * @return int|null
     */
    public function getMaxExecutionTime()
    {
        return $this->container['max_execution_time'];
    }

    /**
     * Sets max_execution_time
     *
     * @param int|null $max_execution_time Limits PHP request time in seconds.
     *
     * @return self
     */
    public function setMaxExecutionTime($max_execution_time)
    {
        if (is_null($max_execution_time)) {
            throw new \InvalidArgumentException('non-nullable max_execution_time cannot be null');
        }

        if (($max_execution_time > 300)) {
            throw new \InvalidArgumentException('invalid value for $max_execution_time when calling EnvironmentConfigurations., must be smaller than or equal to 300.');
        }
        if (($max_execution_time < 1)) {
            throw new \InvalidArgumentException('invalid value for $max_execution_time when calling EnvironmentConfigurations., must be bigger than or equal to 1.');
        }

        $this->container['max_execution_time'] = $max_execution_time;

        return $this;
    }

    /**
     * Gets max_post_size
     *
     * @return int|null
     */
    public function getMaxPostSize()
    {
        return $this->container['max_post_size'];
    }

    /**
     * Sets max_post_size
     *
     * @param int|null $max_post_size Sets the PHP limit on POST body size.
     *
     * @return self
     */
    public function setMaxPostSize($max_post_size)
    {
        if (is_null($max_post_size)) {
            throw new \InvalidArgumentException('non-nullable max_post_size cannot be null');
        }

        if (($max_post_size > 1024)) {
            throw new \InvalidArgumentException('invalid value for $max_post_size when calling EnvironmentConfigurations., must be smaller than or equal to 1024.');
        }
        if (($max_post_size < 64)) {
            throw new \InvalidArgumentException('invalid value for $max_post_size when calling EnvironmentConfigurations., must be bigger than or equal to 64.');
        }

        $this->container['max_post_size'] = $max_post_size;

        return $this;
    }

    /**
     * Gets max_input_vars
     *
     * @return int|null
     */
    public function getMaxInputVars()
    {
        return $this->container['max_input_vars'];
    }

    /**
     * Sets max_input_vars
     *
     * @param int|null $max_input_vars Limits the number of various request items in PHP.
     *
     * @return self
     */
    public function setMaxInputVars($max_input_vars)
    {
        if (is_null($max_input_vars)) {
            throw new \InvalidArgumentException('non-nullable max_input_vars cannot be null');
        }

        if (($max_input_vars > 20000)) {
            throw new \InvalidArgumentException('invalid value for $max_input_vars when calling EnvironmentConfigurations., must be smaller than or equal to 20000.');
        }
        if (($max_input_vars < 500)) {
            throw new \InvalidArgumentException('invalid value for $max_input_vars when calling EnvironmentConfigurations., must be bigger than or equal to 500.');
        }

        $this->container['max_input_vars'] = $max_input_vars;

        return $this;
    }

    /**
     * Gets memcached_limit
     *
     * @return int|null
     */
    public function getMemcachedLimit()
    {
        return $this->container['memcached_limit'];
    }

    /**
     * Sets memcached_limit
     *
     * @param int|null $memcached_limit Sets the maximum amount of memory in MB that can be allocated to memcached. Only available on Acquia Cloud Next.
     *
     * @return self
     */
    public function setMemcachedLimit($memcached_limit)
    {
        if (is_null($memcached_limit)) {
            throw new \InvalidArgumentException('non-nullable memcached_limit cannot be null');
        }

        if (($memcached_limit > 12288)) {
            throw new \InvalidArgumentException('invalid value for $memcached_limit when calling EnvironmentConfigurations., must be smaller than or equal to 12288.');
        }
        if (($memcached_limit < 0)) {
            throw new \InvalidArgumentException('invalid value for $memcached_limit when calling EnvironmentConfigurations., must be bigger than or equal to 0.');
        }

        $this->container['memcached_limit'] = $memcached_limit;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


