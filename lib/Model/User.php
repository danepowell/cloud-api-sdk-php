<?php
/**
 * User
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Acquia\CloudApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Acquia Cloud API Documentation
 *
 * Acquia Cloud API  # Compatibility  ## Stability  The response for all resource endpoints includes an `X-CloudAPI-Stability` header that indicates what changes, if any, Acquia will make to the resource and how changes will be communicated.  There are three levels of stability:  * `prototype`: A prototype resource is experimental and major changes are likely. A prototype resource may not reach production.     * Compatible and emergency changes may be made with no advance notice     * Disruptive changes may be made with one week notice     * Deprecated resources will remain available for at least one month after deprecation * `development`: A resource that is unlikely to change, but is still being worked on, will be marked as in development. These resources are very likely to reach production.     * Compatible and emergency changes may be made with no advance notice     * Disruptive changes may be made with one month notice     * Deprecated resources will remain available for at least six months after deprecation * `production`: A production resource will not introduce breaking changes within a version, and any breaking changes between versions will be communicated ahead of time.  ## Deprecation  Over time, endpoints may become obsolete and will be removed in the future. These endpoints will be marked with an `X-CloudAPI-Deprecated` header indicating the version in which they were deprecated and the reason for the deprecation. Deprecated endpoints may be removed in the next version of the resource.  ## Versioning  All resource endpoints are versioned within the API. Endpoints that have reached production will not introduce breaking changes between versions. Non-production endpoints will not version for changes.  A specific version of an endpoint can be requested via the `Accept` header:      Accept: application/json, version=2  If the version is not specified, the latest version of the endpoint will be used.  Starting with version 3, we will support the current version of an endpoint and the previous version. Version 1 of the API is [provided elsewhere](https://cloudapi.acquia.com/).  ## Errors  Some endpoints will return a 503 status when dependent services are unavailable:      application/json     {         \"error\": \"system\",         \"message\": \"This action is currently unavailable. Please try again later.\"     }  ## Authentication  All Acquia Cloud API calls require authentication to work properly.  Learn more: <a href='https://docs.acquia.com/acquia-cloud/develop/api/auth/' target='_blank'>https://docs.acquia.com/acquia-cloud/develop/api/auth/</a>  ### Example implementation  An example PHP script for making authenticated API requests can be found at <a href='https://docs.acquia.com/_downloads/api-v2-auth.php' target='_blank'>https://docs.acquia.com/_downloads/api-v2-auth.php</a>. This script uses the <a href='https://oauth2-client.thephpleague.com/' target='_blank'>League/oauth2-client</a> library, installed via Composer.
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Acquia\CloudApi\Model;

use \ArrayAccess;
use \Acquia\CloudApi\ObjectSerializer;

/**
 * User Class Doc Comment
 *
 * @category Class
 * @description The response for a user object.
 * @package  Acquia\CloudApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class User implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'User';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'uuid' => 'string',
        'name' => 'string',
        'first_name' => 'string',
        'last_name' => 'string',
        'last_login_at' => '\DateTime',
        'created_at' => '\DateTime',
        'mail' => 'string',
        'phone' => '\Acquia\CloudApi\Model\UserPhone',
        'job_title' => 'string',
        'job_function' => 'string',
        'company' => 'string',
        'country' => 'string',
        'state' => 'string',
        'timezone' => 'string',
        'picture_url' => 'string',
        'features' => 'string[]',
        'flags' => 'array<string,\Acquia\CloudApi\Model\UserFlagsValue>',
        'metadata' => '\Acquia\CloudApi\Model\UserMetadata',
        '_links' => '\Acquia\CloudApi\Model\Links'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'uuid' => 'uuid',
        'name' => null,
        'first_name' => null,
        'last_name' => null,
        'last_login_at' => 'date-time',
        'created_at' => 'date-time',
        'mail' => 'email',
        'phone' => null,
        'job_title' => null,
        'job_function' => null,
        'company' => null,
        'country' => null,
        'state' => null,
        'timezone' => null,
        'picture_url' => 'uri',
        'features' => null,
        'flags' => null,
        'metadata' => null,
        '_links' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'uuid' => false,
		'name' => false,
		'first_name' => false,
		'last_name' => false,
		'last_login_at' => false,
		'created_at' => false,
		'mail' => false,
		'phone' => false,
		'job_title' => false,
		'job_function' => false,
		'company' => false,
		'country' => false,
		'state' => false,
		'timezone' => false,
		'picture_url' => false,
		'features' => false,
		'flags' => false,
		'metadata' => false,
		'_links' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'uuid' => 'uuid',
        'name' => 'name',
        'first_name' => 'first_name',
        'last_name' => 'last_name',
        'last_login_at' => 'last_login_at',
        'created_at' => 'created_at',
        'mail' => 'mail',
        'phone' => 'phone',
        'job_title' => 'job_title',
        'job_function' => 'job_function',
        'company' => 'company',
        'country' => 'country',
        'state' => 'state',
        'timezone' => 'timezone',
        'picture_url' => 'picture_url',
        'features' => 'features',
        'flags' => 'flags',
        'metadata' => 'metadata',
        '_links' => '_links'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'uuid' => 'setUuid',
        'name' => 'setName',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'last_login_at' => 'setLastLoginAt',
        'created_at' => 'setCreatedAt',
        'mail' => 'setMail',
        'phone' => 'setPhone',
        'job_title' => 'setJobTitle',
        'job_function' => 'setJobFunction',
        'company' => 'setCompany',
        'country' => 'setCountry',
        'state' => 'setState',
        'timezone' => 'setTimezone',
        'picture_url' => 'setPictureUrl',
        'features' => 'setFeatures',
        'flags' => 'setFlags',
        'metadata' => 'setMetadata',
        '_links' => 'setLinks'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'uuid' => 'getUuid',
        'name' => 'getName',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'last_login_at' => 'getLastLoginAt',
        'created_at' => 'getCreatedAt',
        'mail' => 'getMail',
        'phone' => 'getPhone',
        'job_title' => 'getJobTitle',
        'job_function' => 'getJobFunction',
        'company' => 'getCompany',
        'country' => 'getCountry',
        'state' => 'getState',
        'timezone' => 'getTimezone',
        'picture_url' => 'getPictureUrl',
        'features' => 'getFeatures',
        'flags' => 'getFlags',
        'metadata' => 'getMetadata',
        '_links' => 'getLinks'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const JOB_FUNCTION_ = '--';
    public const JOB_FUNCTION_BUSINESS_EXECUTIVE = 'Business Executive';
    public const JOB_FUNCTION_IT_EXECUTIVE = 'IT Executive';
    public const JOB_FUNCTION_IT_ARCHITECT_OR_IT_OPERATIONS = 'IT Architect or IT Operations';
    public const JOB_FUNCTION_PRODUCT_OR_DIGITAL_MARKETING = 'Product or Digital Marketing';
    public const JOB_FUNCTION_WEBSITE_DESIGN_OR_DEVELOPMENT = 'Website Design or Development';
    public const COUNTRY_ = '--';
    public const COUNTRY_UNITED_STATES = 'United States';
    public const COUNTRY_AFGHANISTAN = 'Afghanistan';
    public const COUNTRY_ALBANIA = 'Albania';
    public const COUNTRY_ALGERIA = 'Algeria';
    public const COUNTRY_AMERICAN_SAMOA = 'American Samoa';
    public const COUNTRY_ANDORRA = 'Andorra';
    public const COUNTRY_ANGOLA = 'Angola';
    public const COUNTRY_ANGUILLA = 'Anguilla';
    public const COUNTRY_ANTIGUA_AND_BARBUDA = 'Antigua and Barbuda';
    public const COUNTRY_ARGENTINA = 'Argentina';
    public const COUNTRY_ARMENIA = 'Armenia';
    public const COUNTRY_ASCENSION_ISLAND = 'Ascension Island';
    public const COUNTRY_AUSTRALIA = 'Australia';
    public const COUNTRY_AUSTRIA = 'Austria';
    public const COUNTRY_AZERBAIJAN = 'Azerbaijan';
    public const COUNTRY_BAHAMAS = 'Bahamas';
    public const COUNTRY_BAHRAIN = 'Bahrain';
    public const COUNTRY_BANGLADESH = 'Bangladesh';
    public const COUNTRY_BARBADOS = 'Barbados';
    public const COUNTRY_BELARUS = 'Belarus';
    public const COUNTRY_BELGIUM = 'Belgium';
    public const COUNTRY_BELIZE = 'Belize';
    public const COUNTRY_BENIN = 'Benin';
    public const COUNTRY_BERMUDA = 'Bermuda';
    public const COUNTRY_BHUTAN = 'Bhutan';
    public const COUNTRY_BOLIVIA = 'Bolivia';
    public const COUNTRY_BOSNIA_AND_HERZEGOVINA = 'Bosnia and Herzegovina';
    public const COUNTRY_BOTSWANA = 'Botswana';
    public const COUNTRY_BRAZIL = 'Brazil';
    public const COUNTRY_BRITISH_INDIAN_OCEAN_TERRITORY = 'British Indian Ocean Territory';
    public const COUNTRY_BRUNEI_DARUSSALAM = 'Brunei Darussalam';
    public const COUNTRY_BULGARIA = 'Bulgaria';
    public const COUNTRY_BURKINA_FASO = 'Burkina Faso';
    public const COUNTRY_BURUNDI = 'Burundi';
    public const COUNTRY_CAMBODIA = 'Cambodia';
    public const COUNTRY_CAMEROON = 'Cameroon';
    public const COUNTRY_CANADA = 'Canada';
    public const COUNTRY_CAPE_VERDE = 'Cape Verde';
    public const COUNTRY_CAYMAN_ISLANDS = 'Cayman Islands';
    public const COUNTRY_CENTRAL_AFRICAN_REPUBLIC = 'Central African Republic';
    public const COUNTRY_CHAD = 'Chad';
    public const COUNTRY_CHILE = 'Chile';
    public const COUNTRY_CHINA = 'China';
    public const COUNTRY_COLOMBIA = 'Colombia';
    public const COUNTRY_COMOROS = 'Comoros';
    public const COUNTRY_CONGO = 'Congo';
    public const COUNTRY_COOK_ISLANDS = 'Cook Islands';
    public const COUNTRY_COSTA_RICA = 'Costa Rica';
    public const COUNTRY_COTE_D_IVOIRE = 'Cote D Ivoire';
    public const COUNTRY_CROATIA = 'Croatia';
    public const COUNTRY_CUBA = 'Cuba';
    public const COUNTRY_CYPRUS = 'Cyprus';
    public const COUNTRY_CZECH_REPUBLIC = 'Czech Republic';
    public const COUNTRY_DENMARK = 'Denmark';
    public const COUNTRY_DJIBOUTI = 'Djibouti';
    public const COUNTRY_DOMINICA = 'Dominica';
    public const COUNTRY_DOMINICAN_REPUBLIC = 'Dominican Republic';
    public const COUNTRY_ECUADOR = 'Ecuador';
    public const COUNTRY_EGYPT = 'Egypt';
    public const COUNTRY_EL_SALVADOR = 'El Salvador';
    public const COUNTRY_EQUATORIAL_GUINEA = 'Equatorial Guinea';
    public const COUNTRY_ERITREA = 'Eritrea';
    public const COUNTRY_ESTONIA = 'Estonia';
    public const COUNTRY_ETHIOPIA = 'Ethiopia';
    public const COUNTRY_FALKLAND_ISLANDS = 'Falkland Islands';
    public const COUNTRY_FAROE_ISLANDS = 'Faroe Islands';
    public const COUNTRY_FEDERATED_STATES_OF_MICRONESIA = 'Federated States of Micronesia';
    public const COUNTRY_FIJI = 'Fiji';
    public const COUNTRY_FINLAND = 'Finland';
    public const COUNTRY_FRANCE = 'France';
    public const COUNTRY_FRENCH_GUIANA = 'French Guiana';
    public const COUNTRY_FRENCH_POLYNESIA = 'French Polynesia';
    public const COUNTRY_GABON = 'Gabon';
    public const COUNTRY_GEORGIA = 'Georgia';
    public const COUNTRY_GERMANY = 'Germany';
    public const COUNTRY_GHANA = 'Ghana';
    public const COUNTRY_GREECE = 'Greece';
    public const COUNTRY_GREENLAND = 'Greenland';
    public const COUNTRY_GRENADA = 'Grenada';
    public const COUNTRY_GUADELOUPE = 'Guadeloupe';
    public const COUNTRY_GUATEMALA = 'Guatemala';
    public const COUNTRY_GUAM = 'Guam';
    public const COUNTRY_GUINEA = 'Guinea';
    public const COUNTRY_GUINEA_BISSAU = 'Guinea Bissau';
    public const COUNTRY_GUYANA = 'Guyana';
    public const COUNTRY_HAITI = 'Haiti';
    public const COUNTRY_HOLY_SEE__VATICAN_CITY = 'Holy See (Vatican City)';
    public const COUNTRY_HONDURAS = 'Honduras';
    public const COUNTRY_HONG_KONG = 'Hong Kong';
    public const COUNTRY_HUNGARY = 'Hungary';
    public const COUNTRY_ICELAND = 'Iceland';
    public const COUNTRY_INDIA = 'India';
    public const COUNTRY_INDONESIA = 'Indonesia';
    public const COUNTRY_IRAN = 'Iran';
    public const COUNTRY_IRELAND = 'Ireland';
    public const COUNTRY_ISLE_OF_MAN = 'Isle of Man';
    public const COUNTRY_ISRAEL = 'Israel';
    public const COUNTRY_ITALY = 'Italy';
    public const COUNTRY_JAMAICA = 'Jamaica';
    public const COUNTRY_JAPAN = 'Japan';
    public const COUNTRY_JORDAN = 'Jordan';
    public const COUNTRY_KAZAKHSTAN = 'Kazakhstan';
    public const COUNTRY_KENYA = 'Kenya';
    public const COUNTRY_KIRIBATI = 'Kiribati';
    public const COUNTRY_KOREA = 'Korea';
    public const COUNTRY_KUWAIT = 'Kuwait';
    public const COUNTRY_KYRGYZSTAN = 'Kyrgyzstan';
    public const COUNTRY_LAOS = 'Laos';
    public const COUNTRY_LATVIA = 'Latvia';
    public const COUNTRY_LEBANON = 'Lebanon';
    public const COUNTRY_LESOTHO = 'Lesotho';
    public const COUNTRY_LIBERIA = 'Liberia';
    public const COUNTRY_LIBYA = 'Libya';
    public const COUNTRY_LIECHTENSTEIN = 'Liechtenstein';
    public const COUNTRY_LITHUANIA = 'Lithuania';
    public const COUNTRY_LUXEMBOURG = 'Luxembourg';
    public const COUNTRY_MACAU = 'Macau';
    public const COUNTRY_MACEDONIA = 'Macedonia';
    public const COUNTRY_MADAGASCAR = 'Madagascar';
    public const COUNTRY_MALAWI = 'Malawi';
    public const COUNTRY_MALAYSIA = 'Malaysia';
    public const COUNTRY_MALDIVES = 'Maldives';
    public const COUNTRY_MALI = 'Mali';
    public const COUNTRY_MALTA = 'Malta';
    public const COUNTRY_MARSHALL_ISLANDS = 'Marshall Islands';
    public const COUNTRY_MARTINIQUE = 'Martinique';
    public const COUNTRY_MAURITIUS = 'Mauritius';
    public const COUNTRY_MAYOTTE = 'Mayotte';
    public const COUNTRY_MEXICO = 'Mexico';
    public const COUNTRY_MOLDOVA = 'Moldova';
    public const COUNTRY_MONACO = 'Monaco';
    public const COUNTRY_MONGOLIA = 'Mongolia';
    public const COUNTRY_MONTENEGRO = 'Montenegro';
    public const COUNTRY_MONTSERRAT = 'Montserrat';
    public const COUNTRY_MOROCCO = 'Morocco';
    public const COUNTRY_MOZAMBIQUE = 'Mozambique';
    public const COUNTRY_MYANMAR = 'Myanmar';
    public const COUNTRY_NAMIBIA = 'Namibia';
    public const COUNTRY_NAURU = 'Nauru';
    public const COUNTRY_NEPAL = 'Nepal';
    public const COUNTRY_NETHERLANDS = 'Netherlands';
    public const COUNTRY_NETHERLANDS_ANTILLES = 'Netherlands Antilles';
    public const COUNTRY_NEW_CALEDONIA = 'New Caledonia';
    public const COUNTRY_NEW_ZEALAND = 'New Zealand';
    public const COUNTRY_NICARAGUA = 'Nicaragua';
    public const COUNTRY_NIGER = 'Niger';
    public const COUNTRY_NIGERIA = 'Nigeria';
    public const COUNTRY_NIUE = 'Niue';
    public const COUNTRY_NORFOLK_ISLAND = 'Norfolk Island';
    public const COUNTRY_NORTHERN_MARIANA_ISLANDS = 'Northern Mariana Islands';
    public const COUNTRY_NORWAY = 'Norway';
    public const COUNTRY_OMAN = 'Oman';
    public const COUNTRY_PAKISTAN = 'Pakistan';
    public const COUNTRY_PALAU = 'Palau';
    public const COUNTRY_PALESTINE = 'Palestine';
    public const COUNTRY_PANAMA = 'Panama';
    public const COUNTRY_PAPUA_NEW_GUINEA = 'Papua New Guinea';
    public const COUNTRY_PARAGUAY = 'Paraguay';
    public const COUNTRY_PERU = 'Peru';
    public const COUNTRY_PHILIPPINES = 'Philippines';
    public const COUNTRY_PITCAIRN = 'Pitcairn';
    public const COUNTRY_POLAND = 'Poland';
    public const COUNTRY_PORTUGAL = 'Portugal';
    public const COUNTRY_PUERTO_RICO = 'Puerto Rico';
    public const COUNTRY_QATAR = 'Qatar';
    public const COUNTRY_REUNION = 'Reunion';
    public const COUNTRY_ROMANIA = 'Romania';
    public const COUNTRY_RUSSIAN_FEDERATION = 'Russian Federation';
    public const COUNTRY_RWANDA = 'Rwanda';
    public const COUNTRY_SAINT_VINCENT_AND_THE_GRENADINES = 'Saint Vincent and the Grenadines';
    public const COUNTRY_SAN_MARINO = 'San Marino';
    public const COUNTRY_SAO_TOME_AND_PRINCIPE = 'Sao Tome and Principe';
    public const COUNTRY_SAUDI_ARABIA = 'Saudi Arabia';
    public const COUNTRY_SENEGAL = 'Senegal';
    public const COUNTRY_SERBIA = 'Serbia';
    public const COUNTRY_SEYCHELLES = 'Seychelles';
    public const COUNTRY_SIERRA_LEONE = 'Sierra Leone';
    public const COUNTRY_SINGAPORE = 'Singapore';
    public const COUNTRY_SLOVAKIA = 'Slovakia';
    public const COUNTRY_SLOVENIA = 'Slovenia';
    public const COUNTRY_SOLOMON_ISLANDS = 'Solomon Islands';
    public const COUNTRY_SOMALIA = 'Somalia';
    public const COUNTRY_SOUTH_AFRICA = 'South Africa';
    public const COUNTRY_SOUTH_GEORGIA = 'South Georgia';
    public const COUNTRY_SPAIN = 'Spain';
    public const COUNTRY_SRI_LANKA = 'Sri Lanka';
    public const COUNTRY_ST__KITTS_AND_NEVIS = 'St. Kitts and Nevis';
    public const COUNTRY_ST__LUCIA = 'St. Lucia';
    public const COUNTRY_ST__PIERRE_AND_MIQUELON = 'St. Pierre and Miquelon';
    public const COUNTRY_SUDAN = 'Sudan';
    public const COUNTRY_SURINAME = 'Suriname';
    public const COUNTRY_SWAZILAND = 'Swaziland';
    public const COUNTRY_SWEDEN = 'Sweden';
    public const COUNTRY_SWITZERLAND = 'Switzerland';
    public const COUNTRY_SYRIAN_ARAB_REPUBLIC = 'Syrian Arab Republic';
    public const COUNTRY_TAIWAN = 'Taiwan';
    public const COUNTRY_TAJIKISTAN = 'Tajikistan';
    public const COUNTRY_TANZANIA = 'Tanzania';
    public const COUNTRY_THAILAND = 'Thailand';
    public const COUNTRY_THE_GAMBIA = 'The Gambia';
    public const COUNTRY_TOGO = 'Togo';
    public const COUNTRY_TOKELAU = 'Tokelau';
    public const COUNTRY_TONGA = 'Tonga';
    public const COUNTRY_TRINIDAD_AND_TOBAGO = 'Trinidad and Tobago';
    public const COUNTRY_TUNISIA = 'Tunisia';
    public const COUNTRY_TURKEY = 'Turkey';
    public const COUNTRY_TURKMENISTAN = 'Turkmenistan';
    public const COUNTRY_TURKS_AND_CAICOS_ISLANDS = 'Turks and Caicos Islands';
    public const COUNTRY_TUVALU = 'Tuvalu';
    public const COUNTRY_UGANDA = 'Uganda';
    public const COUNTRY_UKRAINE = 'Ukraine';
    public const COUNTRY_UNITED_ARAB_EMIRATES = 'United Arab Emirates';
    public const COUNTRY_UNITED_KINGDOM = 'United Kingdom';
    public const COUNTRY_URUGUAY = 'Uruguay';
    public const COUNTRY_UZBEKISTAN = 'Uzbekistan';
    public const COUNTRY_VANUATU = 'Vanuatu';
    public const COUNTRY_VENEZUELA = 'Venezuela';
    public const COUNTRY_VIET_NAM = 'Viet Nam';
    public const COUNTRY_VIRGIN_ISLANDS = 'Virgin Islands';
    public const COUNTRY_WESTERN_SAMOA = 'Western Samoa';
    public const COUNTRY_YEMEN = 'Yemen';
    public const COUNTRY_YUGOSLAVIA = 'Yugoslavia';
    public const COUNTRY_ZAIRE = 'Zaire';
    public const COUNTRY_ZAMBIA = 'Zambia';
    public const COUNTRY_ZIMBABWE = 'Zimbabwe';
    public const STATE_ALABAMA = 'Alabama';
    public const STATE_ALASKA = 'Alaska';
    public const STATE_AMERICAN_SAMOA = 'American Samoa';
    public const STATE_ARIZONA = 'Arizona';
    public const STATE_ARKANSAS = 'Arkansas';
    public const STATE_CALIFORNIA = 'California';
    public const STATE_COLORADO = 'Colorado';
    public const STATE_CONNECTICUT = 'Connecticut';
    public const STATE_DELAWARE = 'Delaware';
    public const STATE_DISTRICT_OF_COLUMBIA = 'District of Columbia';
    public const STATE_FLORIDA = 'Florida';
    public const STATE_GEORGIA = 'Georgia';
    public const STATE_HAWAII = 'Hawaii';
    public const STATE_IDAHO = 'Idaho';
    public const STATE_ILLINOIS = 'Illinois';
    public const STATE_INDIANA = 'Indiana';
    public const STATE_IOWA = 'Iowa';
    public const STATE_KANSAS = 'Kansas';
    public const STATE_KENTUCKY = 'Kentucky';
    public const STATE_LOUISIANA = 'Louisiana';
    public const STATE_MAINE = 'Maine';
    public const STATE_MARYLAND = 'Maryland';
    public const STATE_MASSACHUSETTS = 'Massachusetts';
    public const STATE_MICHIGAN = 'Michigan';
    public const STATE_MINNESOTA = 'Minnesota';
    public const STATE_MISSISSIPPI = 'Mississippi';
    public const STATE_MISSOURI = 'Missouri';
    public const STATE_MONTANA = 'Montana';
    public const STATE_NEBRASKA = 'Nebraska';
    public const STATE_NEVADA = 'Nevada';
    public const STATE_NEW_HAMPSHIRE = 'New Hampshire';
    public const STATE_NEW_JERSEY = 'New Jersey';
    public const STATE_NEW_MEXICO = 'New Mexico';
    public const STATE_NEW_YORK = 'New York';
    public const STATE_NORTH_CAROLINA = 'North Carolina';
    public const STATE_NORTH_DAKOTA = 'North Dakota';
    public const STATE_NORTHERN_MARIANA_ISLANDS = 'Northern Mariana Islands';
    public const STATE_OHIO = 'Ohio';
    public const STATE_OKLAHOMA = 'Oklahoma';
    public const STATE_OREGON = 'Oregon';
    public const STATE_PENNSYLVANIA = 'Pennsylvania';
    public const STATE_RHODE_ISLAND = 'Rhode Island';
    public const STATE_SOUTH_CAROLINA = 'South Carolina';
    public const STATE_SOUTH_DAKOTA = 'South Dakota';
    public const STATE_TENNESSEE = 'Tennessee';
    public const STATE_TEXAS = 'Texas';
    public const STATE_U_S__VIRGIN_ISLANDS = 'U.S. Virgin Islands';
    public const STATE_UTAH = 'Utah';
    public const STATE_VERMONT = 'Vermont';
    public const STATE_VIRGINIA = 'Virginia';
    public const STATE_WASHINGTON = 'Washington';
    public const STATE_WEST_VIRGINIA = 'West Virginia';
    public const STATE_WISCONSIN = 'Wisconsin';
    public const STATE_WYOMING = 'Wyoming';
    public const FEATURES_CI_PIPELINES = 'ci-pipelines';
    public const FEATURES_N3_DISABLED = 'n3-disabled';
    public const FEATURES_N3_HYBRID_MODE = 'n3-hybrid-mode';
    public const FEATURES_ON_DEMAND_ENVIRONMENTS = 'on-demand-environments';
    public const FEATURES_PHP7 = 'php7';
    public const FEATURES_PHP71 = 'php71';
    public const FEATURES_PLATFORM = 'platform';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getJobFunctionAllowableValues()
    {
        return [
            self::JOB_FUNCTION_,
            self::JOB_FUNCTION_BUSINESS_EXECUTIVE,
            self::JOB_FUNCTION_IT_EXECUTIVE,
            self::JOB_FUNCTION_IT_ARCHITECT_OR_IT_OPERATIONS,
            self::JOB_FUNCTION_PRODUCT_OR_DIGITAL_MARKETING,
            self::JOB_FUNCTION_WEBSITE_DESIGN_OR_DEVELOPMENT,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCountryAllowableValues()
    {
        return [
            self::COUNTRY_,
            self::COUNTRY_UNITED_STATES,
            self::COUNTRY_AFGHANISTAN,
            self::COUNTRY_ALBANIA,
            self::COUNTRY_ALGERIA,
            self::COUNTRY_AMERICAN_SAMOA,
            self::COUNTRY_ANDORRA,
            self::COUNTRY_ANGOLA,
            self::COUNTRY_ANGUILLA,
            self::COUNTRY_ANTIGUA_AND_BARBUDA,
            self::COUNTRY_ARGENTINA,
            self::COUNTRY_ARMENIA,
            self::COUNTRY_ASCENSION_ISLAND,
            self::COUNTRY_AUSTRALIA,
            self::COUNTRY_AUSTRIA,
            self::COUNTRY_AZERBAIJAN,
            self::COUNTRY_BAHAMAS,
            self::COUNTRY_BAHRAIN,
            self::COUNTRY_BANGLADESH,
            self::COUNTRY_BARBADOS,
            self::COUNTRY_BELARUS,
            self::COUNTRY_BELGIUM,
            self::COUNTRY_BELIZE,
            self::COUNTRY_BENIN,
            self::COUNTRY_BERMUDA,
            self::COUNTRY_BHUTAN,
            self::COUNTRY_BOLIVIA,
            self::COUNTRY_BOSNIA_AND_HERZEGOVINA,
            self::COUNTRY_BOTSWANA,
            self::COUNTRY_BRAZIL,
            self::COUNTRY_BRITISH_INDIAN_OCEAN_TERRITORY,
            self::COUNTRY_BRUNEI_DARUSSALAM,
            self::COUNTRY_BULGARIA,
            self::COUNTRY_BURKINA_FASO,
            self::COUNTRY_BURUNDI,
            self::COUNTRY_CAMBODIA,
            self::COUNTRY_CAMEROON,
            self::COUNTRY_CANADA,
            self::COUNTRY_CAPE_VERDE,
            self::COUNTRY_CAYMAN_ISLANDS,
            self::COUNTRY_CENTRAL_AFRICAN_REPUBLIC,
            self::COUNTRY_CHAD,
            self::COUNTRY_CHILE,
            self::COUNTRY_CHINA,
            self::COUNTRY_COLOMBIA,
            self::COUNTRY_COMOROS,
            self::COUNTRY_CONGO,
            self::COUNTRY_COOK_ISLANDS,
            self::COUNTRY_COSTA_RICA,
            self::COUNTRY_COTE_D_IVOIRE,
            self::COUNTRY_CROATIA,
            self::COUNTRY_CUBA,
            self::COUNTRY_CYPRUS,
            self::COUNTRY_CZECH_REPUBLIC,
            self::COUNTRY_DENMARK,
            self::COUNTRY_DJIBOUTI,
            self::COUNTRY_DOMINICA,
            self::COUNTRY_DOMINICAN_REPUBLIC,
            self::COUNTRY_ECUADOR,
            self::COUNTRY_EGYPT,
            self::COUNTRY_EL_SALVADOR,
            self::COUNTRY_EQUATORIAL_GUINEA,
            self::COUNTRY_ERITREA,
            self::COUNTRY_ESTONIA,
            self::COUNTRY_ETHIOPIA,
            self::COUNTRY_FALKLAND_ISLANDS,
            self::COUNTRY_FAROE_ISLANDS,
            self::COUNTRY_FEDERATED_STATES_OF_MICRONESIA,
            self::COUNTRY_FIJI,
            self::COUNTRY_FINLAND,
            self::COUNTRY_FRANCE,
            self::COUNTRY_FRENCH_GUIANA,
            self::COUNTRY_FRENCH_POLYNESIA,
            self::COUNTRY_GABON,
            self::COUNTRY_GEORGIA,
            self::COUNTRY_GERMANY,
            self::COUNTRY_GHANA,
            self::COUNTRY_GREECE,
            self::COUNTRY_GREENLAND,
            self::COUNTRY_GRENADA,
            self::COUNTRY_GUADELOUPE,
            self::COUNTRY_GUATEMALA,
            self::COUNTRY_GUAM,
            self::COUNTRY_GUINEA,
            self::COUNTRY_GUINEA_BISSAU,
            self::COUNTRY_GUYANA,
            self::COUNTRY_HAITI,
            self::COUNTRY_HOLY_SEE__VATICAN_CITY,
            self::COUNTRY_HONDURAS,
            self::COUNTRY_HONG_KONG,
            self::COUNTRY_HUNGARY,
            self::COUNTRY_ICELAND,
            self::COUNTRY_INDIA,
            self::COUNTRY_INDONESIA,
            self::COUNTRY_IRAN,
            self::COUNTRY_IRELAND,
            self::COUNTRY_ISLE_OF_MAN,
            self::COUNTRY_ISRAEL,
            self::COUNTRY_ITALY,
            self::COUNTRY_JAMAICA,
            self::COUNTRY_JAPAN,
            self::COUNTRY_JORDAN,
            self::COUNTRY_KAZAKHSTAN,
            self::COUNTRY_KENYA,
            self::COUNTRY_KIRIBATI,
            self::COUNTRY_KOREA,
            self::COUNTRY_KUWAIT,
            self::COUNTRY_KYRGYZSTAN,
            self::COUNTRY_LAOS,
            self::COUNTRY_LATVIA,
            self::COUNTRY_LEBANON,
            self::COUNTRY_LESOTHO,
            self::COUNTRY_LIBERIA,
            self::COUNTRY_LIBYA,
            self::COUNTRY_LIECHTENSTEIN,
            self::COUNTRY_LITHUANIA,
            self::COUNTRY_LUXEMBOURG,
            self::COUNTRY_MACAU,
            self::COUNTRY_MACEDONIA,
            self::COUNTRY_MADAGASCAR,
            self::COUNTRY_MALAWI,
            self::COUNTRY_MALAYSIA,
            self::COUNTRY_MALDIVES,
            self::COUNTRY_MALI,
            self::COUNTRY_MALTA,
            self::COUNTRY_MARSHALL_ISLANDS,
            self::COUNTRY_MARTINIQUE,
            self::COUNTRY_MAURITIUS,
            self::COUNTRY_MAYOTTE,
            self::COUNTRY_MEXICO,
            self::COUNTRY_MOLDOVA,
            self::COUNTRY_MONACO,
            self::COUNTRY_MONGOLIA,
            self::COUNTRY_MONTENEGRO,
            self::COUNTRY_MONTSERRAT,
            self::COUNTRY_MOROCCO,
            self::COUNTRY_MOZAMBIQUE,
            self::COUNTRY_MYANMAR,
            self::COUNTRY_NAMIBIA,
            self::COUNTRY_NAURU,
            self::COUNTRY_NEPAL,
            self::COUNTRY_NETHERLANDS,
            self::COUNTRY_NETHERLANDS_ANTILLES,
            self::COUNTRY_NEW_CALEDONIA,
            self::COUNTRY_NEW_ZEALAND,
            self::COUNTRY_NICARAGUA,
            self::COUNTRY_NIGER,
            self::COUNTRY_NIGERIA,
            self::COUNTRY_NIUE,
            self::COUNTRY_NORFOLK_ISLAND,
            self::COUNTRY_NORTHERN_MARIANA_ISLANDS,
            self::COUNTRY_NORWAY,
            self::COUNTRY_OMAN,
            self::COUNTRY_PAKISTAN,
            self::COUNTRY_PALAU,
            self::COUNTRY_PALESTINE,
            self::COUNTRY_PANAMA,
            self::COUNTRY_PAPUA_NEW_GUINEA,
            self::COUNTRY_PARAGUAY,
            self::COUNTRY_PERU,
            self::COUNTRY_PHILIPPINES,
            self::COUNTRY_PITCAIRN,
            self::COUNTRY_POLAND,
            self::COUNTRY_PORTUGAL,
            self::COUNTRY_PUERTO_RICO,
            self::COUNTRY_QATAR,
            self::COUNTRY_REUNION,
            self::COUNTRY_ROMANIA,
            self::COUNTRY_RUSSIAN_FEDERATION,
            self::COUNTRY_RWANDA,
            self::COUNTRY_SAINT_VINCENT_AND_THE_GRENADINES,
            self::COUNTRY_SAN_MARINO,
            self::COUNTRY_SAO_TOME_AND_PRINCIPE,
            self::COUNTRY_SAUDI_ARABIA,
            self::COUNTRY_SENEGAL,
            self::COUNTRY_SERBIA,
            self::COUNTRY_SEYCHELLES,
            self::COUNTRY_SIERRA_LEONE,
            self::COUNTRY_SINGAPORE,
            self::COUNTRY_SLOVAKIA,
            self::COUNTRY_SLOVENIA,
            self::COUNTRY_SOLOMON_ISLANDS,
            self::COUNTRY_SOMALIA,
            self::COUNTRY_SOUTH_AFRICA,
            self::COUNTRY_SOUTH_GEORGIA,
            self::COUNTRY_SPAIN,
            self::COUNTRY_SRI_LANKA,
            self::COUNTRY_ST__KITTS_AND_NEVIS,
            self::COUNTRY_ST__LUCIA,
            self::COUNTRY_ST__PIERRE_AND_MIQUELON,
            self::COUNTRY_SUDAN,
            self::COUNTRY_SURINAME,
            self::COUNTRY_SWAZILAND,
            self::COUNTRY_SWEDEN,
            self::COUNTRY_SWITZERLAND,
            self::COUNTRY_SYRIAN_ARAB_REPUBLIC,
            self::COUNTRY_TAIWAN,
            self::COUNTRY_TAJIKISTAN,
            self::COUNTRY_TANZANIA,
            self::COUNTRY_THAILAND,
            self::COUNTRY_THE_GAMBIA,
            self::COUNTRY_TOGO,
            self::COUNTRY_TOKELAU,
            self::COUNTRY_TONGA,
            self::COUNTRY_TRINIDAD_AND_TOBAGO,
            self::COUNTRY_TUNISIA,
            self::COUNTRY_TURKEY,
            self::COUNTRY_TURKMENISTAN,
            self::COUNTRY_TURKS_AND_CAICOS_ISLANDS,
            self::COUNTRY_TUVALU,
            self::COUNTRY_UGANDA,
            self::COUNTRY_UKRAINE,
            self::COUNTRY_UNITED_ARAB_EMIRATES,
            self::COUNTRY_UNITED_KINGDOM,
            self::COUNTRY_URUGUAY,
            self::COUNTRY_UZBEKISTAN,
            self::COUNTRY_VANUATU,
            self::COUNTRY_VENEZUELA,
            self::COUNTRY_VIET_NAM,
            self::COUNTRY_VIRGIN_ISLANDS,
            self::COUNTRY_WESTERN_SAMOA,
            self::COUNTRY_YEMEN,
            self::COUNTRY_YUGOSLAVIA,
            self::COUNTRY_ZAIRE,
            self::COUNTRY_ZAMBIA,
            self::COUNTRY_ZIMBABWE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStateAllowableValues()
    {
        return [
            self::STATE_ALABAMA,
            self::STATE_ALASKA,
            self::STATE_AMERICAN_SAMOA,
            self::STATE_ARIZONA,
            self::STATE_ARKANSAS,
            self::STATE_CALIFORNIA,
            self::STATE_COLORADO,
            self::STATE_CONNECTICUT,
            self::STATE_DELAWARE,
            self::STATE_DISTRICT_OF_COLUMBIA,
            self::STATE_FLORIDA,
            self::STATE_GEORGIA,
            self::STATE_HAWAII,
            self::STATE_IDAHO,
            self::STATE_ILLINOIS,
            self::STATE_INDIANA,
            self::STATE_IOWA,
            self::STATE_KANSAS,
            self::STATE_KENTUCKY,
            self::STATE_LOUISIANA,
            self::STATE_MAINE,
            self::STATE_MARYLAND,
            self::STATE_MASSACHUSETTS,
            self::STATE_MICHIGAN,
            self::STATE_MINNESOTA,
            self::STATE_MISSISSIPPI,
            self::STATE_MISSOURI,
            self::STATE_MONTANA,
            self::STATE_NEBRASKA,
            self::STATE_NEVADA,
            self::STATE_NEW_HAMPSHIRE,
            self::STATE_NEW_JERSEY,
            self::STATE_NEW_MEXICO,
            self::STATE_NEW_YORK,
            self::STATE_NORTH_CAROLINA,
            self::STATE_NORTH_DAKOTA,
            self::STATE_NORTHERN_MARIANA_ISLANDS,
            self::STATE_OHIO,
            self::STATE_OKLAHOMA,
            self::STATE_OREGON,
            self::STATE_PENNSYLVANIA,
            self::STATE_RHODE_ISLAND,
            self::STATE_SOUTH_CAROLINA,
            self::STATE_SOUTH_DAKOTA,
            self::STATE_TENNESSEE,
            self::STATE_TEXAS,
            self::STATE_U_S__VIRGIN_ISLANDS,
            self::STATE_UTAH,
            self::STATE_VERMONT,
            self::STATE_VIRGINIA,
            self::STATE_WASHINGTON,
            self::STATE_WEST_VIRGINIA,
            self::STATE_WISCONSIN,
            self::STATE_WYOMING,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFeaturesAllowableValues()
    {
        return [
            self::FEATURES_CI_PIPELINES,
            self::FEATURES_N3_DISABLED,
            self::FEATURES_N3_HYBRID_MODE,
            self::FEATURES_ON_DEMAND_ENVIRONMENTS,
            self::FEATURES_PHP7,
            self::FEATURES_PHP71,
            self::FEATURES_PLATFORM,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('uuid', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('first_name', $data ?? [], null);
        $this->setIfExists('last_name', $data ?? [], null);
        $this->setIfExists('last_login_at', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('mail', $data ?? [], null);
        $this->setIfExists('phone', $data ?? [], null);
        $this->setIfExists('job_title', $data ?? [], null);
        $this->setIfExists('job_function', $data ?? [], null);
        $this->setIfExists('company', $data ?? [], null);
        $this->setIfExists('country', $data ?? [], null);
        $this->setIfExists('state', $data ?? [], null);
        $this->setIfExists('timezone', $data ?? [], null);
        $this->setIfExists('picture_url', $data ?? [], null);
        $this->setIfExists('features', $data ?? [], null);
        $this->setIfExists('flags', $data ?? [], null);
        $this->setIfExists('metadata', $data ?? [], null);
        $this->setIfExists('_links', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['uuid'] === null) {
            $invalidProperties[] = "'uuid' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['first_name'] === null) {
            $invalidProperties[] = "'first_name' can't be null";
        }
        if ($this->container['last_name'] === null) {
            $invalidProperties[] = "'last_name' can't be null";
        }
        if ($this->container['last_login_at'] === null) {
            $invalidProperties[] = "'last_login_at' can't be null";
        }
        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        if ($this->container['mail'] === null) {
            $invalidProperties[] = "'mail' can't be null";
        }
        if ($this->container['phone'] === null) {
            $invalidProperties[] = "'phone' can't be null";
        }
        if ($this->container['job_title'] === null) {
            $invalidProperties[] = "'job_title' can't be null";
        }
        if ($this->container['job_function'] === null) {
            $invalidProperties[] = "'job_function' can't be null";
        }
        $allowedValues = $this->getJobFunctionAllowableValues();
        if (!is_null($this->container['job_function']) && !in_array($this->container['job_function'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'job_function', must be one of '%s'",
                $this->container['job_function'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['company'] === null) {
            $invalidProperties[] = "'company' can't be null";
        }
        if ($this->container['country'] === null) {
            $invalidProperties[] = "'country' can't be null";
        }
        $allowedValues = $this->getCountryAllowableValues();
        if (!is_null($this->container['country']) && !in_array($this->container['country'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'country', must be one of '%s'",
                $this->container['country'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($this->container['state']) && !in_array($this->container['state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'state', must be one of '%s'",
                $this->container['state'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['timezone'] === null) {
            $invalidProperties[] = "'timezone' can't be null";
        }
        if ($this->container['picture_url'] === null) {
            $invalidProperties[] = "'picture_url' can't be null";
        }
        if ($this->container['features'] === null) {
            $invalidProperties[] = "'features' can't be null";
        }
        if ($this->container['flags'] === null) {
            $invalidProperties[] = "'flags' can't be null";
        }
        if ($this->container['metadata'] === null) {
            $invalidProperties[] = "'metadata' can't be null";
        }
        if ($this->container['_links'] === null) {
            $invalidProperties[] = "'_links' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The internal database ID (uid) of the user.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets uuid
     *
     * @return string
     */
    public function getUuid()
    {
        return $this->container['uuid'];
    }

    /**
     * Sets uuid
     *
     * @param string $uuid The UUID for the user.
     *
     * @return self
     */
    public function setUuid($uuid)
    {
        if (is_null($uuid)) {
            throw new \InvalidArgumentException('non-nullable uuid cannot be null');
        }
        $this->container['uuid'] = $uuid;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The user name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string $first_name The first name of the user.
     *
     * @return self
     */
    public function setFirstName($first_name)
    {
        if (is_null($first_name)) {
            throw new \InvalidArgumentException('non-nullable first_name cannot be null');
        }
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string $last_name The last name of the user.
     *
     * @return self
     */
    public function setLastName($last_name)
    {
        if (is_null($last_name)) {
            throw new \InvalidArgumentException('non-nullable last_name cannot be null');
        }
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets last_login_at
     *
     * @return \DateTime
     */
    public function getLastLoginAt()
    {
        return $this->container['last_login_at'];
    }

    /**
     * Sets last_login_at
     *
     * @param \DateTime $last_login_at The date/time of the last login for the user.
     *
     * @return self
     */
    public function setLastLoginAt($last_login_at)
    {
        if (is_null($last_login_at)) {
            throw new \InvalidArgumentException('non-nullable last_login_at cannot be null');
        }
        $this->container['last_login_at'] = $last_login_at;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at The date/time when the user was created.
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets mail
     *
     * @return string
     */
    public function getMail()
    {
        return $this->container['mail'];
    }

    /**
     * Sets mail
     *
     * @param string $mail The e-mail address of the user.
     *
     * @return self
     */
    public function setMail($mail)
    {
        if (is_null($mail)) {
            throw new \InvalidArgumentException('non-nullable mail cannot be null');
        }
        $this->container['mail'] = $mail;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return \Acquia\CloudApi\Model\UserPhone
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param \Acquia\CloudApi\Model\UserPhone $phone phone
     *
     * @return self
     */
    public function setPhone($phone)
    {
        if (is_null($phone)) {
            throw new \InvalidArgumentException('non-nullable phone cannot be null');
        }
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets job_title
     *
     * @return string
     */
    public function getJobTitle()
    {
        return $this->container['job_title'];
    }

    /**
     * Sets job_title
     *
     * @param string $job_title The job title of the user.
     *
     * @return self
     */
    public function setJobTitle($job_title)
    {
        if (is_null($job_title)) {
            throw new \InvalidArgumentException('non-nullable job_title cannot be null');
        }
        $this->container['job_title'] = $job_title;

        return $this;
    }

    /**
     * Gets job_function
     *
     * @return string
     */
    public function getJobFunction()
    {
        return $this->container['job_function'];
    }

    /**
     * Sets job_function
     *
     * @param string $job_function The job function of the user.
     *
     * @return self
     */
    public function setJobFunction($job_function)
    {
        if (is_null($job_function)) {
            throw new \InvalidArgumentException('non-nullable job_function cannot be null');
        }
        $allowedValues = $this->getJobFunctionAllowableValues();
        if (!in_array($job_function, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'job_function', must be one of '%s'",
                    $job_function,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['job_function'] = $job_function;

        return $this;
    }

    /**
     * Gets company
     *
     * @return string
     */
    public function getCompany()
    {
        return $this->container['company'];
    }

    /**
     * Sets company
     *
     * @param string $company The company of the user.
     *
     * @return self
     */
    public function setCompany($company)
    {
        if (is_null($company)) {
            throw new \InvalidArgumentException('non-nullable company cannot be null');
        }
        $this->container['company'] = $company;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string $country The country of the user.
     *
     * @return self
     */
    public function setCountry($country)
    {
        if (is_null($country)) {
            throw new \InvalidArgumentException('non-nullable country cannot be null');
        }
        $allowedValues = $this->getCountryAllowableValues();
        if (!in_array($country, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'country', must be one of '%s'",
                    $country,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string|null $state The state of the user, if in the United States.
     *
     * @return self
     */
    public function setState($state)
    {
        if (is_null($state)) {
            throw new \InvalidArgumentException('non-nullable state cannot be null');
        }
        $allowedValues = $this->getStateAllowableValues();
        if (!in_array($state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'state', must be one of '%s'",
                    $state,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets timezone
     *
     * @return string
     */
    public function getTimezone()
    {
        return $this->container['timezone'];
    }

    /**
     * Sets timezone
     *
     * @param string $timezone The timezone of the user.
     *
     * @return self
     */
    public function setTimezone($timezone)
    {
        if (is_null($timezone)) {
            throw new \InvalidArgumentException('non-nullable timezone cannot be null');
        }
        $this->container['timezone'] = $timezone;

        return $this;
    }

    /**
     * Gets picture_url
     *
     * @return string
     */
    public function getPictureUrl()
    {
        return $this->container['picture_url'];
    }

    /**
     * Sets picture_url
     *
     * @param string $picture_url The user's picture url.
     *
     * @return self
     */
    public function setPictureUrl($picture_url)
    {
        if (is_null($picture_url)) {
            throw new \InvalidArgumentException('non-nullable picture_url cannot be null');
        }
        $this->container['picture_url'] = $picture_url;

        return $this;
    }

    /**
     * Gets features
     *
     * @return string[]
     */
    public function getFeatures()
    {
        return $this->container['features'];
    }

    /**
     * Sets features
     *
     * @param string[] $features The various feature flags for the user.
     *
     * @return self
     */
    public function setFeatures($features)
    {
        if (is_null($features)) {
            throw new \InvalidArgumentException('non-nullable features cannot be null');
        }
        $allowedValues = $this->getFeaturesAllowableValues();
        if (array_diff($features, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'features', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['features'] = $features;

        return $this;
    }

    /**
     * Gets flags
     *
     * @return array<string,\Acquia\CloudApi\Model\UserFlagsValue>
     */
    public function getFlags()
    {
        return $this->container['flags'];
    }

    /**
     * Sets flags
     *
     * @param array<string,\Acquia\CloudApi\Model\UserFlagsValue> $flags The various flags for the user.
     *
     * @return self
     */
    public function setFlags($flags)
    {
        if (is_null($flags)) {
            throw new \InvalidArgumentException('non-nullable flags cannot be null');
        }
        $this->container['flags'] = $flags;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return \Acquia\CloudApi\Model\UserMetadata
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param \Acquia\CloudApi\Model\UserMetadata $metadata metadata
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        if (is_null($metadata)) {
            throw new \InvalidArgumentException('non-nullable metadata cannot be null');
        }
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets _links
     *
     * @return \Acquia\CloudApi\Model\Links
     */
    public function getLinks()
    {
        return $this->container['_links'];
    }

    /**
     * Sets _links
     *
     * @param \Acquia\CloudApi\Model\Links $_links _links
     *
     * @return self
     */
    public function setLinks($_links)
    {
        if (is_null($_links)) {
            throw new \InvalidArgumentException('non-nullable _links cannot be null');
        }
        $this->container['_links'] = $_links;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


