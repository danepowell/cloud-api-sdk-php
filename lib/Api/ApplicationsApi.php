<?php
/**
 * ApplicationsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Acquia\CloudApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Acquia Cloud API Documentation
 *
 * Acquia Cloud API  # Compatibility  ## Stability  The response for all resource endpoints includes an `X-CloudAPI-Stability` header that indicates what changes, if any, Acquia will make to the resource and how changes will be communicated.  There are three levels of stability:  * `prototype`: A prototype resource is experimental and major changes are likely. A prototype resource may not reach production.     * Compatible and emergency changes may be made with no advance notice     * Disruptive changes may be made with one week notice     * Deprecated resources will remain available for at least one month after deprecation * `development`: A resource that is unlikely to change, but is still being worked on, will be marked as in development. These resources are very likely to reach production.     * Compatible and emergency changes may be made with no advance notice     * Disruptive changes may be made with one month notice     * Deprecated resources will remain available for at least six months after deprecation * `production`: A production resource will not introduce breaking changes within a version, and any breaking changes between versions will be communicated ahead of time.  ## Deprecation  Over time, endpoints may become obsolete and will be removed in the future. These endpoints will be marked with an `X-CloudAPI-Deprecated` header indicating the version in which they were deprecated and the reason for the deprecation. Deprecated endpoints may be removed in the next version of the resource.  ## Versioning  All resource endpoints are versioned within the API. Endpoints that have reached production will not introduce breaking changes between versions. Non-production endpoints will not version for changes.  A specific version of an endpoint can be requested via the `Accept` header:      Accept: application/json, version=2  If the version is not specified, the latest version of the endpoint will be used.  Starting with version 3, we will support the current version of an endpoint and the previous version. Version 1 of the API is [provided elsewhere](https://cloudapi.acquia.com/).  ## Errors  Some endpoints will return a 503 status when dependent services are unavailable:      application/json     {         \"error\": \"system\",         \"message\": \"This action is currently unavailable. Please try again later.\"     }  ## Authentication  All Acquia Cloud API calls require authentication to work properly.  Learn more: <a href='https://docs.acquia.com/acquia-cloud/develop/api/auth/' target='_blank'>https://docs.acquia.com/acquia-cloud/develop/api/auth/</a>  ### Example implementation  An example PHP script for making authenticated API requests can be found at <a href='https://docs.acquia.com/_downloads/api-v2-auth.php' target='_blank'>https://docs.acquia.com/_downloads/api-v2-auth.php</a>. This script uses the <a href='https://oauth2-client.thephpleague.com/' target='_blank'>League/oauth2-client</a> library, installed via Composer.
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Acquia\CloudApi\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Acquia\CloudApi\ApiException;
use Acquia\CloudApi\Configuration;
use Acquia\CloudApi\HeaderSelector;
use Acquia\CloudApi\ObjectSerializer;

/**
 * ApplicationsApi Class Doc Comment
 *
 * @category Class
 * @package  Acquia\CloudApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ApplicationsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'deleteApplicationSearchConfigurationSet' => [
            'application/json',
        ],
        'deleteApplicationTags' => [
            'application/json',
        ],
        'getApplicationByUuid' => [
            'application/json',
        ],
        'getApplicationDatabases' => [
            'application/json',
        ],
        'getApplicationEmailDomains' => [
            'application/json',
        ],
        'getApplicationEnvironments' => [
            'application/json',
        ],
        'getApplicationFeatures' => [
            'application/json',
        ],
        'getApplicationHostingSettings' => [
            'application/json',
        ],
        'getApplicationIdes' => [
            'application/json',
        ],
        'getApplicationLegacyProductKeysSettings' => [
            'application/json',
        ],
        'getApplicationMessages' => [
            'application/json',
        ],
        'getApplicationNotificationByUuid' => [
            'application/json',
        ],
        'getApplicationNotifications' => [
            'application/json',
        ],
        'getApplicationPermissions' => [
            'application/json',
        ],
        'getApplicationRemoteAdministrationSettings' => [
            'application/json',
        ],
        'getApplicationSearchConfigurationSet' => [
            'application/json',
        ],
        'getApplicationSearchConfigurationSets' => [
            'application/json',
        ],
        'getApplicationSearchList' => [
            'application/json',
        ],
        'getApplicationSecuritySettings' => [
            'application/json',
        ],
        'getApplicationSettings' => [
            'application/json',
        ],
        'getApplicationTags' => [
            'application/json',
        ],
        'getApplicationTasks' => [
            'application/json',
        ],
        'getApplicationTeams' => [
            'application/json',
        ],
        'getApplications' => [
            'application/json',
        ],
        'getApplicationsUsageData' => [
            'application/json',
        ],
        'getApplicationsUsageDataByEnvironment' => [
            'application/json',
        ],
        'getApplicationsUsageLinks' => [
            'application/json',
        ],
        'getApplicationsUsageMetricData' => [
            'application/json',
        ],
        'getApplicationsUsageViewsDataByEnvironment' => [
            'application/json',
        ],
        'getApplicationsUsageVisitsDataByEnvironment' => [
            'application/json',
        ],
        'getArtifactByApplicationUuidAndId' => [
            'application/json',
        ],
        'getArtifactsByApplicationUuid' => [
            'application/json',
        ],
        'getCodeByApplicationUuid' => [
            'application/json',
        ],
        'postApplicationAssociateEmailDomain' => [
            'application/json',
        ],
        'postApplicationDatabaseCreate' => [
            'application/json',
            'application/x-www-form-urlencoded',
        ],
        'postApplicationDatabaseDelete' => [
            'application/json',
        ],
        'postApplicationDatabaseErase' => [
            'application/json',
        ],
        'postApplicationDisassociateEmailDomain' => [
            'application/json',
        ],
        'postApplicationEnvironments' => [
            'application/json',
            'application/x-www-form-urlencoded',
        ],
        'postApplicationSearchConfigurationSets' => [
            'multipart/form-data',
        ],
        'postApplicationsIde' => [
            'application/json',
            'application/x-www-form-urlencoded',
        ],
        'postApplicationsTags' => [
            'application/json',
            'application/x-www-form-urlencoded',
        ],
        'putApplicationByUuid' => [
            'application/json',
            'application/x-www-form-urlencoded',
        ],
        'putApplicationRemoteAdministrationSettings' => [
            'application/json',
            'application/x-www-form-urlencoded',
        ],
        'putApplicationSecuritySettings' => [
            'application/json',
            'application/x-www-form-urlencoded',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation deleteApplicationSearchConfigurationSet
     *
     * Removes and deletes a specific search configuration set from an application.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $configuration_set_id An ID that uniquely identifies a configuration set. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteApplicationSearchConfigurationSet'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error
     */
    public function deleteApplicationSearchConfigurationSet($application_uuid, $configuration_set_id, string $contentType = self::contentTypes['deleteApplicationSearchConfigurationSet'][0])
    {
        list($response) = $this->deleteApplicationSearchConfigurationSetWithHttpInfo($application_uuid, $configuration_set_id, $contentType);
        return $response;
    }

    /**
     * Operation deleteApplicationSearchConfigurationSetWithHttpInfo
     *
     * Removes and deletes a specific search configuration set from an application.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $configuration_set_id An ID that uniquely identifies a configuration set. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteApplicationSearchConfigurationSet'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteApplicationSearchConfigurationSetWithHttpInfo($application_uuid, $configuration_set_id, string $contentType = self::contentTypes['deleteApplicationSearchConfigurationSet'][0])
    {
        $request = $this->deleteApplicationSearchConfigurationSetRequest($application_uuid, $configuration_set_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Acquia\CloudApi\Model\MessageWithLinks' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\MessageWithLinks' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\MessageWithLinks', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\MessageWithLinks',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteApplicationSearchConfigurationSetAsync
     *
     * Removes and deletes a specific search configuration set from an application.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $configuration_set_id An ID that uniquely identifies a configuration set. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteApplicationSearchConfigurationSet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteApplicationSearchConfigurationSetAsync($application_uuid, $configuration_set_id, string $contentType = self::contentTypes['deleteApplicationSearchConfigurationSet'][0])
    {
        return $this->deleteApplicationSearchConfigurationSetAsyncWithHttpInfo($application_uuid, $configuration_set_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteApplicationSearchConfigurationSetAsyncWithHttpInfo
     *
     * Removes and deletes a specific search configuration set from an application.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $configuration_set_id An ID that uniquely identifies a configuration set. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteApplicationSearchConfigurationSet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteApplicationSearchConfigurationSetAsyncWithHttpInfo($application_uuid, $configuration_set_id, string $contentType = self::contentTypes['deleteApplicationSearchConfigurationSet'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
        $request = $this->deleteApplicationSearchConfigurationSetRequest($application_uuid, $configuration_set_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteApplicationSearchConfigurationSet'
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $configuration_set_id An ID that uniquely identifies a configuration set. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteApplicationSearchConfigurationSet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteApplicationSearchConfigurationSetRequest($application_uuid, $configuration_set_id, string $contentType = self::contentTypes['deleteApplicationSearchConfigurationSet'][0])
    {

        // verify the required parameter 'application_uuid' is set
        if ($application_uuid === null || (is_array($application_uuid) && count($application_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $application_uuid when calling deleteApplicationSearchConfigurationSet'
            );
        }

        // verify the required parameter 'configuration_set_id' is set
        if ($configuration_set_id === null || (is_array($configuration_set_id) && count($configuration_set_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $configuration_set_id when calling deleteApplicationSearchConfigurationSet'
            );
        }


        $resourcePath = '/applications/{applicationUuid}/search/config-sets/{configurationSetId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($application_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'applicationUuid' . '}',
                ObjectSerializer::toPathValue($application_uuid),
                $resourcePath
            );
        }
        // path params
        if ($configuration_set_id !== null) {
            $resourcePath = str_replace(
                '{' . 'configurationSetId' . '}',
                ObjectSerializer::toPathValue($configuration_set_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteApplicationTags
     *
     * Deletes an application tag.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $tag_name The name of the application tag. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteApplicationTags'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\Error
     */
    public function deleteApplicationTags($application_uuid, $tag_name, string $contentType = self::contentTypes['deleteApplicationTags'][0])
    {
        list($response) = $this->deleteApplicationTagsWithHttpInfo($application_uuid, $tag_name, $contentType);
        return $response;
    }

    /**
     * Operation deleteApplicationTagsWithHttpInfo
     *
     * Deletes an application tag.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $tag_name The name of the application tag. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteApplicationTags'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteApplicationTagsWithHttpInfo($application_uuid, $tag_name, string $contentType = self::contentTypes['deleteApplicationTags'][0])
    {
        $request = $this->deleteApplicationTagsRequest($application_uuid, $tag_name, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Acquia\CloudApi\Model\MessageWithLinks' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\MessageWithLinks' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\MessageWithLinks', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\MessageWithLinks',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteApplicationTagsAsync
     *
     * Deletes an application tag.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $tag_name The name of the application tag. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteApplicationTags'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteApplicationTagsAsync($application_uuid, $tag_name, string $contentType = self::contentTypes['deleteApplicationTags'][0])
    {
        return $this->deleteApplicationTagsAsyncWithHttpInfo($application_uuid, $tag_name, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteApplicationTagsAsyncWithHttpInfo
     *
     * Deletes an application tag.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $tag_name The name of the application tag. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteApplicationTags'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteApplicationTagsAsyncWithHttpInfo($application_uuid, $tag_name, string $contentType = self::contentTypes['deleteApplicationTags'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
        $request = $this->deleteApplicationTagsRequest($application_uuid, $tag_name, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteApplicationTags'
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $tag_name The name of the application tag. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteApplicationTags'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteApplicationTagsRequest($application_uuid, $tag_name, string $contentType = self::contentTypes['deleteApplicationTags'][0])
    {

        // verify the required parameter 'application_uuid' is set
        if ($application_uuid === null || (is_array($application_uuid) && count($application_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $application_uuid when calling deleteApplicationTags'
            );
        }

        // verify the required parameter 'tag_name' is set
        if ($tag_name === null || (is_array($tag_name) && count($tag_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tag_name when calling deleteApplicationTags'
            );
        }


        $resourcePath = '/applications/{applicationUuid}/tags/{tagName}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($application_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'applicationUuid' . '}',
                ObjectSerializer::toPathValue($application_uuid),
                $resourcePath
            );
        }
        // path params
        if ($tag_name !== null) {
            $resourcePath = str_replace(
                '{' . 'tagName' . '}',
                ObjectSerializer::toPathValue($tag_name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApplicationByUuid
     *
     * Return details about a specific application.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationByUuid'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\Application|\Acquia\CloudApi\Model\Error
     */
    public function getApplicationByUuid($application_uuid, string $contentType = self::contentTypes['getApplicationByUuid'][0])
    {
        list($response) = $this->getApplicationByUuidWithHttpInfo($application_uuid, $contentType);
        return $response;
    }

    /**
     * Operation getApplicationByUuidWithHttpInfo
     *
     * Return details about a specific application.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationByUuid'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\Application|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApplicationByUuidWithHttpInfo($application_uuid, string $contentType = self::contentTypes['getApplicationByUuid'][0])
    {
        $request = $this->getApplicationByUuidRequest($application_uuid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Acquia\CloudApi\Model\Application' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Application' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Application', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\Application';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Application',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApplicationByUuidAsync
     *
     * Return details about a specific application.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationByUuid'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApplicationByUuidAsync($application_uuid, string $contentType = self::contentTypes['getApplicationByUuid'][0])
    {
        return $this->getApplicationByUuidAsyncWithHttpInfo($application_uuid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApplicationByUuidAsyncWithHttpInfo
     *
     * Return details about a specific application.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationByUuid'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApplicationByUuidAsyncWithHttpInfo($application_uuid, string $contentType = self::contentTypes['getApplicationByUuid'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\Application';
        $request = $this->getApplicationByUuidRequest($application_uuid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApplicationByUuid'
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationByUuid'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApplicationByUuidRequest($application_uuid, string $contentType = self::contentTypes['getApplicationByUuid'][0])
    {

        // verify the required parameter 'application_uuid' is set
        if ($application_uuid === null || (is_array($application_uuid) && count($application_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $application_uuid when calling getApplicationByUuid'
            );
        }


        $resourcePath = '/applications/{applicationUuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($application_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'applicationUuid' . '}',
                ObjectSerializer::toPathValue($application_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApplicationDatabases
     *
     * Returns a list database names for the application.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $sort A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable. (optional)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;) (optional)
     * @param  int $limit The maximum number of items to return. (optional)
     * @param  int $offset An integer to signify the offset to paginate from. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationDatabases'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\ApplicationDatabases|\Acquia\CloudApi\Model\Error
     */
    public function getApplicationDatabases($application_uuid, $sort = null, $filter = null, $limit = null, $offset = null, string $contentType = self::contentTypes['getApplicationDatabases'][0])
    {
        list($response) = $this->getApplicationDatabasesWithHttpInfo($application_uuid, $sort, $filter, $limit, $offset, $contentType);
        return $response;
    }

    /**
     * Operation getApplicationDatabasesWithHttpInfo
     *
     * Returns a list database names for the application.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $sort A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable. (optional)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;) (optional)
     * @param  int $limit The maximum number of items to return. (optional)
     * @param  int $offset An integer to signify the offset to paginate from. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationDatabases'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\ApplicationDatabases|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApplicationDatabasesWithHttpInfo($application_uuid, $sort = null, $filter = null, $limit = null, $offset = null, string $contentType = self::contentTypes['getApplicationDatabases'][0])
    {
        $request = $this->getApplicationDatabasesRequest($application_uuid, $sort, $filter, $limit, $offset, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Acquia\CloudApi\Model\ApplicationDatabases' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\ApplicationDatabases' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\ApplicationDatabases', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\ApplicationDatabases';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\ApplicationDatabases',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApplicationDatabasesAsync
     *
     * Returns a list database names for the application.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $sort A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable. (optional)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;) (optional)
     * @param  int $limit The maximum number of items to return. (optional)
     * @param  int $offset An integer to signify the offset to paginate from. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationDatabases'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApplicationDatabasesAsync($application_uuid, $sort = null, $filter = null, $limit = null, $offset = null, string $contentType = self::contentTypes['getApplicationDatabases'][0])
    {
        return $this->getApplicationDatabasesAsyncWithHttpInfo($application_uuid, $sort, $filter, $limit, $offset, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApplicationDatabasesAsyncWithHttpInfo
     *
     * Returns a list database names for the application.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $sort A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable. (optional)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;) (optional)
     * @param  int $limit The maximum number of items to return. (optional)
     * @param  int $offset An integer to signify the offset to paginate from. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationDatabases'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApplicationDatabasesAsyncWithHttpInfo($application_uuid, $sort = null, $filter = null, $limit = null, $offset = null, string $contentType = self::contentTypes['getApplicationDatabases'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\ApplicationDatabases';
        $request = $this->getApplicationDatabasesRequest($application_uuid, $sort, $filter, $limit, $offset, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApplicationDatabases'
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $sort A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable. (optional)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;) (optional)
     * @param  int $limit The maximum number of items to return. (optional)
     * @param  int $offset An integer to signify the offset to paginate from. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationDatabases'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApplicationDatabasesRequest($application_uuid, $sort = null, $filter = null, $limit = null, $offset = null, string $contentType = self::contentTypes['getApplicationDatabases'][0])
    {

        // verify the required parameter 'application_uuid' is set
        if ($application_uuid === null || (is_array($application_uuid) && count($application_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $application_uuid when calling getApplicationDatabases'
            );
        }

        
        



        $resourcePath = '/applications/{applicationUuid}/databases';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            'filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($application_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'applicationUuid' . '}',
                ObjectSerializer::toPathValue($application_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApplicationEmailDomains
     *
     * Returns a list of email domains associated with the application.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $sort A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable. (optional)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;) (optional)
     * @param  int $limit The maximum number of items to return. (optional)
     * @param  int $offset An integer to signify the offset to paginate from. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationEmailDomains'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\EmailDomains|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error
     */
    public function getApplicationEmailDomains($application_uuid, $sort = null, $filter = null, $limit = null, $offset = null, string $contentType = self::contentTypes['getApplicationEmailDomains'][0])
    {
        list($response) = $this->getApplicationEmailDomainsWithHttpInfo($application_uuid, $sort, $filter, $limit, $offset, $contentType);
        return $response;
    }

    /**
     * Operation getApplicationEmailDomainsWithHttpInfo
     *
     * Returns a list of email domains associated with the application.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $sort A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable. (optional)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;) (optional)
     * @param  int $limit The maximum number of items to return. (optional)
     * @param  int $offset An integer to signify the offset to paginate from. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationEmailDomains'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\EmailDomains|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApplicationEmailDomainsWithHttpInfo($application_uuid, $sort = null, $filter = null, $limit = null, $offset = null, string $contentType = self::contentTypes['getApplicationEmailDomains'][0])
    {
        $request = $this->getApplicationEmailDomainsRequest($application_uuid, $sort, $filter, $limit, $offset, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Acquia\CloudApi\Model\EmailDomains' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\EmailDomains' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\EmailDomains', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\EmailDomains';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\EmailDomains',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApplicationEmailDomainsAsync
     *
     * Returns a list of email domains associated with the application.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $sort A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable. (optional)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;) (optional)
     * @param  int $limit The maximum number of items to return. (optional)
     * @param  int $offset An integer to signify the offset to paginate from. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationEmailDomains'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApplicationEmailDomainsAsync($application_uuid, $sort = null, $filter = null, $limit = null, $offset = null, string $contentType = self::contentTypes['getApplicationEmailDomains'][0])
    {
        return $this->getApplicationEmailDomainsAsyncWithHttpInfo($application_uuid, $sort, $filter, $limit, $offset, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApplicationEmailDomainsAsyncWithHttpInfo
     *
     * Returns a list of email domains associated with the application.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $sort A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable. (optional)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;) (optional)
     * @param  int $limit The maximum number of items to return. (optional)
     * @param  int $offset An integer to signify the offset to paginate from. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationEmailDomains'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApplicationEmailDomainsAsyncWithHttpInfo($application_uuid, $sort = null, $filter = null, $limit = null, $offset = null, string $contentType = self::contentTypes['getApplicationEmailDomains'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\EmailDomains';
        $request = $this->getApplicationEmailDomainsRequest($application_uuid, $sort, $filter, $limit, $offset, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApplicationEmailDomains'
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $sort A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable. (optional)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;) (optional)
     * @param  int $limit The maximum number of items to return. (optional)
     * @param  int $offset An integer to signify the offset to paginate from. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationEmailDomains'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApplicationEmailDomainsRequest($application_uuid, $sort = null, $filter = null, $limit = null, $offset = null, string $contentType = self::contentTypes['getApplicationEmailDomains'][0])
    {

        // verify the required parameter 'application_uuid' is set
        if ($application_uuid === null || (is_array($application_uuid) && count($application_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $application_uuid when calling getApplicationEmailDomains'
            );
        }

        
        



        $resourcePath = '/applications/{applicationUuid}/email/domains';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            'filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($application_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'applicationUuid' . '}',
                ObjectSerializer::toPathValue($application_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApplicationEnvironments
     *
     * Returns a list of environments within this application by its UUID.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $sort A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable. (optional)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;) (optional)
     * @param  int $limit The maximum number of items to return. (optional)
     * @param  int $offset An integer to signify the offset to paginate from. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationEnvironments'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\Environments|\Acquia\CloudApi\Model\Error
     */
    public function getApplicationEnvironments($application_uuid, $sort = null, $filter = null, $limit = null, $offset = null, string $contentType = self::contentTypes['getApplicationEnvironments'][0])
    {
        list($response) = $this->getApplicationEnvironmentsWithHttpInfo($application_uuid, $sort, $filter, $limit, $offset, $contentType);
        return $response;
    }

    /**
     * Operation getApplicationEnvironmentsWithHttpInfo
     *
     * Returns a list of environments within this application by its UUID.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $sort A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable. (optional)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;) (optional)
     * @param  int $limit The maximum number of items to return. (optional)
     * @param  int $offset An integer to signify the offset to paginate from. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationEnvironments'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\Environments|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApplicationEnvironmentsWithHttpInfo($application_uuid, $sort = null, $filter = null, $limit = null, $offset = null, string $contentType = self::contentTypes['getApplicationEnvironments'][0])
    {
        $request = $this->getApplicationEnvironmentsRequest($application_uuid, $sort, $filter, $limit, $offset, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Acquia\CloudApi\Model\Environments' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Environments' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Environments', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\Environments';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Environments',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApplicationEnvironmentsAsync
     *
     * Returns a list of environments within this application by its UUID.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $sort A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable. (optional)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;) (optional)
     * @param  int $limit The maximum number of items to return. (optional)
     * @param  int $offset An integer to signify the offset to paginate from. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationEnvironments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApplicationEnvironmentsAsync($application_uuid, $sort = null, $filter = null, $limit = null, $offset = null, string $contentType = self::contentTypes['getApplicationEnvironments'][0])
    {
        return $this->getApplicationEnvironmentsAsyncWithHttpInfo($application_uuid, $sort, $filter, $limit, $offset, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApplicationEnvironmentsAsyncWithHttpInfo
     *
     * Returns a list of environments within this application by its UUID.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $sort A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable. (optional)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;) (optional)
     * @param  int $limit The maximum number of items to return. (optional)
     * @param  int $offset An integer to signify the offset to paginate from. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationEnvironments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApplicationEnvironmentsAsyncWithHttpInfo($application_uuid, $sort = null, $filter = null, $limit = null, $offset = null, string $contentType = self::contentTypes['getApplicationEnvironments'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\Environments';
        $request = $this->getApplicationEnvironmentsRequest($application_uuid, $sort, $filter, $limit, $offset, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApplicationEnvironments'
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $sort A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable. (optional)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;) (optional)
     * @param  int $limit The maximum number of items to return. (optional)
     * @param  int $offset An integer to signify the offset to paginate from. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationEnvironments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApplicationEnvironmentsRequest($application_uuid, $sort = null, $filter = null, $limit = null, $offset = null, string $contentType = self::contentTypes['getApplicationEnvironments'][0])
    {

        // verify the required parameter 'application_uuid' is set
        if ($application_uuid === null || (is_array($application_uuid) && count($application_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $application_uuid when calling getApplicationEnvironments'
            );
        }

        
        



        $resourcePath = '/applications/{applicationUuid}/environments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            'filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($application_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'applicationUuid' . '}',
                ObjectSerializer::toPathValue($application_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApplicationFeatures
     *
     * Return application features.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationFeatures'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\ApplicationFeatures
     */
    public function getApplicationFeatures($application_uuid, string $contentType = self::contentTypes['getApplicationFeatures'][0])
    {
        list($response) = $this->getApplicationFeaturesWithHttpInfo($application_uuid, $contentType);
        return $response;
    }

    /**
     * Operation getApplicationFeaturesWithHttpInfo
     *
     * Return application features.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationFeatures'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\ApplicationFeatures, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApplicationFeaturesWithHttpInfo($application_uuid, string $contentType = self::contentTypes['getApplicationFeatures'][0])
    {
        $request = $this->getApplicationFeaturesRequest($application_uuid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Acquia\CloudApi\Model\ApplicationFeatures' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\ApplicationFeatures' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\ApplicationFeatures', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\ApplicationFeatures';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\ApplicationFeatures',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApplicationFeaturesAsync
     *
     * Return application features.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationFeatures'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApplicationFeaturesAsync($application_uuid, string $contentType = self::contentTypes['getApplicationFeatures'][0])
    {
        return $this->getApplicationFeaturesAsyncWithHttpInfo($application_uuid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApplicationFeaturesAsyncWithHttpInfo
     *
     * Return application features.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationFeatures'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApplicationFeaturesAsyncWithHttpInfo($application_uuid, string $contentType = self::contentTypes['getApplicationFeatures'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\ApplicationFeatures';
        $request = $this->getApplicationFeaturesRequest($application_uuid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApplicationFeatures'
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationFeatures'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApplicationFeaturesRequest($application_uuid, string $contentType = self::contentTypes['getApplicationFeatures'][0])
    {

        // verify the required parameter 'application_uuid' is set
        if ($application_uuid === null || (is_array($application_uuid) && count($application_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $application_uuid when calling getApplicationFeatures'
            );
        }


        $resourcePath = '/applications/{applicationUuid}/features';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($application_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'applicationUuid' . '}',
                ObjectSerializer::toPathValue($application_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApplicationHostingSettings
     *
     * Returns the hosting settings for this application.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationHostingSettings'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\HostingSettings|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error
     * @deprecated
     */
    public function getApplicationHostingSettings($application_uuid, string $contentType = self::contentTypes['getApplicationHostingSettings'][0])
    {
        list($response) = $this->getApplicationHostingSettingsWithHttpInfo($application_uuid, $contentType);
        return $response;
    }

    /**
     * Operation getApplicationHostingSettingsWithHttpInfo
     *
     * Returns the hosting settings for this application.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationHostingSettings'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\HostingSettings|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function getApplicationHostingSettingsWithHttpInfo($application_uuid, string $contentType = self::contentTypes['getApplicationHostingSettings'][0])
    {
        $request = $this->getApplicationHostingSettingsRequest($application_uuid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Acquia\CloudApi\Model\HostingSettings' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\HostingSettings' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\HostingSettings', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\HostingSettings';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\HostingSettings',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApplicationHostingSettingsAsync
     *
     * Returns the hosting settings for this application.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationHostingSettings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getApplicationHostingSettingsAsync($application_uuid, string $contentType = self::contentTypes['getApplicationHostingSettings'][0])
    {
        return $this->getApplicationHostingSettingsAsyncWithHttpInfo($application_uuid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApplicationHostingSettingsAsyncWithHttpInfo
     *
     * Returns the hosting settings for this application.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationHostingSettings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getApplicationHostingSettingsAsyncWithHttpInfo($application_uuid, string $contentType = self::contentTypes['getApplicationHostingSettings'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\HostingSettings';
        $request = $this->getApplicationHostingSettingsRequest($application_uuid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApplicationHostingSettings'
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationHostingSettings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function getApplicationHostingSettingsRequest($application_uuid, string $contentType = self::contentTypes['getApplicationHostingSettings'][0])
    {

        // verify the required parameter 'application_uuid' is set
        if ($application_uuid === null || (is_array($application_uuid) && count($application_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $application_uuid when calling getApplicationHostingSettings'
            );
        }


        $resourcePath = '/applications/{applicationUuid}/settings/hosting';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($application_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'applicationUuid' . '}',
                ObjectSerializer::toPathValue($application_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApplicationIdes
     *
     * Returns a list of Cloud IDEs associated with this application.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationIdes'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\Ides|\Acquia\CloudApi\Model\Error
     */
    public function getApplicationIdes($application_uuid, string $contentType = self::contentTypes['getApplicationIdes'][0])
    {
        list($response) = $this->getApplicationIdesWithHttpInfo($application_uuid, $contentType);
        return $response;
    }

    /**
     * Operation getApplicationIdesWithHttpInfo
     *
     * Returns a list of Cloud IDEs associated with this application.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationIdes'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\Ides|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApplicationIdesWithHttpInfo($application_uuid, string $contentType = self::contentTypes['getApplicationIdes'][0])
    {
        $request = $this->getApplicationIdesRequest($application_uuid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Acquia\CloudApi\Model\Ides' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Ides' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Ides', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\Ides';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Ides',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApplicationIdesAsync
     *
     * Returns a list of Cloud IDEs associated with this application.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationIdes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApplicationIdesAsync($application_uuid, string $contentType = self::contentTypes['getApplicationIdes'][0])
    {
        return $this->getApplicationIdesAsyncWithHttpInfo($application_uuid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApplicationIdesAsyncWithHttpInfo
     *
     * Returns a list of Cloud IDEs associated with this application.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationIdes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApplicationIdesAsyncWithHttpInfo($application_uuid, string $contentType = self::contentTypes['getApplicationIdes'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\Ides';
        $request = $this->getApplicationIdesRequest($application_uuid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApplicationIdes'
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationIdes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApplicationIdesRequest($application_uuid, string $contentType = self::contentTypes['getApplicationIdes'][0])
    {

        // verify the required parameter 'application_uuid' is set
        if ($application_uuid === null || (is_array($application_uuid) && count($application_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $application_uuid when calling getApplicationIdes'
            );
        }


        $resourcePath = '/applications/{applicationUuid}/ides';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($application_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'applicationUuid' . '}',
                ObjectSerializer::toPathValue($application_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApplicationLegacyProductKeysSettings
     *
     * Returns the legacy product keys for this application.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationLegacyProductKeysSettings'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\LegacyProductKeysSettings|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error
     * @deprecated
     */
    public function getApplicationLegacyProductKeysSettings($application_uuid, string $contentType = self::contentTypes['getApplicationLegacyProductKeysSettings'][0])
    {
        list($response) = $this->getApplicationLegacyProductKeysSettingsWithHttpInfo($application_uuid, $contentType);
        return $response;
    }

    /**
     * Operation getApplicationLegacyProductKeysSettingsWithHttpInfo
     *
     * Returns the legacy product keys for this application.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationLegacyProductKeysSettings'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\LegacyProductKeysSettings|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function getApplicationLegacyProductKeysSettingsWithHttpInfo($application_uuid, string $contentType = self::contentTypes['getApplicationLegacyProductKeysSettings'][0])
    {
        $request = $this->getApplicationLegacyProductKeysSettingsRequest($application_uuid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Acquia\CloudApi\Model\LegacyProductKeysSettings' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\LegacyProductKeysSettings' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\LegacyProductKeysSettings', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\LegacyProductKeysSettings';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\LegacyProductKeysSettings',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApplicationLegacyProductKeysSettingsAsync
     *
     * Returns the legacy product keys for this application.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationLegacyProductKeysSettings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getApplicationLegacyProductKeysSettingsAsync($application_uuid, string $contentType = self::contentTypes['getApplicationLegacyProductKeysSettings'][0])
    {
        return $this->getApplicationLegacyProductKeysSettingsAsyncWithHttpInfo($application_uuid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApplicationLegacyProductKeysSettingsAsyncWithHttpInfo
     *
     * Returns the legacy product keys for this application.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationLegacyProductKeysSettings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getApplicationLegacyProductKeysSettingsAsyncWithHttpInfo($application_uuid, string $contentType = self::contentTypes['getApplicationLegacyProductKeysSettings'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\LegacyProductKeysSettings';
        $request = $this->getApplicationLegacyProductKeysSettingsRequest($application_uuid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApplicationLegacyProductKeysSettings'
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationLegacyProductKeysSettings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function getApplicationLegacyProductKeysSettingsRequest($application_uuid, string $contentType = self::contentTypes['getApplicationLegacyProductKeysSettings'][0])
    {

        // verify the required parameter 'application_uuid' is set
        if ($application_uuid === null || (is_array($application_uuid) && count($application_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $application_uuid when calling getApplicationLegacyProductKeysSettings'
            );
        }


        $resourcePath = '/applications/{applicationUuid}/settings/keys';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($application_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'applicationUuid' . '}',
                ObjectSerializer::toPathValue($application_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApplicationMessages
     *
     * Returns a list of messages associated with this application.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $from Specifies relative or absolute time period to retrieve results from. (Default value -7d) (optional)
     * @param  string $to Optionally specifies relative or absolute time period to retrieve results until. (optional)
     * @param  string $sort A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable. (optional)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;) (optional)
     * @param  int $limit The maximum number of items to return. (optional)
     * @param  int $offset An integer to signify the offset to paginate from. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationMessages'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\UxMessages|\Acquia\CloudApi\Model\Error
     */
    public function getApplicationMessages($application_uuid, $from = null, $to = null, $sort = null, $filter = null, $limit = null, $offset = null, string $contentType = self::contentTypes['getApplicationMessages'][0])
    {
        list($response) = $this->getApplicationMessagesWithHttpInfo($application_uuid, $from, $to, $sort, $filter, $limit, $offset, $contentType);
        return $response;
    }

    /**
     * Operation getApplicationMessagesWithHttpInfo
     *
     * Returns a list of messages associated with this application.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $from Specifies relative or absolute time period to retrieve results from. (Default value -7d) (optional)
     * @param  string $to Optionally specifies relative or absolute time period to retrieve results until. (optional)
     * @param  string $sort A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable. (optional)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;) (optional)
     * @param  int $limit The maximum number of items to return. (optional)
     * @param  int $offset An integer to signify the offset to paginate from. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationMessages'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\UxMessages|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApplicationMessagesWithHttpInfo($application_uuid, $from = null, $to = null, $sort = null, $filter = null, $limit = null, $offset = null, string $contentType = self::contentTypes['getApplicationMessages'][0])
    {
        $request = $this->getApplicationMessagesRequest($application_uuid, $from, $to, $sort, $filter, $limit, $offset, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Acquia\CloudApi\Model\UxMessages' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\UxMessages' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\UxMessages', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\UxMessages';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\UxMessages',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApplicationMessagesAsync
     *
     * Returns a list of messages associated with this application.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $from Specifies relative or absolute time period to retrieve results from. (Default value -7d) (optional)
     * @param  string $to Optionally specifies relative or absolute time period to retrieve results until. (optional)
     * @param  string $sort A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable. (optional)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;) (optional)
     * @param  int $limit The maximum number of items to return. (optional)
     * @param  int $offset An integer to signify the offset to paginate from. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationMessages'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApplicationMessagesAsync($application_uuid, $from = null, $to = null, $sort = null, $filter = null, $limit = null, $offset = null, string $contentType = self::contentTypes['getApplicationMessages'][0])
    {
        return $this->getApplicationMessagesAsyncWithHttpInfo($application_uuid, $from, $to, $sort, $filter, $limit, $offset, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApplicationMessagesAsyncWithHttpInfo
     *
     * Returns a list of messages associated with this application.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $from Specifies relative or absolute time period to retrieve results from. (Default value -7d) (optional)
     * @param  string $to Optionally specifies relative or absolute time period to retrieve results until. (optional)
     * @param  string $sort A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable. (optional)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;) (optional)
     * @param  int $limit The maximum number of items to return. (optional)
     * @param  int $offset An integer to signify the offset to paginate from. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationMessages'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApplicationMessagesAsyncWithHttpInfo($application_uuid, $from = null, $to = null, $sort = null, $filter = null, $limit = null, $offset = null, string $contentType = self::contentTypes['getApplicationMessages'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\UxMessages';
        $request = $this->getApplicationMessagesRequest($application_uuid, $from, $to, $sort, $filter, $limit, $offset, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApplicationMessages'
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $from Specifies relative or absolute time period to retrieve results from. (Default value -7d) (optional)
     * @param  string $to Optionally specifies relative or absolute time period to retrieve results until. (optional)
     * @param  string $sort A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable. (optional)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;) (optional)
     * @param  int $limit The maximum number of items to return. (optional)
     * @param  int $offset An integer to signify the offset to paginate from. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationMessages'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApplicationMessagesRequest($application_uuid, $from = null, $to = null, $sort = null, $filter = null, $limit = null, $offset = null, string $contentType = self::contentTypes['getApplicationMessages'][0])
    {

        // verify the required parameter 'application_uuid' is set
        if ($application_uuid === null || (is_array($application_uuid) && count($application_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $application_uuid when calling getApplicationMessages'
            );
        }



        
        



        $resourcePath = '/applications/{applicationUuid}/messages';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from,
            'from', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $to,
            'to', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            'filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($application_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'applicationUuid' . '}',
                ObjectSerializer::toPathValue($application_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApplicationNotificationByUuid
     *
     * Returns a single notification.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $notification_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationNotificationByUuid'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\Notification|\Acquia\CloudApi\Model\Error
     * @deprecated
     */
    public function getApplicationNotificationByUuid($application_uuid, $notification_uuid, string $contentType = self::contentTypes['getApplicationNotificationByUuid'][0])
    {
        list($response) = $this->getApplicationNotificationByUuidWithHttpInfo($application_uuid, $notification_uuid, $contentType);
        return $response;
    }

    /**
     * Operation getApplicationNotificationByUuidWithHttpInfo
     *
     * Returns a single notification.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $notification_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationNotificationByUuid'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\Notification|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function getApplicationNotificationByUuidWithHttpInfo($application_uuid, $notification_uuid, string $contentType = self::contentTypes['getApplicationNotificationByUuid'][0])
    {
        $request = $this->getApplicationNotificationByUuidRequest($application_uuid, $notification_uuid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Acquia\CloudApi\Model\Notification' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Notification' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Notification', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\Notification';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Notification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApplicationNotificationByUuidAsync
     *
     * Returns a single notification.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $notification_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationNotificationByUuid'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getApplicationNotificationByUuidAsync($application_uuid, $notification_uuid, string $contentType = self::contentTypes['getApplicationNotificationByUuid'][0])
    {
        return $this->getApplicationNotificationByUuidAsyncWithHttpInfo($application_uuid, $notification_uuid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApplicationNotificationByUuidAsyncWithHttpInfo
     *
     * Returns a single notification.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $notification_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationNotificationByUuid'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getApplicationNotificationByUuidAsyncWithHttpInfo($application_uuid, $notification_uuid, string $contentType = self::contentTypes['getApplicationNotificationByUuid'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\Notification';
        $request = $this->getApplicationNotificationByUuidRequest($application_uuid, $notification_uuid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApplicationNotificationByUuid'
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $notification_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationNotificationByUuid'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function getApplicationNotificationByUuidRequest($application_uuid, $notification_uuid, string $contentType = self::contentTypes['getApplicationNotificationByUuid'][0])
    {

        // verify the required parameter 'application_uuid' is set
        if ($application_uuid === null || (is_array($application_uuid) && count($application_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $application_uuid when calling getApplicationNotificationByUuid'
            );
        }

        // verify the required parameter 'notification_uuid' is set
        if ($notification_uuid === null || (is_array($notification_uuid) && count($notification_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $notification_uuid when calling getApplicationNotificationByUuid'
            );
        }


        $resourcePath = '/applications/{applicationUuid}/notifications/{notificationUuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($application_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'applicationUuid' . '}',
                ObjectSerializer::toPathValue($application_uuid),
                $resourcePath
            );
        }
        // path params
        if ($notification_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'notificationUuid' . '}',
                ObjectSerializer::toPathValue($notification_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApplicationNotifications
     *
     * Returns a list of notifications associated with this application by its UUID.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $sort A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable. (optional)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;) (optional)
     * @param  int $limit The maximum number of items to return. (optional)
     * @param  int $offset An integer to signify the offset to paginate from. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationNotifications'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\ApplicationsNotifications|\Acquia\CloudApi\Model\Error
     */
    public function getApplicationNotifications($application_uuid, $sort = null, $filter = null, $limit = null, $offset = null, string $contentType = self::contentTypes['getApplicationNotifications'][0])
    {
        list($response) = $this->getApplicationNotificationsWithHttpInfo($application_uuid, $sort, $filter, $limit, $offset, $contentType);
        return $response;
    }

    /**
     * Operation getApplicationNotificationsWithHttpInfo
     *
     * Returns a list of notifications associated with this application by its UUID.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $sort A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable. (optional)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;) (optional)
     * @param  int $limit The maximum number of items to return. (optional)
     * @param  int $offset An integer to signify the offset to paginate from. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationNotifications'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\ApplicationsNotifications|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApplicationNotificationsWithHttpInfo($application_uuid, $sort = null, $filter = null, $limit = null, $offset = null, string $contentType = self::contentTypes['getApplicationNotifications'][0])
    {
        $request = $this->getApplicationNotificationsRequest($application_uuid, $sort, $filter, $limit, $offset, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Acquia\CloudApi\Model\ApplicationsNotifications' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\ApplicationsNotifications' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\ApplicationsNotifications', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\ApplicationsNotifications';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\ApplicationsNotifications',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApplicationNotificationsAsync
     *
     * Returns a list of notifications associated with this application by its UUID.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $sort A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable. (optional)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;) (optional)
     * @param  int $limit The maximum number of items to return. (optional)
     * @param  int $offset An integer to signify the offset to paginate from. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationNotifications'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApplicationNotificationsAsync($application_uuid, $sort = null, $filter = null, $limit = null, $offset = null, string $contentType = self::contentTypes['getApplicationNotifications'][0])
    {
        return $this->getApplicationNotificationsAsyncWithHttpInfo($application_uuid, $sort, $filter, $limit, $offset, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApplicationNotificationsAsyncWithHttpInfo
     *
     * Returns a list of notifications associated with this application by its UUID.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $sort A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable. (optional)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;) (optional)
     * @param  int $limit The maximum number of items to return. (optional)
     * @param  int $offset An integer to signify the offset to paginate from. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationNotifications'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApplicationNotificationsAsyncWithHttpInfo($application_uuid, $sort = null, $filter = null, $limit = null, $offset = null, string $contentType = self::contentTypes['getApplicationNotifications'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\ApplicationsNotifications';
        $request = $this->getApplicationNotificationsRequest($application_uuid, $sort, $filter, $limit, $offset, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApplicationNotifications'
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $sort A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable. (optional)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;) (optional)
     * @param  int $limit The maximum number of items to return. (optional)
     * @param  int $offset An integer to signify the offset to paginate from. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationNotifications'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApplicationNotificationsRequest($application_uuid, $sort = null, $filter = null, $limit = null, $offset = null, string $contentType = self::contentTypes['getApplicationNotifications'][0])
    {

        // verify the required parameter 'application_uuid' is set
        if ($application_uuid === null || (is_array($application_uuid) && count($application_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $application_uuid when calling getApplicationNotifications'
            );
        }

        
        



        $resourcePath = '/applications/{applicationUuid}/notifications';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            'filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($application_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'applicationUuid' . '}',
                ObjectSerializer::toPathValue($application_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApplicationPermissions
     *
     * Returns a list of permissions the user has for this application by its UUID.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationPermissions'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\ApplicationsPermissions|\Acquia\CloudApi\Model\Error
     */
    public function getApplicationPermissions($application_uuid, string $contentType = self::contentTypes['getApplicationPermissions'][0])
    {
        list($response) = $this->getApplicationPermissionsWithHttpInfo($application_uuid, $contentType);
        return $response;
    }

    /**
     * Operation getApplicationPermissionsWithHttpInfo
     *
     * Returns a list of permissions the user has for this application by its UUID.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationPermissions'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\ApplicationsPermissions|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApplicationPermissionsWithHttpInfo($application_uuid, string $contentType = self::contentTypes['getApplicationPermissions'][0])
    {
        $request = $this->getApplicationPermissionsRequest($application_uuid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Acquia\CloudApi\Model\ApplicationsPermissions' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\ApplicationsPermissions' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\ApplicationsPermissions', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\ApplicationsPermissions';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\ApplicationsPermissions',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApplicationPermissionsAsync
     *
     * Returns a list of permissions the user has for this application by its UUID.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationPermissions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApplicationPermissionsAsync($application_uuid, string $contentType = self::contentTypes['getApplicationPermissions'][0])
    {
        return $this->getApplicationPermissionsAsyncWithHttpInfo($application_uuid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApplicationPermissionsAsyncWithHttpInfo
     *
     * Returns a list of permissions the user has for this application by its UUID.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationPermissions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApplicationPermissionsAsyncWithHttpInfo($application_uuid, string $contentType = self::contentTypes['getApplicationPermissions'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\ApplicationsPermissions';
        $request = $this->getApplicationPermissionsRequest($application_uuid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApplicationPermissions'
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationPermissions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApplicationPermissionsRequest($application_uuid, string $contentType = self::contentTypes['getApplicationPermissions'][0])
    {

        // verify the required parameter 'application_uuid' is set
        if ($application_uuid === null || (is_array($application_uuid) && count($application_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $application_uuid when calling getApplicationPermissions'
            );
        }


        $resourcePath = '/applications/{applicationUuid}/permissions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($application_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'applicationUuid' . '}',
                ObjectSerializer::toPathValue($application_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApplicationRemoteAdministrationSettings
     *
     * Returns the remote administration settings for this application.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationRemoteAdministrationSettings'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\RemoteAdministrationSettings|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error
     */
    public function getApplicationRemoteAdministrationSettings($application_uuid, string $contentType = self::contentTypes['getApplicationRemoteAdministrationSettings'][0])
    {
        list($response) = $this->getApplicationRemoteAdministrationSettingsWithHttpInfo($application_uuid, $contentType);
        return $response;
    }

    /**
     * Operation getApplicationRemoteAdministrationSettingsWithHttpInfo
     *
     * Returns the remote administration settings for this application.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationRemoteAdministrationSettings'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\RemoteAdministrationSettings|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApplicationRemoteAdministrationSettingsWithHttpInfo($application_uuid, string $contentType = self::contentTypes['getApplicationRemoteAdministrationSettings'][0])
    {
        $request = $this->getApplicationRemoteAdministrationSettingsRequest($application_uuid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Acquia\CloudApi\Model\RemoteAdministrationSettings' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\RemoteAdministrationSettings' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\RemoteAdministrationSettings', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\RemoteAdministrationSettings';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\RemoteAdministrationSettings',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApplicationRemoteAdministrationSettingsAsync
     *
     * Returns the remote administration settings for this application.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationRemoteAdministrationSettings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApplicationRemoteAdministrationSettingsAsync($application_uuid, string $contentType = self::contentTypes['getApplicationRemoteAdministrationSettings'][0])
    {
        return $this->getApplicationRemoteAdministrationSettingsAsyncWithHttpInfo($application_uuid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApplicationRemoteAdministrationSettingsAsyncWithHttpInfo
     *
     * Returns the remote administration settings for this application.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationRemoteAdministrationSettings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApplicationRemoteAdministrationSettingsAsyncWithHttpInfo($application_uuid, string $contentType = self::contentTypes['getApplicationRemoteAdministrationSettings'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\RemoteAdministrationSettings';
        $request = $this->getApplicationRemoteAdministrationSettingsRequest($application_uuid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApplicationRemoteAdministrationSettings'
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationRemoteAdministrationSettings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApplicationRemoteAdministrationSettingsRequest($application_uuid, string $contentType = self::contentTypes['getApplicationRemoteAdministrationSettings'][0])
    {

        // verify the required parameter 'application_uuid' is set
        if ($application_uuid === null || (is_array($application_uuid) && count($application_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $application_uuid when calling getApplicationRemoteAdministrationSettings'
            );
        }


        $resourcePath = '/applications/{applicationUuid}/settings/ra';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($application_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'applicationUuid' . '}',
                ObjectSerializer::toPathValue($application_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApplicationSearchConfigurationSet
     *
     * Returns a search configuration set for an application
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $configuration_set_id An ID that uniquely identifies a configuration set. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationSearchConfigurationSet'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\ConfigurationSet|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error
     */
    public function getApplicationSearchConfigurationSet($application_uuid, $configuration_set_id, string $contentType = self::contentTypes['getApplicationSearchConfigurationSet'][0])
    {
        list($response) = $this->getApplicationSearchConfigurationSetWithHttpInfo($application_uuid, $configuration_set_id, $contentType);
        return $response;
    }

    /**
     * Operation getApplicationSearchConfigurationSetWithHttpInfo
     *
     * Returns a search configuration set for an application
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $configuration_set_id An ID that uniquely identifies a configuration set. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationSearchConfigurationSet'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\ConfigurationSet|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApplicationSearchConfigurationSetWithHttpInfo($application_uuid, $configuration_set_id, string $contentType = self::contentTypes['getApplicationSearchConfigurationSet'][0])
    {
        $request = $this->getApplicationSearchConfigurationSetRequest($application_uuid, $configuration_set_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Acquia\CloudApi\Model\ConfigurationSet' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\ConfigurationSet' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\ConfigurationSet', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\ConfigurationSet';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\ConfigurationSet',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApplicationSearchConfigurationSetAsync
     *
     * Returns a search configuration set for an application
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $configuration_set_id An ID that uniquely identifies a configuration set. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationSearchConfigurationSet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApplicationSearchConfigurationSetAsync($application_uuid, $configuration_set_id, string $contentType = self::contentTypes['getApplicationSearchConfigurationSet'][0])
    {
        return $this->getApplicationSearchConfigurationSetAsyncWithHttpInfo($application_uuid, $configuration_set_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApplicationSearchConfigurationSetAsyncWithHttpInfo
     *
     * Returns a search configuration set for an application
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $configuration_set_id An ID that uniquely identifies a configuration set. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationSearchConfigurationSet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApplicationSearchConfigurationSetAsyncWithHttpInfo($application_uuid, $configuration_set_id, string $contentType = self::contentTypes['getApplicationSearchConfigurationSet'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\ConfigurationSet';
        $request = $this->getApplicationSearchConfigurationSetRequest($application_uuid, $configuration_set_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApplicationSearchConfigurationSet'
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $configuration_set_id An ID that uniquely identifies a configuration set. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationSearchConfigurationSet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApplicationSearchConfigurationSetRequest($application_uuid, $configuration_set_id, string $contentType = self::contentTypes['getApplicationSearchConfigurationSet'][0])
    {

        // verify the required parameter 'application_uuid' is set
        if ($application_uuid === null || (is_array($application_uuid) && count($application_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $application_uuid when calling getApplicationSearchConfigurationSet'
            );
        }

        // verify the required parameter 'configuration_set_id' is set
        if ($configuration_set_id === null || (is_array($configuration_set_id) && count($configuration_set_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $configuration_set_id when calling getApplicationSearchConfigurationSet'
            );
        }


        $resourcePath = '/applications/{applicationUuid}/search/config-sets/{configurationSetId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($application_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'applicationUuid' . '}',
                ObjectSerializer::toPathValue($application_uuid),
                $resourcePath
            );
        }
        // path params
        if ($configuration_set_id !== null) {
            $resourcePath = str_replace(
                '{' . 'configurationSetId' . '}',
                ObjectSerializer::toPathValue($configuration_set_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApplicationSearchConfigurationSets
     *
     * Returns a collection of search configuration sets for an application
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationSearchConfigurationSets'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\ConfigurationSets|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error
     */
    public function getApplicationSearchConfigurationSets($application_uuid, string $contentType = self::contentTypes['getApplicationSearchConfigurationSets'][0])
    {
        list($response) = $this->getApplicationSearchConfigurationSetsWithHttpInfo($application_uuid, $contentType);
        return $response;
    }

    /**
     * Operation getApplicationSearchConfigurationSetsWithHttpInfo
     *
     * Returns a collection of search configuration sets for an application
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationSearchConfigurationSets'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\ConfigurationSets|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApplicationSearchConfigurationSetsWithHttpInfo($application_uuid, string $contentType = self::contentTypes['getApplicationSearchConfigurationSets'][0])
    {
        $request = $this->getApplicationSearchConfigurationSetsRequest($application_uuid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Acquia\CloudApi\Model\ConfigurationSets' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\ConfigurationSets' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\ConfigurationSets', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\ConfigurationSets';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\ConfigurationSets',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApplicationSearchConfigurationSetsAsync
     *
     * Returns a collection of search configuration sets for an application
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationSearchConfigurationSets'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApplicationSearchConfigurationSetsAsync($application_uuid, string $contentType = self::contentTypes['getApplicationSearchConfigurationSets'][0])
    {
        return $this->getApplicationSearchConfigurationSetsAsyncWithHttpInfo($application_uuid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApplicationSearchConfigurationSetsAsyncWithHttpInfo
     *
     * Returns a collection of search configuration sets for an application
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationSearchConfigurationSets'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApplicationSearchConfigurationSetsAsyncWithHttpInfo($application_uuid, string $contentType = self::contentTypes['getApplicationSearchConfigurationSets'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\ConfigurationSets';
        $request = $this->getApplicationSearchConfigurationSetsRequest($application_uuid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApplicationSearchConfigurationSets'
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationSearchConfigurationSets'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApplicationSearchConfigurationSetsRequest($application_uuid, string $contentType = self::contentTypes['getApplicationSearchConfigurationSets'][0])
    {

        // verify the required parameter 'application_uuid' is set
        if ($application_uuid === null || (is_array($application_uuid) && count($application_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $application_uuid when calling getApplicationSearchConfigurationSets'
            );
        }


        $resourcePath = '/applications/{applicationUuid}/search/config-sets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($application_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'applicationUuid' . '}',
                ObjectSerializer::toPathValue($application_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApplicationSearchList
     *
     * Returns a traversal endpoint for search entities for the application.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationSearchList'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\Search|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error
     */
    public function getApplicationSearchList($application_uuid, string $contentType = self::contentTypes['getApplicationSearchList'][0])
    {
        list($response) = $this->getApplicationSearchListWithHttpInfo($application_uuid, $contentType);
        return $response;
    }

    /**
     * Operation getApplicationSearchListWithHttpInfo
     *
     * Returns a traversal endpoint for search entities for the application.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationSearchList'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\Search|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApplicationSearchListWithHttpInfo($application_uuid, string $contentType = self::contentTypes['getApplicationSearchList'][0])
    {
        $request = $this->getApplicationSearchListRequest($application_uuid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Acquia\CloudApi\Model\Search' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Search' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Search', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\Search';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Search',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApplicationSearchListAsync
     *
     * Returns a traversal endpoint for search entities for the application.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationSearchList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApplicationSearchListAsync($application_uuid, string $contentType = self::contentTypes['getApplicationSearchList'][0])
    {
        return $this->getApplicationSearchListAsyncWithHttpInfo($application_uuid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApplicationSearchListAsyncWithHttpInfo
     *
     * Returns a traversal endpoint for search entities for the application.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationSearchList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApplicationSearchListAsyncWithHttpInfo($application_uuid, string $contentType = self::contentTypes['getApplicationSearchList'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\Search';
        $request = $this->getApplicationSearchListRequest($application_uuid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApplicationSearchList'
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationSearchList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApplicationSearchListRequest($application_uuid, string $contentType = self::contentTypes['getApplicationSearchList'][0])
    {

        // verify the required parameter 'application_uuid' is set
        if ($application_uuid === null || (is_array($application_uuid) && count($application_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $application_uuid when calling getApplicationSearchList'
            );
        }


        $resourcePath = '/applications/{applicationUuid}/search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($application_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'applicationUuid' . '}',
                ObjectSerializer::toPathValue($application_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApplicationSecuritySettings
     *
     * Returns the security policy settings for this application.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationSecuritySettings'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\SecuritySettings|\Acquia\CloudApi\Model\Error
     * @deprecated
     */
    public function getApplicationSecuritySettings($application_uuid, string $contentType = self::contentTypes['getApplicationSecuritySettings'][0])
    {
        list($response) = $this->getApplicationSecuritySettingsWithHttpInfo($application_uuid, $contentType);
        return $response;
    }

    /**
     * Operation getApplicationSecuritySettingsWithHttpInfo
     *
     * Returns the security policy settings for this application.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationSecuritySettings'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\SecuritySettings|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function getApplicationSecuritySettingsWithHttpInfo($application_uuid, string $contentType = self::contentTypes['getApplicationSecuritySettings'][0])
    {
        $request = $this->getApplicationSecuritySettingsRequest($application_uuid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Acquia\CloudApi\Model\SecuritySettings' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\SecuritySettings' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\SecuritySettings', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\SecuritySettings';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\SecuritySettings',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApplicationSecuritySettingsAsync
     *
     * Returns the security policy settings for this application.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationSecuritySettings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getApplicationSecuritySettingsAsync($application_uuid, string $contentType = self::contentTypes['getApplicationSecuritySettings'][0])
    {
        return $this->getApplicationSecuritySettingsAsyncWithHttpInfo($application_uuid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApplicationSecuritySettingsAsyncWithHttpInfo
     *
     * Returns the security policy settings for this application.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationSecuritySettings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getApplicationSecuritySettingsAsyncWithHttpInfo($application_uuid, string $contentType = self::contentTypes['getApplicationSecuritySettings'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\SecuritySettings';
        $request = $this->getApplicationSecuritySettingsRequest($application_uuid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApplicationSecuritySettings'
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationSecuritySettings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function getApplicationSecuritySettingsRequest($application_uuid, string $contentType = self::contentTypes['getApplicationSecuritySettings'][0])
    {

        // verify the required parameter 'application_uuid' is set
        if ($application_uuid === null || (is_array($application_uuid) && count($application_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $application_uuid when calling getApplicationSecuritySettings'
            );
        }


        $resourcePath = '/applications/{applicationUuid}/settings/security';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($application_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'applicationUuid' . '}',
                ObjectSerializer::toPathValue($application_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApplicationSettings
     *
     * Returns available settings for this application.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationSettings'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\Settings|\Acquia\CloudApi\Model\Error
     */
    public function getApplicationSettings($application_uuid, string $contentType = self::contentTypes['getApplicationSettings'][0])
    {
        list($response) = $this->getApplicationSettingsWithHttpInfo($application_uuid, $contentType);
        return $response;
    }

    /**
     * Operation getApplicationSettingsWithHttpInfo
     *
     * Returns available settings for this application.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationSettings'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\Settings|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApplicationSettingsWithHttpInfo($application_uuid, string $contentType = self::contentTypes['getApplicationSettings'][0])
    {
        $request = $this->getApplicationSettingsRequest($application_uuid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Acquia\CloudApi\Model\Settings' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Settings' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Settings', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\Settings';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Settings',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApplicationSettingsAsync
     *
     * Returns available settings for this application.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationSettings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApplicationSettingsAsync($application_uuid, string $contentType = self::contentTypes['getApplicationSettings'][0])
    {
        return $this->getApplicationSettingsAsyncWithHttpInfo($application_uuid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApplicationSettingsAsyncWithHttpInfo
     *
     * Returns available settings for this application.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationSettings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApplicationSettingsAsyncWithHttpInfo($application_uuid, string $contentType = self::contentTypes['getApplicationSettings'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\Settings';
        $request = $this->getApplicationSettingsRequest($application_uuid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApplicationSettings'
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationSettings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApplicationSettingsRequest($application_uuid, string $contentType = self::contentTypes['getApplicationSettings'][0])
    {

        // verify the required parameter 'application_uuid' is set
        if ($application_uuid === null || (is_array($application_uuid) && count($application_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $application_uuid when calling getApplicationSettings'
            );
        }


        $resourcePath = '/applications/{applicationUuid}/settings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($application_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'applicationUuid' . '}',
                ObjectSerializer::toPathValue($application_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApplicationTags
     *
     * Returns a list of application tags associated with this application.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationTags'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\ResourceTags|\Acquia\CloudApi\Model\Error
     */
    public function getApplicationTags($application_uuid, string $contentType = self::contentTypes['getApplicationTags'][0])
    {
        list($response) = $this->getApplicationTagsWithHttpInfo($application_uuid, $contentType);
        return $response;
    }

    /**
     * Operation getApplicationTagsWithHttpInfo
     *
     * Returns a list of application tags associated with this application.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationTags'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\ResourceTags|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApplicationTagsWithHttpInfo($application_uuid, string $contentType = self::contentTypes['getApplicationTags'][0])
    {
        $request = $this->getApplicationTagsRequest($application_uuid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Acquia\CloudApi\Model\ResourceTags' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\ResourceTags' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\ResourceTags', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\ResourceTags';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\ResourceTags',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApplicationTagsAsync
     *
     * Returns a list of application tags associated with this application.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationTags'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApplicationTagsAsync($application_uuid, string $contentType = self::contentTypes['getApplicationTags'][0])
    {
        return $this->getApplicationTagsAsyncWithHttpInfo($application_uuid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApplicationTagsAsyncWithHttpInfo
     *
     * Returns a list of application tags associated with this application.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationTags'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApplicationTagsAsyncWithHttpInfo($application_uuid, string $contentType = self::contentTypes['getApplicationTags'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\ResourceTags';
        $request = $this->getApplicationTagsRequest($application_uuid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApplicationTags'
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationTags'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApplicationTagsRequest($application_uuid, string $contentType = self::contentTypes['getApplicationTags'][0])
    {

        // verify the required parameter 'application_uuid' is set
        if ($application_uuid === null || (is_array($application_uuid) && count($application_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $application_uuid when calling getApplicationTags'
            );
        }


        $resourcePath = '/applications/{applicationUuid}/tags';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($application_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'applicationUuid' . '}',
                ObjectSerializer::toPathValue($application_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApplicationTasks
     *
     * Returns a list of tasks associated with this application by its UUID.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $sort A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable. (optional)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;) (optional)
     * @param  int $limit The maximum number of items to return. (optional)
     * @param  int $offset An integer to signify the offset to paginate from. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationTasks'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\ApplicationsTasks|\Acquia\CloudApi\Model\Error
     * @deprecated
     */
    public function getApplicationTasks($application_uuid, $sort = null, $filter = null, $limit = null, $offset = null, string $contentType = self::contentTypes['getApplicationTasks'][0])
    {
        list($response) = $this->getApplicationTasksWithHttpInfo($application_uuid, $sort, $filter, $limit, $offset, $contentType);
        return $response;
    }

    /**
     * Operation getApplicationTasksWithHttpInfo
     *
     * Returns a list of tasks associated with this application by its UUID.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $sort A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable. (optional)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;) (optional)
     * @param  int $limit The maximum number of items to return. (optional)
     * @param  int $offset An integer to signify the offset to paginate from. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationTasks'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\ApplicationsTasks|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function getApplicationTasksWithHttpInfo($application_uuid, $sort = null, $filter = null, $limit = null, $offset = null, string $contentType = self::contentTypes['getApplicationTasks'][0])
    {
        $request = $this->getApplicationTasksRequest($application_uuid, $sort, $filter, $limit, $offset, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Acquia\CloudApi\Model\ApplicationsTasks' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\ApplicationsTasks' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\ApplicationsTasks', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\ApplicationsTasks';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\ApplicationsTasks',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApplicationTasksAsync
     *
     * Returns a list of tasks associated with this application by its UUID.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $sort A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable. (optional)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;) (optional)
     * @param  int $limit The maximum number of items to return. (optional)
     * @param  int $offset An integer to signify the offset to paginate from. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationTasks'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getApplicationTasksAsync($application_uuid, $sort = null, $filter = null, $limit = null, $offset = null, string $contentType = self::contentTypes['getApplicationTasks'][0])
    {
        return $this->getApplicationTasksAsyncWithHttpInfo($application_uuid, $sort, $filter, $limit, $offset, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApplicationTasksAsyncWithHttpInfo
     *
     * Returns a list of tasks associated with this application by its UUID.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $sort A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable. (optional)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;) (optional)
     * @param  int $limit The maximum number of items to return. (optional)
     * @param  int $offset An integer to signify the offset to paginate from. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationTasks'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getApplicationTasksAsyncWithHttpInfo($application_uuid, $sort = null, $filter = null, $limit = null, $offset = null, string $contentType = self::contentTypes['getApplicationTasks'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\ApplicationsTasks';
        $request = $this->getApplicationTasksRequest($application_uuid, $sort, $filter, $limit, $offset, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApplicationTasks'
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $sort A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable. (optional)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;) (optional)
     * @param  int $limit The maximum number of items to return. (optional)
     * @param  int $offset An integer to signify the offset to paginate from. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationTasks'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function getApplicationTasksRequest($application_uuid, $sort = null, $filter = null, $limit = null, $offset = null, string $contentType = self::contentTypes['getApplicationTasks'][0])
    {

        // verify the required parameter 'application_uuid' is set
        if ($application_uuid === null || (is_array($application_uuid) && count($application_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $application_uuid when calling getApplicationTasks'
            );
        }

        
        



        $resourcePath = '/applications/{applicationUuid}/tasks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            'filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($application_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'applicationUuid' . '}',
                ObjectSerializer::toPathValue($application_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApplicationTeams
     *
     * Returns a list of teams associated with this application.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $from Specifies relative or absolute time period to retrieve results from. (Default value -7d) (optional)
     * @param  string $to Optionally specifies relative or absolute time period to retrieve results until. (optional)
     * @param  string $sort A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable. (optional)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;) (optional)
     * @param  int $limit The maximum number of items to return. (optional)
     * @param  int $offset An integer to signify the offset to paginate from. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationTeams'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\ApplicationsTeams|\Acquia\CloudApi\Model\Error
     */
    public function getApplicationTeams($application_uuid, $from = null, $to = null, $sort = null, $filter = null, $limit = null, $offset = null, string $contentType = self::contentTypes['getApplicationTeams'][0])
    {
        list($response) = $this->getApplicationTeamsWithHttpInfo($application_uuid, $from, $to, $sort, $filter, $limit, $offset, $contentType);
        return $response;
    }

    /**
     * Operation getApplicationTeamsWithHttpInfo
     *
     * Returns a list of teams associated with this application.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $from Specifies relative or absolute time period to retrieve results from. (Default value -7d) (optional)
     * @param  string $to Optionally specifies relative or absolute time period to retrieve results until. (optional)
     * @param  string $sort A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable. (optional)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;) (optional)
     * @param  int $limit The maximum number of items to return. (optional)
     * @param  int $offset An integer to signify the offset to paginate from. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationTeams'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\ApplicationsTeams|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApplicationTeamsWithHttpInfo($application_uuid, $from = null, $to = null, $sort = null, $filter = null, $limit = null, $offset = null, string $contentType = self::contentTypes['getApplicationTeams'][0])
    {
        $request = $this->getApplicationTeamsRequest($application_uuid, $from, $to, $sort, $filter, $limit, $offset, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Acquia\CloudApi\Model\ApplicationsTeams' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\ApplicationsTeams' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\ApplicationsTeams', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\ApplicationsTeams';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\ApplicationsTeams',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApplicationTeamsAsync
     *
     * Returns a list of teams associated with this application.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $from Specifies relative or absolute time period to retrieve results from. (Default value -7d) (optional)
     * @param  string $to Optionally specifies relative or absolute time period to retrieve results until. (optional)
     * @param  string $sort A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable. (optional)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;) (optional)
     * @param  int $limit The maximum number of items to return. (optional)
     * @param  int $offset An integer to signify the offset to paginate from. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationTeams'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApplicationTeamsAsync($application_uuid, $from = null, $to = null, $sort = null, $filter = null, $limit = null, $offset = null, string $contentType = self::contentTypes['getApplicationTeams'][0])
    {
        return $this->getApplicationTeamsAsyncWithHttpInfo($application_uuid, $from, $to, $sort, $filter, $limit, $offset, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApplicationTeamsAsyncWithHttpInfo
     *
     * Returns a list of teams associated with this application.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $from Specifies relative or absolute time period to retrieve results from. (Default value -7d) (optional)
     * @param  string $to Optionally specifies relative or absolute time period to retrieve results until. (optional)
     * @param  string $sort A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable. (optional)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;) (optional)
     * @param  int $limit The maximum number of items to return. (optional)
     * @param  int $offset An integer to signify the offset to paginate from. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationTeams'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApplicationTeamsAsyncWithHttpInfo($application_uuid, $from = null, $to = null, $sort = null, $filter = null, $limit = null, $offset = null, string $contentType = self::contentTypes['getApplicationTeams'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\ApplicationsTeams';
        $request = $this->getApplicationTeamsRequest($application_uuid, $from, $to, $sort, $filter, $limit, $offset, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApplicationTeams'
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $from Specifies relative or absolute time period to retrieve results from. (Default value -7d) (optional)
     * @param  string $to Optionally specifies relative or absolute time period to retrieve results until. (optional)
     * @param  string $sort A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable. (optional)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;) (optional)
     * @param  int $limit The maximum number of items to return. (optional)
     * @param  int $offset An integer to signify the offset to paginate from. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationTeams'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApplicationTeamsRequest($application_uuid, $from = null, $to = null, $sort = null, $filter = null, $limit = null, $offset = null, string $contentType = self::contentTypes['getApplicationTeams'][0])
    {

        // verify the required parameter 'application_uuid' is set
        if ($application_uuid === null || (is_array($application_uuid) && count($application_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $application_uuid when calling getApplicationTeams'
            );
        }



        
        



        $resourcePath = '/applications/{applicationUuid}/teams';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from,
            'from', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $to,
            'to', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            'filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($application_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'applicationUuid' . '}',
                ObjectSerializer::toPathValue($application_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApplications
     *
     * Return a list of applications the current user has access to.
     *
     * @param  string $sort A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable. (optional)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;) (optional)
     * @param  int $limit The maximum number of items to return. (optional)
     * @param  int $offset An integer to signify the offset to paginate from. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplications'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\Applications|\Acquia\CloudApi\Model\Error
     */
    public function getApplications($sort = null, $filter = null, $limit = null, $offset = null, string $contentType = self::contentTypes['getApplications'][0])
    {
        list($response) = $this->getApplicationsWithHttpInfo($sort, $filter, $limit, $offset, $contentType);
        return $response;
    }

    /**
     * Operation getApplicationsWithHttpInfo
     *
     * Return a list of applications the current user has access to.
     *
     * @param  string $sort A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable. (optional)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;) (optional)
     * @param  int $limit The maximum number of items to return. (optional)
     * @param  int $offset An integer to signify the offset to paginate from. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplications'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\Applications|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApplicationsWithHttpInfo($sort = null, $filter = null, $limit = null, $offset = null, string $contentType = self::contentTypes['getApplications'][0])
    {
        $request = $this->getApplicationsRequest($sort, $filter, $limit, $offset, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Acquia\CloudApi\Model\Applications' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Applications' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Applications', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\Applications';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Applications',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApplicationsAsync
     *
     * Return a list of applications the current user has access to.
     *
     * @param  string $sort A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable. (optional)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;) (optional)
     * @param  int $limit The maximum number of items to return. (optional)
     * @param  int $offset An integer to signify the offset to paginate from. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplications'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApplicationsAsync($sort = null, $filter = null, $limit = null, $offset = null, string $contentType = self::contentTypes['getApplications'][0])
    {
        return $this->getApplicationsAsyncWithHttpInfo($sort, $filter, $limit, $offset, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApplicationsAsyncWithHttpInfo
     *
     * Return a list of applications the current user has access to.
     *
     * @param  string $sort A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable. (optional)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;) (optional)
     * @param  int $limit The maximum number of items to return. (optional)
     * @param  int $offset An integer to signify the offset to paginate from. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplications'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApplicationsAsyncWithHttpInfo($sort = null, $filter = null, $limit = null, $offset = null, string $contentType = self::contentTypes['getApplications'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\Applications';
        $request = $this->getApplicationsRequest($sort, $filter, $limit, $offset, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApplications'
     *
     * @param  string $sort A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable. (optional)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;) (optional)
     * @param  int $limit The maximum number of items to return. (optional)
     * @param  int $offset An integer to signify the offset to paginate from. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplications'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApplicationsRequest($sort = null, $filter = null, $limit = null, $offset = null, string $contentType = self::contentTypes['getApplications'][0])
    {

        
        



        $resourcePath = '/applications';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            'filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApplicationsUsageData
     *
     * Retrieves aggregate usage data for an application, filterable by views or visits and by environment.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $from Specifies relative or absolute time period to retrieve results from. (Default value -7d) (optional)
     * @param  string $to Optionally specifies relative or absolute time period to retrieve results until. (optional)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;) (optional)
     * @param  string $resolution Specifies the data granularity of the request. Available resolutions: minute, hour, day, week or month.  Limits: - 3 hour limit for “minute” resolution - 1 week limit for “hour” resolution - 6 month limit for “day” resolution - 1 year limit for \&quot;week\&quot; resolution - 3 year limit for “month” resolution (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationsUsageData'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\ApplicationUsageMetrics|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error
     */
    public function getApplicationsUsageData($application_uuid, $from = null, $to = null, $filter = null, $resolution = null, string $contentType = self::contentTypes['getApplicationsUsageData'][0])
    {
        list($response) = $this->getApplicationsUsageDataWithHttpInfo($application_uuid, $from, $to, $filter, $resolution, $contentType);
        return $response;
    }

    /**
     * Operation getApplicationsUsageDataWithHttpInfo
     *
     * Retrieves aggregate usage data for an application, filterable by views or visits and by environment.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $from Specifies relative or absolute time period to retrieve results from. (Default value -7d) (optional)
     * @param  string $to Optionally specifies relative or absolute time period to retrieve results until. (optional)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;) (optional)
     * @param  string $resolution Specifies the data granularity of the request. Available resolutions: minute, hour, day, week or month.  Limits: - 3 hour limit for “minute” resolution - 1 week limit for “hour” resolution - 6 month limit for “day” resolution - 1 year limit for \&quot;week\&quot; resolution - 3 year limit for “month” resolution (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationsUsageData'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\ApplicationUsageMetrics|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApplicationsUsageDataWithHttpInfo($application_uuid, $from = null, $to = null, $filter = null, $resolution = null, string $contentType = self::contentTypes['getApplicationsUsageData'][0])
    {
        $request = $this->getApplicationsUsageDataRequest($application_uuid, $from, $to, $filter, $resolution, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Acquia\CloudApi\Model\ApplicationUsageMetrics' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\ApplicationUsageMetrics' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\ApplicationUsageMetrics', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\ApplicationUsageMetrics';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\ApplicationUsageMetrics',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApplicationsUsageDataAsync
     *
     * Retrieves aggregate usage data for an application, filterable by views or visits and by environment.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $from Specifies relative or absolute time period to retrieve results from. (Default value -7d) (optional)
     * @param  string $to Optionally specifies relative or absolute time period to retrieve results until. (optional)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;) (optional)
     * @param  string $resolution Specifies the data granularity of the request. Available resolutions: minute, hour, day, week or month.  Limits: - 3 hour limit for “minute” resolution - 1 week limit for “hour” resolution - 6 month limit for “day” resolution - 1 year limit for \&quot;week\&quot; resolution - 3 year limit for “month” resolution (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationsUsageData'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApplicationsUsageDataAsync($application_uuid, $from = null, $to = null, $filter = null, $resolution = null, string $contentType = self::contentTypes['getApplicationsUsageData'][0])
    {
        return $this->getApplicationsUsageDataAsyncWithHttpInfo($application_uuid, $from, $to, $filter, $resolution, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApplicationsUsageDataAsyncWithHttpInfo
     *
     * Retrieves aggregate usage data for an application, filterable by views or visits and by environment.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $from Specifies relative or absolute time period to retrieve results from. (Default value -7d) (optional)
     * @param  string $to Optionally specifies relative or absolute time period to retrieve results until. (optional)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;) (optional)
     * @param  string $resolution Specifies the data granularity of the request. Available resolutions: minute, hour, day, week or month.  Limits: - 3 hour limit for “minute” resolution - 1 week limit for “hour” resolution - 6 month limit for “day” resolution - 1 year limit for \&quot;week\&quot; resolution - 3 year limit for “month” resolution (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationsUsageData'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApplicationsUsageDataAsyncWithHttpInfo($application_uuid, $from = null, $to = null, $filter = null, $resolution = null, string $contentType = self::contentTypes['getApplicationsUsageData'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\ApplicationUsageMetrics';
        $request = $this->getApplicationsUsageDataRequest($application_uuid, $from, $to, $filter, $resolution, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApplicationsUsageData'
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $from Specifies relative or absolute time period to retrieve results from. (Default value -7d) (optional)
     * @param  string $to Optionally specifies relative or absolute time period to retrieve results until. (optional)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;) (optional)
     * @param  string $resolution Specifies the data granularity of the request. Available resolutions: minute, hour, day, week or month.  Limits: - 3 hour limit for “minute” resolution - 1 week limit for “hour” resolution - 6 month limit for “day” resolution - 1 year limit for \&quot;week\&quot; resolution - 3 year limit for “month” resolution (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationsUsageData'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApplicationsUsageDataRequest($application_uuid, $from = null, $to = null, $filter = null, $resolution = null, string $contentType = self::contentTypes['getApplicationsUsageData'][0])
    {

        // verify the required parameter 'application_uuid' is set
        if ($application_uuid === null || (is_array($application_uuid) && count($application_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $application_uuid when calling getApplicationsUsageData'
            );
        }



        


        $resourcePath = '/applications/{applicationUuid}/metrics/usage/data';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from,
            'from', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $to,
            'to', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            'filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $resolution,
            'resolution', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($application_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'applicationUuid' . '}',
                ObjectSerializer::toPathValue($application_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApplicationsUsageDataByEnvironment
     *
     * Retrieves usage data (views or visits) for an application, broken down by environment.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $from Specifies relative or absolute time period to retrieve results from. (Default value -7d) (optional)
     * @param  string $to Optionally specifies relative or absolute time period to retrieve results until. (optional)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;) (optional)
     * @param  string $resolution Specifies the data granularity of the request. Available resolutions: minute, hour, day, week or month.  Limits: - 3 hour limit for “minute” resolution - 1 week limit for “hour” resolution - 6 month limit for “day” resolution - 1 year limit for \&quot;week\&quot; resolution - 3 year limit for “month” resolution (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationsUsageDataByEnvironment'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\ApplicationUsageMetric|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error
     */
    public function getApplicationsUsageDataByEnvironment($application_uuid, $from = null, $to = null, $filter = null, $resolution = null, string $contentType = self::contentTypes['getApplicationsUsageDataByEnvironment'][0])
    {
        list($response) = $this->getApplicationsUsageDataByEnvironmentWithHttpInfo($application_uuid, $from, $to, $filter, $resolution, $contentType);
        return $response;
    }

    /**
     * Operation getApplicationsUsageDataByEnvironmentWithHttpInfo
     *
     * Retrieves usage data (views or visits) for an application, broken down by environment.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $from Specifies relative or absolute time period to retrieve results from. (Default value -7d) (optional)
     * @param  string $to Optionally specifies relative or absolute time period to retrieve results until. (optional)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;) (optional)
     * @param  string $resolution Specifies the data granularity of the request. Available resolutions: minute, hour, day, week or month.  Limits: - 3 hour limit for “minute” resolution - 1 week limit for “hour” resolution - 6 month limit for “day” resolution - 1 year limit for \&quot;week\&quot; resolution - 3 year limit for “month” resolution (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationsUsageDataByEnvironment'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\ApplicationUsageMetric|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApplicationsUsageDataByEnvironmentWithHttpInfo($application_uuid, $from = null, $to = null, $filter = null, $resolution = null, string $contentType = self::contentTypes['getApplicationsUsageDataByEnvironment'][0])
    {
        $request = $this->getApplicationsUsageDataByEnvironmentRequest($application_uuid, $from, $to, $filter, $resolution, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Acquia\CloudApi\Model\ApplicationUsageMetric' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\ApplicationUsageMetric' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\ApplicationUsageMetric', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\ApplicationUsageMetric';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\ApplicationUsageMetric',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApplicationsUsageDataByEnvironmentAsync
     *
     * Retrieves usage data (views or visits) for an application, broken down by environment.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $from Specifies relative or absolute time period to retrieve results from. (Default value -7d) (optional)
     * @param  string $to Optionally specifies relative or absolute time period to retrieve results until. (optional)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;) (optional)
     * @param  string $resolution Specifies the data granularity of the request. Available resolutions: minute, hour, day, week or month.  Limits: - 3 hour limit for “minute” resolution - 1 week limit for “hour” resolution - 6 month limit for “day” resolution - 1 year limit for \&quot;week\&quot; resolution - 3 year limit for “month” resolution (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationsUsageDataByEnvironment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApplicationsUsageDataByEnvironmentAsync($application_uuid, $from = null, $to = null, $filter = null, $resolution = null, string $contentType = self::contentTypes['getApplicationsUsageDataByEnvironment'][0])
    {
        return $this->getApplicationsUsageDataByEnvironmentAsyncWithHttpInfo($application_uuid, $from, $to, $filter, $resolution, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApplicationsUsageDataByEnvironmentAsyncWithHttpInfo
     *
     * Retrieves usage data (views or visits) for an application, broken down by environment.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $from Specifies relative or absolute time period to retrieve results from. (Default value -7d) (optional)
     * @param  string $to Optionally specifies relative or absolute time period to retrieve results until. (optional)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;) (optional)
     * @param  string $resolution Specifies the data granularity of the request. Available resolutions: minute, hour, day, week or month.  Limits: - 3 hour limit for “minute” resolution - 1 week limit for “hour” resolution - 6 month limit for “day” resolution - 1 year limit for \&quot;week\&quot; resolution - 3 year limit for “month” resolution (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationsUsageDataByEnvironment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApplicationsUsageDataByEnvironmentAsyncWithHttpInfo($application_uuid, $from = null, $to = null, $filter = null, $resolution = null, string $contentType = self::contentTypes['getApplicationsUsageDataByEnvironment'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\ApplicationUsageMetric';
        $request = $this->getApplicationsUsageDataByEnvironmentRequest($application_uuid, $from, $to, $filter, $resolution, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApplicationsUsageDataByEnvironment'
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $from Specifies relative or absolute time period to retrieve results from. (Default value -7d) (optional)
     * @param  string $to Optionally specifies relative or absolute time period to retrieve results until. (optional)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;) (optional)
     * @param  string $resolution Specifies the data granularity of the request. Available resolutions: minute, hour, day, week or month.  Limits: - 3 hour limit for “minute” resolution - 1 week limit for “hour” resolution - 6 month limit for “day” resolution - 1 year limit for \&quot;week\&quot; resolution - 3 year limit for “month” resolution (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationsUsageDataByEnvironment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApplicationsUsageDataByEnvironmentRequest($application_uuid, $from = null, $to = null, $filter = null, $resolution = null, string $contentType = self::contentTypes['getApplicationsUsageDataByEnvironment'][0])
    {

        // verify the required parameter 'application_uuid' is set
        if ($application_uuid === null || (is_array($application_uuid) && count($application_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $application_uuid when calling getApplicationsUsageDataByEnvironment'
            );
        }



        


        $resourcePath = '/applications/{applicationUuid}/metrics/usage/data-by-environment';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from,
            'from', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $to,
            'to', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            'filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $resolution,
            'resolution', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($application_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'applicationUuid' . '}',
                ObjectSerializer::toPathValue($application_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApplicationsUsageLinks
     *
     * Retrieves traversal links for detailed metrics on usage (views and visits) of your application.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationsUsageLinks'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\Usage|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error
     */
    public function getApplicationsUsageLinks($application_uuid, string $contentType = self::contentTypes['getApplicationsUsageLinks'][0])
    {
        list($response) = $this->getApplicationsUsageLinksWithHttpInfo($application_uuid, $contentType);
        return $response;
    }

    /**
     * Operation getApplicationsUsageLinksWithHttpInfo
     *
     * Retrieves traversal links for detailed metrics on usage (views and visits) of your application.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationsUsageLinks'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\Usage|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApplicationsUsageLinksWithHttpInfo($application_uuid, string $contentType = self::contentTypes['getApplicationsUsageLinks'][0])
    {
        $request = $this->getApplicationsUsageLinksRequest($application_uuid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Acquia\CloudApi\Model\Usage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Usage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Usage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\Usage';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Usage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApplicationsUsageLinksAsync
     *
     * Retrieves traversal links for detailed metrics on usage (views and visits) of your application.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationsUsageLinks'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApplicationsUsageLinksAsync($application_uuid, string $contentType = self::contentTypes['getApplicationsUsageLinks'][0])
    {
        return $this->getApplicationsUsageLinksAsyncWithHttpInfo($application_uuid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApplicationsUsageLinksAsyncWithHttpInfo
     *
     * Retrieves traversal links for detailed metrics on usage (views and visits) of your application.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationsUsageLinks'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApplicationsUsageLinksAsyncWithHttpInfo($application_uuid, string $contentType = self::contentTypes['getApplicationsUsageLinks'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\Usage';
        $request = $this->getApplicationsUsageLinksRequest($application_uuid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApplicationsUsageLinks'
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationsUsageLinks'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApplicationsUsageLinksRequest($application_uuid, string $contentType = self::contentTypes['getApplicationsUsageLinks'][0])
    {

        // verify the required parameter 'application_uuid' is set
        if ($application_uuid === null || (is_array($application_uuid) && count($application_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $application_uuid when calling getApplicationsUsageLinks'
            );
        }


        $resourcePath = '/applications/{applicationUuid}/metrics/usage';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($application_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'applicationUuid' . '}',
                ObjectSerializer::toPathValue($application_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApplicationsUsageMetricData
     *
     * Retrieves aggregate usage metric data (views or visits) for an application..
     *
     * @param  string $usage_metric A usage data metric type. (required)
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $from Specifies relative or absolute time period to retrieve results from. (Default value -7d) (optional)
     * @param  string $to Optionally specifies relative or absolute time period to retrieve results until. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationsUsageMetricData'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\ApplicationUsageMetric|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error
     */
    public function getApplicationsUsageMetricData($usage_metric, $application_uuid, $from = null, $to = null, string $contentType = self::contentTypes['getApplicationsUsageMetricData'][0])
    {
        list($response) = $this->getApplicationsUsageMetricDataWithHttpInfo($usage_metric, $application_uuid, $from, $to, $contentType);
        return $response;
    }

    /**
     * Operation getApplicationsUsageMetricDataWithHttpInfo
     *
     * Retrieves aggregate usage metric data (views or visits) for an application..
     *
     * @param  string $usage_metric A usage data metric type. (required)
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $from Specifies relative or absolute time period to retrieve results from. (Default value -7d) (optional)
     * @param  string $to Optionally specifies relative or absolute time period to retrieve results until. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationsUsageMetricData'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\ApplicationUsageMetric|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApplicationsUsageMetricDataWithHttpInfo($usage_metric, $application_uuid, $from = null, $to = null, string $contentType = self::contentTypes['getApplicationsUsageMetricData'][0])
    {
        $request = $this->getApplicationsUsageMetricDataRequest($usage_metric, $application_uuid, $from, $to, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Acquia\CloudApi\Model\ApplicationUsageMetric' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\ApplicationUsageMetric' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\ApplicationUsageMetric', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\ApplicationUsageMetric';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\ApplicationUsageMetric',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApplicationsUsageMetricDataAsync
     *
     * Retrieves aggregate usage metric data (views or visits) for an application..
     *
     * @param  string $usage_metric A usage data metric type. (required)
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $from Specifies relative or absolute time period to retrieve results from. (Default value -7d) (optional)
     * @param  string $to Optionally specifies relative or absolute time period to retrieve results until. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationsUsageMetricData'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApplicationsUsageMetricDataAsync($usage_metric, $application_uuid, $from = null, $to = null, string $contentType = self::contentTypes['getApplicationsUsageMetricData'][0])
    {
        return $this->getApplicationsUsageMetricDataAsyncWithHttpInfo($usage_metric, $application_uuid, $from, $to, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApplicationsUsageMetricDataAsyncWithHttpInfo
     *
     * Retrieves aggregate usage metric data (views or visits) for an application..
     *
     * @param  string $usage_metric A usage data metric type. (required)
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $from Specifies relative or absolute time period to retrieve results from. (Default value -7d) (optional)
     * @param  string $to Optionally specifies relative or absolute time period to retrieve results until. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationsUsageMetricData'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApplicationsUsageMetricDataAsyncWithHttpInfo($usage_metric, $application_uuid, $from = null, $to = null, string $contentType = self::contentTypes['getApplicationsUsageMetricData'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\ApplicationUsageMetric';
        $request = $this->getApplicationsUsageMetricDataRequest($usage_metric, $application_uuid, $from, $to, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApplicationsUsageMetricData'
     *
     * @param  string $usage_metric A usage data metric type. (required)
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $from Specifies relative or absolute time period to retrieve results from. (Default value -7d) (optional)
     * @param  string $to Optionally specifies relative or absolute time period to retrieve results until. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationsUsageMetricData'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApplicationsUsageMetricDataRequest($usage_metric, $application_uuid, $from = null, $to = null, string $contentType = self::contentTypes['getApplicationsUsageMetricData'][0])
    {

        // verify the required parameter 'usage_metric' is set
        if ($usage_metric === null || (is_array($usage_metric) && count($usage_metric) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $usage_metric when calling getApplicationsUsageMetricData'
            );
        }

        // verify the required parameter 'application_uuid' is set
        if ($application_uuid === null || (is_array($application_uuid) && count($application_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $application_uuid when calling getApplicationsUsageMetricData'
            );
        }




        $resourcePath = '/applications/{applicationUuid}/metrics/usage/{usageMetric}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from,
            'from', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $to,
            'to', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($usage_metric !== null) {
            $resourcePath = str_replace(
                '{' . 'usageMetric' . '}',
                ObjectSerializer::toPathValue($usage_metric),
                $resourcePath
            );
        }
        // path params
        if ($application_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'applicationUuid' . '}',
                ObjectSerializer::toPathValue($application_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApplicationsUsageViewsDataByEnvironment
     *
     * Retrieves views data for an application, broken down by environment.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $from Specifies relative or absolute time period to retrieve results from. (Default value -7d) (optional)
     * @param  string $to Optionally specifies relative or absolute time period to retrieve results until. (optional)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;) (optional)
     * @param  string $resolution Specifies the data granularity of the request. Available resolutions: minute, hour, day, week or month.  Limits: - 3 hour limit for “minute” resolution - 1 week limit for “hour” resolution - 6 month limit for “day” resolution - 1 year limit for \&quot;week\&quot; resolution - 3 year limit for “month” resolution (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationsUsageViewsDataByEnvironment'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\ApplicationUsageMetric|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error
     */
    public function getApplicationsUsageViewsDataByEnvironment($application_uuid, $from = null, $to = null, $filter = null, $resolution = null, string $contentType = self::contentTypes['getApplicationsUsageViewsDataByEnvironment'][0])
    {
        list($response) = $this->getApplicationsUsageViewsDataByEnvironmentWithHttpInfo($application_uuid, $from, $to, $filter, $resolution, $contentType);
        return $response;
    }

    /**
     * Operation getApplicationsUsageViewsDataByEnvironmentWithHttpInfo
     *
     * Retrieves views data for an application, broken down by environment.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $from Specifies relative or absolute time period to retrieve results from. (Default value -7d) (optional)
     * @param  string $to Optionally specifies relative or absolute time period to retrieve results until. (optional)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;) (optional)
     * @param  string $resolution Specifies the data granularity of the request. Available resolutions: minute, hour, day, week or month.  Limits: - 3 hour limit for “minute” resolution - 1 week limit for “hour” resolution - 6 month limit for “day” resolution - 1 year limit for \&quot;week\&quot; resolution - 3 year limit for “month” resolution (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationsUsageViewsDataByEnvironment'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\ApplicationUsageMetric|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApplicationsUsageViewsDataByEnvironmentWithHttpInfo($application_uuid, $from = null, $to = null, $filter = null, $resolution = null, string $contentType = self::contentTypes['getApplicationsUsageViewsDataByEnvironment'][0])
    {
        $request = $this->getApplicationsUsageViewsDataByEnvironmentRequest($application_uuid, $from, $to, $filter, $resolution, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Acquia\CloudApi\Model\ApplicationUsageMetric' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\ApplicationUsageMetric' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\ApplicationUsageMetric', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\ApplicationUsageMetric';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\ApplicationUsageMetric',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApplicationsUsageViewsDataByEnvironmentAsync
     *
     * Retrieves views data for an application, broken down by environment.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $from Specifies relative or absolute time period to retrieve results from. (Default value -7d) (optional)
     * @param  string $to Optionally specifies relative or absolute time period to retrieve results until. (optional)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;) (optional)
     * @param  string $resolution Specifies the data granularity of the request. Available resolutions: minute, hour, day, week or month.  Limits: - 3 hour limit for “minute” resolution - 1 week limit for “hour” resolution - 6 month limit for “day” resolution - 1 year limit for \&quot;week\&quot; resolution - 3 year limit for “month” resolution (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationsUsageViewsDataByEnvironment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApplicationsUsageViewsDataByEnvironmentAsync($application_uuid, $from = null, $to = null, $filter = null, $resolution = null, string $contentType = self::contentTypes['getApplicationsUsageViewsDataByEnvironment'][0])
    {
        return $this->getApplicationsUsageViewsDataByEnvironmentAsyncWithHttpInfo($application_uuid, $from, $to, $filter, $resolution, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApplicationsUsageViewsDataByEnvironmentAsyncWithHttpInfo
     *
     * Retrieves views data for an application, broken down by environment.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $from Specifies relative or absolute time period to retrieve results from. (Default value -7d) (optional)
     * @param  string $to Optionally specifies relative or absolute time period to retrieve results until. (optional)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;) (optional)
     * @param  string $resolution Specifies the data granularity of the request. Available resolutions: minute, hour, day, week or month.  Limits: - 3 hour limit for “minute” resolution - 1 week limit for “hour” resolution - 6 month limit for “day” resolution - 1 year limit for \&quot;week\&quot; resolution - 3 year limit for “month” resolution (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationsUsageViewsDataByEnvironment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApplicationsUsageViewsDataByEnvironmentAsyncWithHttpInfo($application_uuid, $from = null, $to = null, $filter = null, $resolution = null, string $contentType = self::contentTypes['getApplicationsUsageViewsDataByEnvironment'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\ApplicationUsageMetric';
        $request = $this->getApplicationsUsageViewsDataByEnvironmentRequest($application_uuid, $from, $to, $filter, $resolution, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApplicationsUsageViewsDataByEnvironment'
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $from Specifies relative or absolute time period to retrieve results from. (Default value -7d) (optional)
     * @param  string $to Optionally specifies relative or absolute time period to retrieve results until. (optional)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;) (optional)
     * @param  string $resolution Specifies the data granularity of the request. Available resolutions: minute, hour, day, week or month.  Limits: - 3 hour limit for “minute” resolution - 1 week limit for “hour” resolution - 6 month limit for “day” resolution - 1 year limit for \&quot;week\&quot; resolution - 3 year limit for “month” resolution (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationsUsageViewsDataByEnvironment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApplicationsUsageViewsDataByEnvironmentRequest($application_uuid, $from = null, $to = null, $filter = null, $resolution = null, string $contentType = self::contentTypes['getApplicationsUsageViewsDataByEnvironment'][0])
    {

        // verify the required parameter 'application_uuid' is set
        if ($application_uuid === null || (is_array($application_uuid) && count($application_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $application_uuid when calling getApplicationsUsageViewsDataByEnvironment'
            );
        }



        


        $resourcePath = '/applications/{applicationUuid}/metrics/usage/views-by-environment';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from,
            'from', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $to,
            'to', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            'filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $resolution,
            'resolution', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($application_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'applicationUuid' . '}',
                ObjectSerializer::toPathValue($application_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApplicationsUsageVisitsDataByEnvironment
     *
     * Retrieves visits data for an application, broken down by environment.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $from Specifies relative or absolute time period to retrieve results from. (Default value -7d) (optional)
     * @param  string $to Optionally specifies relative or absolute time period to retrieve results until. (optional)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;) (optional)
     * @param  string $resolution Specifies the data granularity of the request. Available resolutions: minute, hour, day, week or month.  Limits: - 3 hour limit for “minute” resolution - 1 week limit for “hour” resolution - 6 month limit for “day” resolution - 1 year limit for \&quot;week\&quot; resolution - 3 year limit for “month” resolution (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationsUsageVisitsDataByEnvironment'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\ApplicationUsageMetric|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error
     */
    public function getApplicationsUsageVisitsDataByEnvironment($application_uuid, $from = null, $to = null, $filter = null, $resolution = null, string $contentType = self::contentTypes['getApplicationsUsageVisitsDataByEnvironment'][0])
    {
        list($response) = $this->getApplicationsUsageVisitsDataByEnvironmentWithHttpInfo($application_uuid, $from, $to, $filter, $resolution, $contentType);
        return $response;
    }

    /**
     * Operation getApplicationsUsageVisitsDataByEnvironmentWithHttpInfo
     *
     * Retrieves visits data for an application, broken down by environment.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $from Specifies relative or absolute time period to retrieve results from. (Default value -7d) (optional)
     * @param  string $to Optionally specifies relative or absolute time period to retrieve results until. (optional)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;) (optional)
     * @param  string $resolution Specifies the data granularity of the request. Available resolutions: minute, hour, day, week or month.  Limits: - 3 hour limit for “minute” resolution - 1 week limit for “hour” resolution - 6 month limit for “day” resolution - 1 year limit for \&quot;week\&quot; resolution - 3 year limit for “month” resolution (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationsUsageVisitsDataByEnvironment'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\ApplicationUsageMetric|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApplicationsUsageVisitsDataByEnvironmentWithHttpInfo($application_uuid, $from = null, $to = null, $filter = null, $resolution = null, string $contentType = self::contentTypes['getApplicationsUsageVisitsDataByEnvironment'][0])
    {
        $request = $this->getApplicationsUsageVisitsDataByEnvironmentRequest($application_uuid, $from, $to, $filter, $resolution, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Acquia\CloudApi\Model\ApplicationUsageMetric' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\ApplicationUsageMetric' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\ApplicationUsageMetric', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\ApplicationUsageMetric';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\ApplicationUsageMetric',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApplicationsUsageVisitsDataByEnvironmentAsync
     *
     * Retrieves visits data for an application, broken down by environment.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $from Specifies relative or absolute time period to retrieve results from. (Default value -7d) (optional)
     * @param  string $to Optionally specifies relative or absolute time period to retrieve results until. (optional)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;) (optional)
     * @param  string $resolution Specifies the data granularity of the request. Available resolutions: minute, hour, day, week or month.  Limits: - 3 hour limit for “minute” resolution - 1 week limit for “hour” resolution - 6 month limit for “day” resolution - 1 year limit for \&quot;week\&quot; resolution - 3 year limit for “month” resolution (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationsUsageVisitsDataByEnvironment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApplicationsUsageVisitsDataByEnvironmentAsync($application_uuid, $from = null, $to = null, $filter = null, $resolution = null, string $contentType = self::contentTypes['getApplicationsUsageVisitsDataByEnvironment'][0])
    {
        return $this->getApplicationsUsageVisitsDataByEnvironmentAsyncWithHttpInfo($application_uuid, $from, $to, $filter, $resolution, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApplicationsUsageVisitsDataByEnvironmentAsyncWithHttpInfo
     *
     * Retrieves visits data for an application, broken down by environment.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $from Specifies relative or absolute time period to retrieve results from. (Default value -7d) (optional)
     * @param  string $to Optionally specifies relative or absolute time period to retrieve results until. (optional)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;) (optional)
     * @param  string $resolution Specifies the data granularity of the request. Available resolutions: minute, hour, day, week or month.  Limits: - 3 hour limit for “minute” resolution - 1 week limit for “hour” resolution - 6 month limit for “day” resolution - 1 year limit for \&quot;week\&quot; resolution - 3 year limit for “month” resolution (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationsUsageVisitsDataByEnvironment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApplicationsUsageVisitsDataByEnvironmentAsyncWithHttpInfo($application_uuid, $from = null, $to = null, $filter = null, $resolution = null, string $contentType = self::contentTypes['getApplicationsUsageVisitsDataByEnvironment'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\ApplicationUsageMetric';
        $request = $this->getApplicationsUsageVisitsDataByEnvironmentRequest($application_uuid, $from, $to, $filter, $resolution, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApplicationsUsageVisitsDataByEnvironment'
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $from Specifies relative or absolute time period to retrieve results from. (Default value -7d) (optional)
     * @param  string $to Optionally specifies relative or absolute time period to retrieve results until. (optional)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;) (optional)
     * @param  string $resolution Specifies the data granularity of the request. Available resolutions: minute, hour, day, week or month.  Limits: - 3 hour limit for “minute” resolution - 1 week limit for “hour” resolution - 6 month limit for “day” resolution - 1 year limit for \&quot;week\&quot; resolution - 3 year limit for “month” resolution (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationsUsageVisitsDataByEnvironment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApplicationsUsageVisitsDataByEnvironmentRequest($application_uuid, $from = null, $to = null, $filter = null, $resolution = null, string $contentType = self::contentTypes['getApplicationsUsageVisitsDataByEnvironment'][0])
    {

        // verify the required parameter 'application_uuid' is set
        if ($application_uuid === null || (is_array($application_uuid) && count($application_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $application_uuid when calling getApplicationsUsageVisitsDataByEnvironment'
            );
        }



        


        $resourcePath = '/applications/{applicationUuid}/metrics/usage/visits-by-environment';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from,
            'from', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $to,
            'to', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            'filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $resolution,
            'resolution', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($application_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'applicationUuid' . '}',
                ObjectSerializer::toPathValue($application_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getArtifactByApplicationUuidAndId
     *
     * Return details about a specific artifact.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $artifact_id An ID that uniquely identifies an artifact. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getArtifactByApplicationUuidAndId'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\Artifact|\Acquia\CloudApi\Model\Error
     */
    public function getArtifactByApplicationUuidAndId($application_uuid, $artifact_id, string $contentType = self::contentTypes['getArtifactByApplicationUuidAndId'][0])
    {
        list($response) = $this->getArtifactByApplicationUuidAndIdWithHttpInfo($application_uuid, $artifact_id, $contentType);
        return $response;
    }

    /**
     * Operation getArtifactByApplicationUuidAndIdWithHttpInfo
     *
     * Return details about a specific artifact.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $artifact_id An ID that uniquely identifies an artifact. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getArtifactByApplicationUuidAndId'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\Artifact|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getArtifactByApplicationUuidAndIdWithHttpInfo($application_uuid, $artifact_id, string $contentType = self::contentTypes['getArtifactByApplicationUuidAndId'][0])
    {
        $request = $this->getArtifactByApplicationUuidAndIdRequest($application_uuid, $artifact_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Acquia\CloudApi\Model\Artifact' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Artifact' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Artifact', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\Artifact';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Artifact',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getArtifactByApplicationUuidAndIdAsync
     *
     * Return details about a specific artifact.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $artifact_id An ID that uniquely identifies an artifact. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getArtifactByApplicationUuidAndId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getArtifactByApplicationUuidAndIdAsync($application_uuid, $artifact_id, string $contentType = self::contentTypes['getArtifactByApplicationUuidAndId'][0])
    {
        return $this->getArtifactByApplicationUuidAndIdAsyncWithHttpInfo($application_uuid, $artifact_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getArtifactByApplicationUuidAndIdAsyncWithHttpInfo
     *
     * Return details about a specific artifact.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $artifact_id An ID that uniquely identifies an artifact. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getArtifactByApplicationUuidAndId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getArtifactByApplicationUuidAndIdAsyncWithHttpInfo($application_uuid, $artifact_id, string $contentType = self::contentTypes['getArtifactByApplicationUuidAndId'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\Artifact';
        $request = $this->getArtifactByApplicationUuidAndIdRequest($application_uuid, $artifact_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getArtifactByApplicationUuidAndId'
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $artifact_id An ID that uniquely identifies an artifact. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getArtifactByApplicationUuidAndId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getArtifactByApplicationUuidAndIdRequest($application_uuid, $artifact_id, string $contentType = self::contentTypes['getArtifactByApplicationUuidAndId'][0])
    {

        // verify the required parameter 'application_uuid' is set
        if ($application_uuid === null || (is_array($application_uuid) && count($application_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $application_uuid when calling getArtifactByApplicationUuidAndId'
            );
        }

        // verify the required parameter 'artifact_id' is set
        if ($artifact_id === null || (is_array($artifact_id) && count($artifact_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $artifact_id when calling getArtifactByApplicationUuidAndId'
            );
        }


        $resourcePath = '/applications/{applicationUuid}/artifacts/{artifactId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($application_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'applicationUuid' . '}',
                ObjectSerializer::toPathValue($application_uuid),
                $resourcePath
            );
        }
        // path params
        if ($artifact_id !== null) {
            $resourcePath = str_replace(
                '{' . 'artifactId' . '}',
                ObjectSerializer::toPathValue($artifact_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getArtifactsByApplicationUuid
     *
     * Return application artifacts.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $sort A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable. (optional)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;) (optional)
     * @param  int $limit The maximum number of items to return. (optional)
     * @param  int $offset An integer to signify the offset to paginate from. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getArtifactsByApplicationUuid'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\Artifacts|\Acquia\CloudApi\Model\Error
     */
    public function getArtifactsByApplicationUuid($application_uuid, $sort = null, $filter = null, $limit = null, $offset = null, string $contentType = self::contentTypes['getArtifactsByApplicationUuid'][0])
    {
        list($response) = $this->getArtifactsByApplicationUuidWithHttpInfo($application_uuid, $sort, $filter, $limit, $offset, $contentType);
        return $response;
    }

    /**
     * Operation getArtifactsByApplicationUuidWithHttpInfo
     *
     * Return application artifacts.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $sort A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable. (optional)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;) (optional)
     * @param  int $limit The maximum number of items to return. (optional)
     * @param  int $offset An integer to signify the offset to paginate from. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getArtifactsByApplicationUuid'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\Artifacts|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getArtifactsByApplicationUuidWithHttpInfo($application_uuid, $sort = null, $filter = null, $limit = null, $offset = null, string $contentType = self::contentTypes['getArtifactsByApplicationUuid'][0])
    {
        $request = $this->getArtifactsByApplicationUuidRequest($application_uuid, $sort, $filter, $limit, $offset, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Acquia\CloudApi\Model\Artifacts' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Artifacts' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Artifacts', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\Artifacts';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Artifacts',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getArtifactsByApplicationUuidAsync
     *
     * Return application artifacts.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $sort A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable. (optional)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;) (optional)
     * @param  int $limit The maximum number of items to return. (optional)
     * @param  int $offset An integer to signify the offset to paginate from. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getArtifactsByApplicationUuid'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getArtifactsByApplicationUuidAsync($application_uuid, $sort = null, $filter = null, $limit = null, $offset = null, string $contentType = self::contentTypes['getArtifactsByApplicationUuid'][0])
    {
        return $this->getArtifactsByApplicationUuidAsyncWithHttpInfo($application_uuid, $sort, $filter, $limit, $offset, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getArtifactsByApplicationUuidAsyncWithHttpInfo
     *
     * Return application artifacts.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $sort A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable. (optional)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;) (optional)
     * @param  int $limit The maximum number of items to return. (optional)
     * @param  int $offset An integer to signify the offset to paginate from. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getArtifactsByApplicationUuid'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getArtifactsByApplicationUuidAsyncWithHttpInfo($application_uuid, $sort = null, $filter = null, $limit = null, $offset = null, string $contentType = self::contentTypes['getArtifactsByApplicationUuid'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\Artifacts';
        $request = $this->getArtifactsByApplicationUuidRequest($application_uuid, $sort, $filter, $limit, $offset, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getArtifactsByApplicationUuid'
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $sort A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable. (optional)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;) (optional)
     * @param  int $limit The maximum number of items to return. (optional)
     * @param  int $offset An integer to signify the offset to paginate from. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getArtifactsByApplicationUuid'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getArtifactsByApplicationUuidRequest($application_uuid, $sort = null, $filter = null, $limit = null, $offset = null, string $contentType = self::contentTypes['getArtifactsByApplicationUuid'][0])
    {

        // verify the required parameter 'application_uuid' is set
        if ($application_uuid === null || (is_array($application_uuid) && count($application_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $application_uuid when calling getArtifactsByApplicationUuid'
            );
        }

        
        



        $resourcePath = '/applications/{applicationUuid}/artifacts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            'filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($application_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'applicationUuid' . '}',
                ObjectSerializer::toPathValue($application_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCodeByApplicationUuid
     *
     * Return application branches and release tags.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $sort A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable. (optional)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCodeByApplicationUuid'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\Code|\Acquia\CloudApi\Model\Error
     */
    public function getCodeByApplicationUuid($application_uuid, $sort = null, $filter = null, string $contentType = self::contentTypes['getCodeByApplicationUuid'][0])
    {
        list($response) = $this->getCodeByApplicationUuidWithHttpInfo($application_uuid, $sort, $filter, $contentType);
        return $response;
    }

    /**
     * Operation getCodeByApplicationUuidWithHttpInfo
     *
     * Return application branches and release tags.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $sort A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable. (optional)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCodeByApplicationUuid'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\Code|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCodeByApplicationUuidWithHttpInfo($application_uuid, $sort = null, $filter = null, string $contentType = self::contentTypes['getCodeByApplicationUuid'][0])
    {
        $request = $this->getCodeByApplicationUuidRequest($application_uuid, $sort, $filter, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Acquia\CloudApi\Model\Code' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Code' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Code', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\Code';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Code',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCodeByApplicationUuidAsync
     *
     * Return application branches and release tags.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $sort A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable. (optional)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCodeByApplicationUuid'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCodeByApplicationUuidAsync($application_uuid, $sort = null, $filter = null, string $contentType = self::contentTypes['getCodeByApplicationUuid'][0])
    {
        return $this->getCodeByApplicationUuidAsyncWithHttpInfo($application_uuid, $sort, $filter, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCodeByApplicationUuidAsyncWithHttpInfo
     *
     * Return application branches and release tags.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $sort A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable. (optional)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCodeByApplicationUuid'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCodeByApplicationUuidAsyncWithHttpInfo($application_uuid, $sort = null, $filter = null, string $contentType = self::contentTypes['getCodeByApplicationUuid'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\Code';
        $request = $this->getCodeByApplicationUuidRequest($application_uuid, $sort, $filter, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCodeByApplicationUuid'
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $sort A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable. (optional)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCodeByApplicationUuid'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCodeByApplicationUuidRequest($application_uuid, $sort = null, $filter = null, string $contentType = self::contentTypes['getCodeByApplicationUuid'][0])
    {

        // verify the required parameter 'application_uuid' is set
        if ($application_uuid === null || (is_array($application_uuid) && count($application_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $application_uuid when calling getCodeByApplicationUuid'
            );
        }

        
        

        $resourcePath = '/applications/{applicationUuid}/code';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            'filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($application_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'applicationUuid' . '}',
                ObjectSerializer::toPathValue($application_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApplicationAssociateEmailDomain
     *
     * Associates an email domain with an Application.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $domain_registration_uuid The Domain Registration universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApplicationAssociateEmailDomain'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error
     */
    public function postApplicationAssociateEmailDomain($application_uuid, $domain_registration_uuid, string $contentType = self::contentTypes['postApplicationAssociateEmailDomain'][0])
    {
        list($response) = $this->postApplicationAssociateEmailDomainWithHttpInfo($application_uuid, $domain_registration_uuid, $contentType);
        return $response;
    }

    /**
     * Operation postApplicationAssociateEmailDomainWithHttpInfo
     *
     * Associates an email domain with an Application.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $domain_registration_uuid The Domain Registration universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApplicationAssociateEmailDomain'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApplicationAssociateEmailDomainWithHttpInfo($application_uuid, $domain_registration_uuid, string $contentType = self::contentTypes['postApplicationAssociateEmailDomain'][0])
    {
        $request = $this->postApplicationAssociateEmailDomainRequest($application_uuid, $domain_registration_uuid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Acquia\CloudApi\Model\MessageWithLinks' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\MessageWithLinks' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\MessageWithLinks', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\MessageWithLinks',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postApplicationAssociateEmailDomainAsync
     *
     * Associates an email domain with an Application.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $domain_registration_uuid The Domain Registration universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApplicationAssociateEmailDomain'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApplicationAssociateEmailDomainAsync($application_uuid, $domain_registration_uuid, string $contentType = self::contentTypes['postApplicationAssociateEmailDomain'][0])
    {
        return $this->postApplicationAssociateEmailDomainAsyncWithHttpInfo($application_uuid, $domain_registration_uuid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApplicationAssociateEmailDomainAsyncWithHttpInfo
     *
     * Associates an email domain with an Application.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $domain_registration_uuid The Domain Registration universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApplicationAssociateEmailDomain'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApplicationAssociateEmailDomainAsyncWithHttpInfo($application_uuid, $domain_registration_uuid, string $contentType = self::contentTypes['postApplicationAssociateEmailDomain'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
        $request = $this->postApplicationAssociateEmailDomainRequest($application_uuid, $domain_registration_uuid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApplicationAssociateEmailDomain'
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $domain_registration_uuid The Domain Registration universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApplicationAssociateEmailDomain'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApplicationAssociateEmailDomainRequest($application_uuid, $domain_registration_uuid, string $contentType = self::contentTypes['postApplicationAssociateEmailDomain'][0])
    {

        // verify the required parameter 'application_uuid' is set
        if ($application_uuid === null || (is_array($application_uuid) && count($application_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $application_uuid when calling postApplicationAssociateEmailDomain'
            );
        }

        // verify the required parameter 'domain_registration_uuid' is set
        if ($domain_registration_uuid === null || (is_array($domain_registration_uuid) && count($domain_registration_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $domain_registration_uuid when calling postApplicationAssociateEmailDomain'
            );
        }


        $resourcePath = '/applications/{applicationUuid}/email/domains/{domainRegistrationUuid}/actions/associate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($application_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'applicationUuid' . '}',
                ObjectSerializer::toPathValue($application_uuid),
                $resourcePath
            );
        }
        // path params
        if ($domain_registration_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'domainRegistrationUuid' . '}',
                ObjectSerializer::toPathValue($domain_registration_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApplicationDatabaseCreate
     *
     * Creates a database.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  \Acquia\CloudApi\Model\PostApplicationDatabaseCreateRequest $post_application_database_create_request post_application_database_create_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApplicationDatabaseCreate'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\ValidationError|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error
     */
    public function postApplicationDatabaseCreate($application_uuid, $post_application_database_create_request, string $contentType = self::contentTypes['postApplicationDatabaseCreate'][0])
    {
        list($response) = $this->postApplicationDatabaseCreateWithHttpInfo($application_uuid, $post_application_database_create_request, $contentType);
        return $response;
    }

    /**
     * Operation postApplicationDatabaseCreateWithHttpInfo
     *
     * Creates a database.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  \Acquia\CloudApi\Model\PostApplicationDatabaseCreateRequest $post_application_database_create_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApplicationDatabaseCreate'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\ValidationError|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApplicationDatabaseCreateWithHttpInfo($application_uuid, $post_application_database_create_request, string $contentType = self::contentTypes['postApplicationDatabaseCreate'][0])
    {
        $request = $this->postApplicationDatabaseCreateRequest($application_uuid, $post_application_database_create_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 202:
                    if ('\Acquia\CloudApi\Model\MessageWithLinks' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\MessageWithLinks' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\MessageWithLinks', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Acquia\CloudApi\Model\ValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\ValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\ValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\MessageWithLinks',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\ValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postApplicationDatabaseCreateAsync
     *
     * Creates a database.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  \Acquia\CloudApi\Model\PostApplicationDatabaseCreateRequest $post_application_database_create_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApplicationDatabaseCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApplicationDatabaseCreateAsync($application_uuid, $post_application_database_create_request, string $contentType = self::contentTypes['postApplicationDatabaseCreate'][0])
    {
        return $this->postApplicationDatabaseCreateAsyncWithHttpInfo($application_uuid, $post_application_database_create_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApplicationDatabaseCreateAsyncWithHttpInfo
     *
     * Creates a database.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  \Acquia\CloudApi\Model\PostApplicationDatabaseCreateRequest $post_application_database_create_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApplicationDatabaseCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApplicationDatabaseCreateAsyncWithHttpInfo($application_uuid, $post_application_database_create_request, string $contentType = self::contentTypes['postApplicationDatabaseCreate'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
        $request = $this->postApplicationDatabaseCreateRequest($application_uuid, $post_application_database_create_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApplicationDatabaseCreate'
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  \Acquia\CloudApi\Model\PostApplicationDatabaseCreateRequest $post_application_database_create_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApplicationDatabaseCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApplicationDatabaseCreateRequest($application_uuid, $post_application_database_create_request, string $contentType = self::contentTypes['postApplicationDatabaseCreate'][0])
    {

        // verify the required parameter 'application_uuid' is set
        if ($application_uuid === null || (is_array($application_uuid) && count($application_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $application_uuid when calling postApplicationDatabaseCreate'
            );
        }

        // verify the required parameter 'post_application_database_create_request' is set
        if ($post_application_database_create_request === null || (is_array($post_application_database_create_request) && count($post_application_database_create_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $post_application_database_create_request when calling postApplicationDatabaseCreate'
            );
        }


        $resourcePath = '/applications/{applicationUuid}/databases';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($application_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'applicationUuid' . '}',
                ObjectSerializer::toPathValue($application_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_application_database_create_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_application_database_create_request));
            } else {
                $httpBody = $post_application_database_create_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApplicationDatabaseDelete
     *
     * Drops (deletes) a database.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $name A name that uniquely identifies an entity. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApplicationDatabaseDelete'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\ValidationError|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error
     */
    public function postApplicationDatabaseDelete($application_uuid, $name, string $contentType = self::contentTypes['postApplicationDatabaseDelete'][0])
    {
        list($response) = $this->postApplicationDatabaseDeleteWithHttpInfo($application_uuid, $name, $contentType);
        return $response;
    }

    /**
     * Operation postApplicationDatabaseDeleteWithHttpInfo
     *
     * Drops (deletes) a database.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $name A name that uniquely identifies an entity. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApplicationDatabaseDelete'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\ValidationError|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApplicationDatabaseDeleteWithHttpInfo($application_uuid, $name, string $contentType = self::contentTypes['postApplicationDatabaseDelete'][0])
    {
        $request = $this->postApplicationDatabaseDeleteRequest($application_uuid, $name, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 202:
                    if ('\Acquia\CloudApi\Model\MessageWithLinks' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\MessageWithLinks' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\MessageWithLinks', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Acquia\CloudApi\Model\ValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\ValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\ValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\MessageWithLinks',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\ValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postApplicationDatabaseDeleteAsync
     *
     * Drops (deletes) a database.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $name A name that uniquely identifies an entity. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApplicationDatabaseDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApplicationDatabaseDeleteAsync($application_uuid, $name, string $contentType = self::contentTypes['postApplicationDatabaseDelete'][0])
    {
        return $this->postApplicationDatabaseDeleteAsyncWithHttpInfo($application_uuid, $name, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApplicationDatabaseDeleteAsyncWithHttpInfo
     *
     * Drops (deletes) a database.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $name A name that uniquely identifies an entity. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApplicationDatabaseDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApplicationDatabaseDeleteAsyncWithHttpInfo($application_uuid, $name, string $contentType = self::contentTypes['postApplicationDatabaseDelete'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
        $request = $this->postApplicationDatabaseDeleteRequest($application_uuid, $name, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApplicationDatabaseDelete'
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $name A name that uniquely identifies an entity. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApplicationDatabaseDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApplicationDatabaseDeleteRequest($application_uuid, $name, string $contentType = self::contentTypes['postApplicationDatabaseDelete'][0])
    {

        // verify the required parameter 'application_uuid' is set
        if ($application_uuid === null || (is_array($application_uuid) && count($application_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $application_uuid when calling postApplicationDatabaseDelete'
            );
        }

        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling postApplicationDatabaseDelete'
            );
        }


        $resourcePath = '/applications/{applicationUuid}/databases/{name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($application_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'applicationUuid' . '}',
                ObjectSerializer::toPathValue($application_uuid),
                $resourcePath
            );
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApplicationDatabaseErase
     *
     * Erases (truncates) a database.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $name A name that uniquely identifies an entity. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApplicationDatabaseErase'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\ValidationError|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error
     */
    public function postApplicationDatabaseErase($application_uuid, $name, string $contentType = self::contentTypes['postApplicationDatabaseErase'][0])
    {
        list($response) = $this->postApplicationDatabaseEraseWithHttpInfo($application_uuid, $name, $contentType);
        return $response;
    }

    /**
     * Operation postApplicationDatabaseEraseWithHttpInfo
     *
     * Erases (truncates) a database.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $name A name that uniquely identifies an entity. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApplicationDatabaseErase'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\ValidationError|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApplicationDatabaseEraseWithHttpInfo($application_uuid, $name, string $contentType = self::contentTypes['postApplicationDatabaseErase'][0])
    {
        $request = $this->postApplicationDatabaseEraseRequest($application_uuid, $name, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 202:
                    if ('\Acquia\CloudApi\Model\MessageWithLinks' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\MessageWithLinks' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\MessageWithLinks', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Acquia\CloudApi\Model\ValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\ValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\ValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\MessageWithLinks',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\ValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postApplicationDatabaseEraseAsync
     *
     * Erases (truncates) a database.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $name A name that uniquely identifies an entity. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApplicationDatabaseErase'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApplicationDatabaseEraseAsync($application_uuid, $name, string $contentType = self::contentTypes['postApplicationDatabaseErase'][0])
    {
        return $this->postApplicationDatabaseEraseAsyncWithHttpInfo($application_uuid, $name, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApplicationDatabaseEraseAsyncWithHttpInfo
     *
     * Erases (truncates) a database.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $name A name that uniquely identifies an entity. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApplicationDatabaseErase'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApplicationDatabaseEraseAsyncWithHttpInfo($application_uuid, $name, string $contentType = self::contentTypes['postApplicationDatabaseErase'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
        $request = $this->postApplicationDatabaseEraseRequest($application_uuid, $name, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApplicationDatabaseErase'
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $name A name that uniquely identifies an entity. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApplicationDatabaseErase'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApplicationDatabaseEraseRequest($application_uuid, $name, string $contentType = self::contentTypes['postApplicationDatabaseErase'][0])
    {

        // verify the required parameter 'application_uuid' is set
        if ($application_uuid === null || (is_array($application_uuid) && count($application_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $application_uuid when calling postApplicationDatabaseErase'
            );
        }

        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling postApplicationDatabaseErase'
            );
        }


        $resourcePath = '/applications/{applicationUuid}/databases/{name}/actions/erase';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($application_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'applicationUuid' . '}',
                ObjectSerializer::toPathValue($application_uuid),
                $resourcePath
            );
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApplicationDisassociateEmailDomain
     *
     * Disassociates an email domain with an Application.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $domain_registration_uuid The Domain Registration universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApplicationDisassociateEmailDomain'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error
     */
    public function postApplicationDisassociateEmailDomain($application_uuid, $domain_registration_uuid, string $contentType = self::contentTypes['postApplicationDisassociateEmailDomain'][0])
    {
        list($response) = $this->postApplicationDisassociateEmailDomainWithHttpInfo($application_uuid, $domain_registration_uuid, $contentType);
        return $response;
    }

    /**
     * Operation postApplicationDisassociateEmailDomainWithHttpInfo
     *
     * Disassociates an email domain with an Application.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $domain_registration_uuid The Domain Registration universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApplicationDisassociateEmailDomain'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApplicationDisassociateEmailDomainWithHttpInfo($application_uuid, $domain_registration_uuid, string $contentType = self::contentTypes['postApplicationDisassociateEmailDomain'][0])
    {
        $request = $this->postApplicationDisassociateEmailDomainRequest($application_uuid, $domain_registration_uuid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Acquia\CloudApi\Model\MessageWithLinks' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\MessageWithLinks' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\MessageWithLinks', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\MessageWithLinks',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postApplicationDisassociateEmailDomainAsync
     *
     * Disassociates an email domain with an Application.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $domain_registration_uuid The Domain Registration universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApplicationDisassociateEmailDomain'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApplicationDisassociateEmailDomainAsync($application_uuid, $domain_registration_uuid, string $contentType = self::contentTypes['postApplicationDisassociateEmailDomain'][0])
    {
        return $this->postApplicationDisassociateEmailDomainAsyncWithHttpInfo($application_uuid, $domain_registration_uuid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApplicationDisassociateEmailDomainAsyncWithHttpInfo
     *
     * Disassociates an email domain with an Application.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $domain_registration_uuid The Domain Registration universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApplicationDisassociateEmailDomain'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApplicationDisassociateEmailDomainAsyncWithHttpInfo($application_uuid, $domain_registration_uuid, string $contentType = self::contentTypes['postApplicationDisassociateEmailDomain'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
        $request = $this->postApplicationDisassociateEmailDomainRequest($application_uuid, $domain_registration_uuid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApplicationDisassociateEmailDomain'
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $domain_registration_uuid The Domain Registration universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApplicationDisassociateEmailDomain'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApplicationDisassociateEmailDomainRequest($application_uuid, $domain_registration_uuid, string $contentType = self::contentTypes['postApplicationDisassociateEmailDomain'][0])
    {

        // verify the required parameter 'application_uuid' is set
        if ($application_uuid === null || (is_array($application_uuid) && count($application_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $application_uuid when calling postApplicationDisassociateEmailDomain'
            );
        }

        // verify the required parameter 'domain_registration_uuid' is set
        if ($domain_registration_uuid === null || (is_array($domain_registration_uuid) && count($domain_registration_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $domain_registration_uuid when calling postApplicationDisassociateEmailDomain'
            );
        }


        $resourcePath = '/applications/{applicationUuid}/email/domains/{domainRegistrationUuid}/actions/disassociate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($application_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'applicationUuid' . '}',
                ObjectSerializer::toPathValue($application_uuid),
                $resourcePath
            );
        }
        // path params
        if ($domain_registration_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'domainRegistrationUuid' . '}',
                ObjectSerializer::toPathValue($domain_registration_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApplicationEnvironments
     *
     * Add a new continuous delivery environment to an application by the application UUID.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  \Acquia\CloudApi\Model\PostApplicationEnvironmentsRequest $post_application_environments_request post_application_environments_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApplicationEnvironments'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\ValidationError|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error
     */
    public function postApplicationEnvironments($application_uuid, $post_application_environments_request, string $contentType = self::contentTypes['postApplicationEnvironments'][0])
    {
        list($response) = $this->postApplicationEnvironmentsWithHttpInfo($application_uuid, $post_application_environments_request, $contentType);
        return $response;
    }

    /**
     * Operation postApplicationEnvironmentsWithHttpInfo
     *
     * Add a new continuous delivery environment to an application by the application UUID.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  \Acquia\CloudApi\Model\PostApplicationEnvironmentsRequest $post_application_environments_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApplicationEnvironments'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\ValidationError|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApplicationEnvironmentsWithHttpInfo($application_uuid, $post_application_environments_request, string $contentType = self::contentTypes['postApplicationEnvironments'][0])
    {
        $request = $this->postApplicationEnvironmentsRequest($application_uuid, $post_application_environments_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 202:
                    if ('\Acquia\CloudApi\Model\MessageWithLinks' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\MessageWithLinks' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\MessageWithLinks', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Acquia\CloudApi\Model\ValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\ValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\ValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\MessageWithLinks',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\ValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postApplicationEnvironmentsAsync
     *
     * Add a new continuous delivery environment to an application by the application UUID.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  \Acquia\CloudApi\Model\PostApplicationEnvironmentsRequest $post_application_environments_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApplicationEnvironments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApplicationEnvironmentsAsync($application_uuid, $post_application_environments_request, string $contentType = self::contentTypes['postApplicationEnvironments'][0])
    {
        return $this->postApplicationEnvironmentsAsyncWithHttpInfo($application_uuid, $post_application_environments_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApplicationEnvironmentsAsyncWithHttpInfo
     *
     * Add a new continuous delivery environment to an application by the application UUID.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  \Acquia\CloudApi\Model\PostApplicationEnvironmentsRequest $post_application_environments_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApplicationEnvironments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApplicationEnvironmentsAsyncWithHttpInfo($application_uuid, $post_application_environments_request, string $contentType = self::contentTypes['postApplicationEnvironments'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
        $request = $this->postApplicationEnvironmentsRequest($application_uuid, $post_application_environments_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApplicationEnvironments'
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  \Acquia\CloudApi\Model\PostApplicationEnvironmentsRequest $post_application_environments_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApplicationEnvironments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApplicationEnvironmentsRequest($application_uuid, $post_application_environments_request, string $contentType = self::contentTypes['postApplicationEnvironments'][0])
    {

        // verify the required parameter 'application_uuid' is set
        if ($application_uuid === null || (is_array($application_uuid) && count($application_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $application_uuid when calling postApplicationEnvironments'
            );
        }

        // verify the required parameter 'post_application_environments_request' is set
        if ($post_application_environments_request === null || (is_array($post_application_environments_request) && count($post_application_environments_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $post_application_environments_request when calling postApplicationEnvironments'
            );
        }


        $resourcePath = '/applications/{applicationUuid}/environments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($application_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'applicationUuid' . '}',
                ObjectSerializer::toPathValue($application_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_application_environments_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_application_environments_request));
            } else {
                $httpBody = $post_application_environments_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApplicationSearchConfigurationSets
     *
     * Creates a search configuration set for an application.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  \SplFileObject $archive A binary file response (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApplicationSearchConfigurationSets'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\ValidationError|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error
     */
    public function postApplicationSearchConfigurationSets($application_uuid, $archive, string $contentType = self::contentTypes['postApplicationSearchConfigurationSets'][0])
    {
        list($response) = $this->postApplicationSearchConfigurationSetsWithHttpInfo($application_uuid, $archive, $contentType);
        return $response;
    }

    /**
     * Operation postApplicationSearchConfigurationSetsWithHttpInfo
     *
     * Creates a search configuration set for an application.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  \SplFileObject $archive A binary file response (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApplicationSearchConfigurationSets'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\ValidationError|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApplicationSearchConfigurationSetsWithHttpInfo($application_uuid, $archive, string $contentType = self::contentTypes['postApplicationSearchConfigurationSets'][0])
    {
        $request = $this->postApplicationSearchConfigurationSetsRequest($application_uuid, $archive, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 202:
                    if ('\Acquia\CloudApi\Model\MessageWithLinks' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\MessageWithLinks' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\MessageWithLinks', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Acquia\CloudApi\Model\ValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\ValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\ValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\MessageWithLinks',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\ValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postApplicationSearchConfigurationSetsAsync
     *
     * Creates a search configuration set for an application.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  \SplFileObject $archive A binary file response (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApplicationSearchConfigurationSets'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApplicationSearchConfigurationSetsAsync($application_uuid, $archive, string $contentType = self::contentTypes['postApplicationSearchConfigurationSets'][0])
    {
        return $this->postApplicationSearchConfigurationSetsAsyncWithHttpInfo($application_uuid, $archive, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApplicationSearchConfigurationSetsAsyncWithHttpInfo
     *
     * Creates a search configuration set for an application.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  \SplFileObject $archive A binary file response (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApplicationSearchConfigurationSets'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApplicationSearchConfigurationSetsAsyncWithHttpInfo($application_uuid, $archive, string $contentType = self::contentTypes['postApplicationSearchConfigurationSets'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
        $request = $this->postApplicationSearchConfigurationSetsRequest($application_uuid, $archive, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApplicationSearchConfigurationSets'
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  \SplFileObject $archive A binary file response (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApplicationSearchConfigurationSets'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApplicationSearchConfigurationSetsRequest($application_uuid, $archive, string $contentType = self::contentTypes['postApplicationSearchConfigurationSets'][0])
    {

        // verify the required parameter 'application_uuid' is set
        if ($application_uuid === null || (is_array($application_uuid) && count($application_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $application_uuid when calling postApplicationSearchConfigurationSets'
            );
        }

        // verify the required parameter 'archive' is set
        if ($archive === null || (is_array($archive) && count($archive) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $archive when calling postApplicationSearchConfigurationSets'
            );
        }


        $resourcePath = '/applications/{applicationUuid}/search/config-sets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($application_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'applicationUuid' . '}',
                ObjectSerializer::toPathValue($application_uuid),
                $resourcePath
            );
        }

        // form params
        if ($archive !== null) {
            $multipart = true;
            $formParams['archive'] = [];
            $paramFiles = is_array($archive) ? $archive : [$archive];
            foreach ($paramFiles as $paramFile) {
                $formParams['archive'][] = \GuzzleHttp\Psr7\Utils::tryFopen(
                    ObjectSerializer::toFormValue($paramFile),
                    'rb'
                );
            }
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApplicationsIde
     *
     * Creates a new Cloud IDE.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  \Acquia\CloudApi\Model\PostApplicationsIdeRequest $post_applications_ide_request post_applications_ide_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApplicationsIde'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\ValidationError|\Acquia\CloudApi\Model\Error
     */
    public function postApplicationsIde($application_uuid, $post_applications_ide_request, string $contentType = self::contentTypes['postApplicationsIde'][0])
    {
        list($response) = $this->postApplicationsIdeWithHttpInfo($application_uuid, $post_applications_ide_request, $contentType);
        return $response;
    }

    /**
     * Operation postApplicationsIdeWithHttpInfo
     *
     * Creates a new Cloud IDE.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  \Acquia\CloudApi\Model\PostApplicationsIdeRequest $post_applications_ide_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApplicationsIde'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\ValidationError|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApplicationsIdeWithHttpInfo($application_uuid, $post_applications_ide_request, string $contentType = self::contentTypes['postApplicationsIde'][0])
    {
        $request = $this->postApplicationsIdeRequest($application_uuid, $post_applications_ide_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 202:
                    if ('\Acquia\CloudApi\Model\MessageWithLinks' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\MessageWithLinks' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\MessageWithLinks', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Acquia\CloudApi\Model\ValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\ValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\ValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\MessageWithLinks',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\ValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postApplicationsIdeAsync
     *
     * Creates a new Cloud IDE.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  \Acquia\CloudApi\Model\PostApplicationsIdeRequest $post_applications_ide_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApplicationsIde'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApplicationsIdeAsync($application_uuid, $post_applications_ide_request, string $contentType = self::contentTypes['postApplicationsIde'][0])
    {
        return $this->postApplicationsIdeAsyncWithHttpInfo($application_uuid, $post_applications_ide_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApplicationsIdeAsyncWithHttpInfo
     *
     * Creates a new Cloud IDE.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  \Acquia\CloudApi\Model\PostApplicationsIdeRequest $post_applications_ide_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApplicationsIde'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApplicationsIdeAsyncWithHttpInfo($application_uuid, $post_applications_ide_request, string $contentType = self::contentTypes['postApplicationsIde'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
        $request = $this->postApplicationsIdeRequest($application_uuid, $post_applications_ide_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApplicationsIde'
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  \Acquia\CloudApi\Model\PostApplicationsIdeRequest $post_applications_ide_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApplicationsIde'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApplicationsIdeRequest($application_uuid, $post_applications_ide_request, string $contentType = self::contentTypes['postApplicationsIde'][0])
    {

        // verify the required parameter 'application_uuid' is set
        if ($application_uuid === null || (is_array($application_uuid) && count($application_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $application_uuid when calling postApplicationsIde'
            );
        }

        // verify the required parameter 'post_applications_ide_request' is set
        if ($post_applications_ide_request === null || (is_array($post_applications_ide_request) && count($post_applications_ide_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $post_applications_ide_request when calling postApplicationsIde'
            );
        }


        $resourcePath = '/applications/{applicationUuid}/ides';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($application_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'applicationUuid' . '}',
                ObjectSerializer::toPathValue($application_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_applications_ide_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_applications_ide_request));
            } else {
                $httpBody = $post_applications_ide_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApplicationsTags
     *
     * Creates a new application tag.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  \Acquia\CloudApi\Model\PostApplicationsTagsRequest $post_applications_tags_request post_applications_tags_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApplicationsTags'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\Error
     */
    public function postApplicationsTags($application_uuid, $post_applications_tags_request, string $contentType = self::contentTypes['postApplicationsTags'][0])
    {
        list($response) = $this->postApplicationsTagsWithHttpInfo($application_uuid, $post_applications_tags_request, $contentType);
        return $response;
    }

    /**
     * Operation postApplicationsTagsWithHttpInfo
     *
     * Creates a new application tag.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  \Acquia\CloudApi\Model\PostApplicationsTagsRequest $post_applications_tags_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApplicationsTags'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApplicationsTagsWithHttpInfo($application_uuid, $post_applications_tags_request, string $contentType = self::contentTypes['postApplicationsTags'][0])
    {
        $request = $this->postApplicationsTagsRequest($application_uuid, $post_applications_tags_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Acquia\CloudApi\Model\MessageWithLinks' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\MessageWithLinks' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\MessageWithLinks', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\MessageWithLinks',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postApplicationsTagsAsync
     *
     * Creates a new application tag.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  \Acquia\CloudApi\Model\PostApplicationsTagsRequest $post_applications_tags_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApplicationsTags'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApplicationsTagsAsync($application_uuid, $post_applications_tags_request, string $contentType = self::contentTypes['postApplicationsTags'][0])
    {
        return $this->postApplicationsTagsAsyncWithHttpInfo($application_uuid, $post_applications_tags_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApplicationsTagsAsyncWithHttpInfo
     *
     * Creates a new application tag.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  \Acquia\CloudApi\Model\PostApplicationsTagsRequest $post_applications_tags_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApplicationsTags'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApplicationsTagsAsyncWithHttpInfo($application_uuid, $post_applications_tags_request, string $contentType = self::contentTypes['postApplicationsTags'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
        $request = $this->postApplicationsTagsRequest($application_uuid, $post_applications_tags_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApplicationsTags'
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  \Acquia\CloudApi\Model\PostApplicationsTagsRequest $post_applications_tags_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApplicationsTags'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApplicationsTagsRequest($application_uuid, $post_applications_tags_request, string $contentType = self::contentTypes['postApplicationsTags'][0])
    {

        // verify the required parameter 'application_uuid' is set
        if ($application_uuid === null || (is_array($application_uuid) && count($application_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $application_uuid when calling postApplicationsTags'
            );
        }

        // verify the required parameter 'post_applications_tags_request' is set
        if ($post_applications_tags_request === null || (is_array($post_applications_tags_request) && count($post_applications_tags_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $post_applications_tags_request when calling postApplicationsTags'
            );
        }


        $resourcePath = '/applications/{applicationUuid}/tags';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($application_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'applicationUuid' . '}',
                ObjectSerializer::toPathValue($application_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_applications_tags_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_applications_tags_request));
            } else {
                $httpBody = $post_applications_tags_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putApplicationByUuid
     *
     * Renames an application.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  \Acquia\CloudApi\Model\PutApplicationByUuidRequest $put_application_by_uuid_request put_application_by_uuid_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putApplicationByUuid'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\ValidationError|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error
     */
    public function putApplicationByUuid($application_uuid, $put_application_by_uuid_request, string $contentType = self::contentTypes['putApplicationByUuid'][0])
    {
        list($response) = $this->putApplicationByUuidWithHttpInfo($application_uuid, $put_application_by_uuid_request, $contentType);
        return $response;
    }

    /**
     * Operation putApplicationByUuidWithHttpInfo
     *
     * Renames an application.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  \Acquia\CloudApi\Model\PutApplicationByUuidRequest $put_application_by_uuid_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putApplicationByUuid'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\ValidationError|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function putApplicationByUuidWithHttpInfo($application_uuid, $put_application_by_uuid_request, string $contentType = self::contentTypes['putApplicationByUuid'][0])
    {
        $request = $this->putApplicationByUuidRequest($application_uuid, $put_application_by_uuid_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Acquia\CloudApi\Model\MessageWithLinks' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\MessageWithLinks' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\MessageWithLinks', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Acquia\CloudApi\Model\ValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\ValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\ValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\MessageWithLinks',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\ValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putApplicationByUuidAsync
     *
     * Renames an application.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  \Acquia\CloudApi\Model\PutApplicationByUuidRequest $put_application_by_uuid_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putApplicationByUuid'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putApplicationByUuidAsync($application_uuid, $put_application_by_uuid_request, string $contentType = self::contentTypes['putApplicationByUuid'][0])
    {
        return $this->putApplicationByUuidAsyncWithHttpInfo($application_uuid, $put_application_by_uuid_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putApplicationByUuidAsyncWithHttpInfo
     *
     * Renames an application.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  \Acquia\CloudApi\Model\PutApplicationByUuidRequest $put_application_by_uuid_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putApplicationByUuid'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putApplicationByUuidAsyncWithHttpInfo($application_uuid, $put_application_by_uuid_request, string $contentType = self::contentTypes['putApplicationByUuid'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
        $request = $this->putApplicationByUuidRequest($application_uuid, $put_application_by_uuid_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putApplicationByUuid'
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  \Acquia\CloudApi\Model\PutApplicationByUuidRequest $put_application_by_uuid_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putApplicationByUuid'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function putApplicationByUuidRequest($application_uuid, $put_application_by_uuid_request, string $contentType = self::contentTypes['putApplicationByUuid'][0])
    {

        // verify the required parameter 'application_uuid' is set
        if ($application_uuid === null || (is_array($application_uuid) && count($application_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $application_uuid when calling putApplicationByUuid'
            );
        }

        // verify the required parameter 'put_application_by_uuid_request' is set
        if ($put_application_by_uuid_request === null || (is_array($put_application_by_uuid_request) && count($put_application_by_uuid_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $put_application_by_uuid_request when calling putApplicationByUuid'
            );
        }


        $resourcePath = '/applications/{applicationUuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($application_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'applicationUuid' . '}',
                ObjectSerializer::toPathValue($application_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($put_application_by_uuid_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($put_application_by_uuid_request));
            } else {
                $httpBody = $put_application_by_uuid_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putApplicationRemoteAdministrationSettings
     *
     * Modifies the remote administration settings for an application.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  \Acquia\CloudApi\Model\RemoteAdministration $remote_administration remote_administration (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putApplicationRemoteAdministrationSettings'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\Message|\Acquia\CloudApi\Model\ValidationError|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error
     */
    public function putApplicationRemoteAdministrationSettings($application_uuid, $remote_administration, string $contentType = self::contentTypes['putApplicationRemoteAdministrationSettings'][0])
    {
        list($response) = $this->putApplicationRemoteAdministrationSettingsWithHttpInfo($application_uuid, $remote_administration, $contentType);
        return $response;
    }

    /**
     * Operation putApplicationRemoteAdministrationSettingsWithHttpInfo
     *
     * Modifies the remote administration settings for an application.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  \Acquia\CloudApi\Model\RemoteAdministration $remote_administration (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putApplicationRemoteAdministrationSettings'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\Message|\Acquia\CloudApi\Model\ValidationError|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function putApplicationRemoteAdministrationSettingsWithHttpInfo($application_uuid, $remote_administration, string $contentType = self::contentTypes['putApplicationRemoteAdministrationSettings'][0])
    {
        $request = $this->putApplicationRemoteAdministrationSettingsRequest($application_uuid, $remote_administration, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Acquia\CloudApi\Model\Message' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Message' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Message', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Acquia\CloudApi\Model\ValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\ValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\ValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\Message';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Message',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\ValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putApplicationRemoteAdministrationSettingsAsync
     *
     * Modifies the remote administration settings for an application.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  \Acquia\CloudApi\Model\RemoteAdministration $remote_administration (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putApplicationRemoteAdministrationSettings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putApplicationRemoteAdministrationSettingsAsync($application_uuid, $remote_administration, string $contentType = self::contentTypes['putApplicationRemoteAdministrationSettings'][0])
    {
        return $this->putApplicationRemoteAdministrationSettingsAsyncWithHttpInfo($application_uuid, $remote_administration, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putApplicationRemoteAdministrationSettingsAsyncWithHttpInfo
     *
     * Modifies the remote administration settings for an application.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  \Acquia\CloudApi\Model\RemoteAdministration $remote_administration (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putApplicationRemoteAdministrationSettings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putApplicationRemoteAdministrationSettingsAsyncWithHttpInfo($application_uuid, $remote_administration, string $contentType = self::contentTypes['putApplicationRemoteAdministrationSettings'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\Message';
        $request = $this->putApplicationRemoteAdministrationSettingsRequest($application_uuid, $remote_administration, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putApplicationRemoteAdministrationSettings'
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  \Acquia\CloudApi\Model\RemoteAdministration $remote_administration (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putApplicationRemoteAdministrationSettings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function putApplicationRemoteAdministrationSettingsRequest($application_uuid, $remote_administration, string $contentType = self::contentTypes['putApplicationRemoteAdministrationSettings'][0])
    {

        // verify the required parameter 'application_uuid' is set
        if ($application_uuid === null || (is_array($application_uuid) && count($application_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $application_uuid when calling putApplicationRemoteAdministrationSettings'
            );
        }

        // verify the required parameter 'remote_administration' is set
        if ($remote_administration === null || (is_array($remote_administration) && count($remote_administration) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $remote_administration when calling putApplicationRemoteAdministrationSettings'
            );
        }


        $resourcePath = '/applications/{applicationUuid}/settings/ra';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($application_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'applicationUuid' . '}',
                ObjectSerializer::toPathValue($application_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($remote_administration)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($remote_administration));
            } else {
                $httpBody = $remote_administration;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putApplicationSecuritySettings
     *
     * Modifies the security policy settings for an application.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  \Acquia\CloudApi\Model\PutApplicationSecuritySettingsRequest $put_application_security_settings_request put_application_security_settings_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putApplicationSecuritySettings'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\Message|\Acquia\CloudApi\Model\ValidationError|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error
     * @deprecated
     */
    public function putApplicationSecuritySettings($application_uuid, $put_application_security_settings_request, string $contentType = self::contentTypes['putApplicationSecuritySettings'][0])
    {
        list($response) = $this->putApplicationSecuritySettingsWithHttpInfo($application_uuid, $put_application_security_settings_request, $contentType);
        return $response;
    }

    /**
     * Operation putApplicationSecuritySettingsWithHttpInfo
     *
     * Modifies the security policy settings for an application.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  \Acquia\CloudApi\Model\PutApplicationSecuritySettingsRequest $put_application_security_settings_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putApplicationSecuritySettings'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\Message|\Acquia\CloudApi\Model\ValidationError|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function putApplicationSecuritySettingsWithHttpInfo($application_uuid, $put_application_security_settings_request, string $contentType = self::contentTypes['putApplicationSecuritySettings'][0])
    {
        $request = $this->putApplicationSecuritySettingsRequest($application_uuid, $put_application_security_settings_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Acquia\CloudApi\Model\Message' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Message' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Message', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Acquia\CloudApi\Model\ValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\ValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\ValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\Message';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Message',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\ValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putApplicationSecuritySettingsAsync
     *
     * Modifies the security policy settings for an application.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  \Acquia\CloudApi\Model\PutApplicationSecuritySettingsRequest $put_application_security_settings_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putApplicationSecuritySettings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function putApplicationSecuritySettingsAsync($application_uuid, $put_application_security_settings_request, string $contentType = self::contentTypes['putApplicationSecuritySettings'][0])
    {
        return $this->putApplicationSecuritySettingsAsyncWithHttpInfo($application_uuid, $put_application_security_settings_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putApplicationSecuritySettingsAsyncWithHttpInfo
     *
     * Modifies the security policy settings for an application.
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  \Acquia\CloudApi\Model\PutApplicationSecuritySettingsRequest $put_application_security_settings_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putApplicationSecuritySettings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function putApplicationSecuritySettingsAsyncWithHttpInfo($application_uuid, $put_application_security_settings_request, string $contentType = self::contentTypes['putApplicationSecuritySettings'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\Message';
        $request = $this->putApplicationSecuritySettingsRequest($application_uuid, $put_application_security_settings_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putApplicationSecuritySettings'
     *
     * @param  string $application_uuid The entity&#39;s universally unique identifier. (required)
     * @param  \Acquia\CloudApi\Model\PutApplicationSecuritySettingsRequest $put_application_security_settings_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putApplicationSecuritySettings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function putApplicationSecuritySettingsRequest($application_uuid, $put_application_security_settings_request, string $contentType = self::contentTypes['putApplicationSecuritySettings'][0])
    {

        // verify the required parameter 'application_uuid' is set
        if ($application_uuid === null || (is_array($application_uuid) && count($application_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $application_uuid when calling putApplicationSecuritySettings'
            );
        }

        // verify the required parameter 'put_application_security_settings_request' is set
        if ($put_application_security_settings_request === null || (is_array($put_application_security_settings_request) && count($put_application_security_settings_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $put_application_security_settings_request when calling putApplicationSecuritySettings'
            );
        }


        $resourcePath = '/applications/{applicationUuid}/settings/security';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($application_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'applicationUuid' . '}',
                ObjectSerializer::toPathValue($application_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($put_application_security_settings_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($put_application_security_settings_request));
            } else {
                $httpBody = $put_application_security_settings_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
