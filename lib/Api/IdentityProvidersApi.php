<?php
/**
 * IdentityProvidersApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Acquia\CloudApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Acquia Cloud API Documentation
 *
 * Acquia Cloud API  # Compatibility  ## Stability  The response for all resource endpoints includes an `X-CloudAPI-Stability` header that indicates what changes, if any, Acquia will make to the resource and how changes will be communicated.  There are three levels of stability:  * `prototype`: A prototype resource is experimental and major changes are likely. A prototype resource may not reach production.     * Compatible and emergency changes may be made with no advance notice     * Disruptive changes may be made with one week notice     * Deprecated resources will remain available for at least one month after deprecation * `development`: A resource that is unlikely to change, but is still being worked on, will be marked as in development. These resources are very likely to reach production.     * Compatible and emergency changes may be made with no advance notice     * Disruptive changes may be made with one month notice     * Deprecated resources will remain available for at least six months after deprecation * `production`: A production resource will not introduce breaking changes within a version, and any breaking changes between versions will be communicated ahead of time.  ## Deprecation  Over time, endpoints may become obsolete and will be removed in the future. These endpoints will be marked with an `X-CloudAPI-Deprecated` header indicating the version in which they were deprecated and the reason for the deprecation. Deprecated endpoints may be removed in the next version of the resource.  ## Versioning  All resource endpoints are versioned within the API. Endpoints that have reached production will not introduce breaking changes between versions. Non-production endpoints will not version for changes.  A specific version of an endpoint can be requested via the `Accept` header:      Accept: application/json, version=2  If the version is not specified, the latest version of the endpoint will be used.  Starting with version 3, we will support the current version of an endpoint and the previous version. Version 1 of the API is [provided elsewhere](https://cloudapi.acquia.com/).  ## Errors  Some endpoints will return a 503 status when dependent services are unavailable:      application/json     {         \"error\": \"system\",         \"message\": \"This action is currently unavailable. Please try again later.\"     }  ## Authentication  All Acquia Cloud API calls require authentication to work properly.  Learn more: <a href='https://docs.acquia.com/acquia-cloud/develop/api/auth/' target='_blank'>https://docs.acquia.com/acquia-cloud/develop/api/auth/</a>  ### Example implementation  An example PHP script for making authenticated API requests can be found at <a href='https://docs.acquia.com/_downloads/api-v2-auth.php' target='_blank'>https://docs.acquia.com/_downloads/api-v2-auth.php</a>. This script uses the <a href='https://oauth2-client.thephpleague.com/' target='_blank'>League/oauth2-client</a> library, installed via Composer.
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Acquia\CloudApi\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Acquia\CloudApi\ApiException;
use Acquia\CloudApi\Configuration;
use Acquia\CloudApi\HeaderSelector;
use Acquia\CloudApi\ObjectSerializer;

/**
 * IdentityProvidersApi Class Doc Comment
 *
 * @category Class
 * @package  Acquia\CloudApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class IdentityProvidersApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'deleteIdentityProvider' => [
            'application/json',
        ],
        'getIdentityProvider' => [
            'application/json',
        ],
        'getIdentityProviders' => [
            'application/json',
        ],
        'postDisableIdentityProvider' => [
            'application/json',
        ],
        'postEnableIdentityProvider' => [
            'application/json',
        ],
        'putIdentityProvider' => [
            'application/json',
            'application/x-www-form-urlencoded',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation deleteIdentityProvider
     *
     * Deletes a specific identity provider by its UUID.
     *
     * @param  string $identity_provider_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteIdentityProvider'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error
     */
    public function deleteIdentityProvider($identity_provider_uuid, string $contentType = self::contentTypes['deleteIdentityProvider'][0])
    {
        list($response) = $this->deleteIdentityProviderWithHttpInfo($identity_provider_uuid, $contentType);
        return $response;
    }

    /**
     * Operation deleteIdentityProviderWithHttpInfo
     *
     * Deletes a specific identity provider by its UUID.
     *
     * @param  string $identity_provider_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteIdentityProvider'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteIdentityProviderWithHttpInfo($identity_provider_uuid, string $contentType = self::contentTypes['deleteIdentityProvider'][0])
    {
        $request = $this->deleteIdentityProviderRequest($identity_provider_uuid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 202:
                    if ('\Acquia\CloudApi\Model\MessageWithLinks' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\MessageWithLinks' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\MessageWithLinks', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\MessageWithLinks',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteIdentityProviderAsync
     *
     * Deletes a specific identity provider by its UUID.
     *
     * @param  string $identity_provider_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteIdentityProvider'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteIdentityProviderAsync($identity_provider_uuid, string $contentType = self::contentTypes['deleteIdentityProvider'][0])
    {
        return $this->deleteIdentityProviderAsyncWithHttpInfo($identity_provider_uuid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteIdentityProviderAsyncWithHttpInfo
     *
     * Deletes a specific identity provider by its UUID.
     *
     * @param  string $identity_provider_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteIdentityProvider'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteIdentityProviderAsyncWithHttpInfo($identity_provider_uuid, string $contentType = self::contentTypes['deleteIdentityProvider'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
        $request = $this->deleteIdentityProviderRequest($identity_provider_uuid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteIdentityProvider'
     *
     * @param  string $identity_provider_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteIdentityProvider'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteIdentityProviderRequest($identity_provider_uuid, string $contentType = self::contentTypes['deleteIdentityProvider'][0])
    {

        // verify the required parameter 'identity_provider_uuid' is set
        if ($identity_provider_uuid === null || (is_array($identity_provider_uuid) && count($identity_provider_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $identity_provider_uuid when calling deleteIdentityProvider'
            );
        }


        $resourcePath = '/identity-providers/{identityProviderUuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($identity_provider_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'identityProviderUuid' . '}',
                ObjectSerializer::toPathValue($identity_provider_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getIdentityProvider
     *
     * Returns a specific identity provider by UUID.
     *
     * @param  string $identity_provider_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIdentityProvider'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\IdentityProvider|\Acquia\CloudApi\Model\Error
     */
    public function getIdentityProvider($identity_provider_uuid, string $contentType = self::contentTypes['getIdentityProvider'][0])
    {
        list($response) = $this->getIdentityProviderWithHttpInfo($identity_provider_uuid, $contentType);
        return $response;
    }

    /**
     * Operation getIdentityProviderWithHttpInfo
     *
     * Returns a specific identity provider by UUID.
     *
     * @param  string $identity_provider_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIdentityProvider'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\IdentityProvider|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getIdentityProviderWithHttpInfo($identity_provider_uuid, string $contentType = self::contentTypes['getIdentityProvider'][0])
    {
        $request = $this->getIdentityProviderRequest($identity_provider_uuid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Acquia\CloudApi\Model\IdentityProvider' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\IdentityProvider' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\IdentityProvider', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\IdentityProvider';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\IdentityProvider',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getIdentityProviderAsync
     *
     * Returns a specific identity provider by UUID.
     *
     * @param  string $identity_provider_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIdentityProvider'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getIdentityProviderAsync($identity_provider_uuid, string $contentType = self::contentTypes['getIdentityProvider'][0])
    {
        return $this->getIdentityProviderAsyncWithHttpInfo($identity_provider_uuid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getIdentityProviderAsyncWithHttpInfo
     *
     * Returns a specific identity provider by UUID.
     *
     * @param  string $identity_provider_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIdentityProvider'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getIdentityProviderAsyncWithHttpInfo($identity_provider_uuid, string $contentType = self::contentTypes['getIdentityProvider'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\IdentityProvider';
        $request = $this->getIdentityProviderRequest($identity_provider_uuid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getIdentityProvider'
     *
     * @param  string $identity_provider_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIdentityProvider'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getIdentityProviderRequest($identity_provider_uuid, string $contentType = self::contentTypes['getIdentityProvider'][0])
    {

        // verify the required parameter 'identity_provider_uuid' is set
        if ($identity_provider_uuid === null || (is_array($identity_provider_uuid) && count($identity_provider_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $identity_provider_uuid when calling getIdentityProvider'
            );
        }


        $resourcePath = '/identity-providers/{identityProviderUuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($identity_provider_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'identityProviderUuid' . '}',
                ObjectSerializer::toPathValue($identity_provider_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getIdentityProviders
     *
     * Returns a list of identity providers for a user.
     *
     * @param  string $sort A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable. (optional)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;) (optional)
     * @param  int $limit The maximum number of items to return. (optional)
     * @param  int $offset An integer to signify the offset to paginate from. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIdentityProviders'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\IdentityProviders
     */
    public function getIdentityProviders($sort = null, $filter = null, $limit = null, $offset = null, string $contentType = self::contentTypes['getIdentityProviders'][0])
    {
        list($response) = $this->getIdentityProvidersWithHttpInfo($sort, $filter, $limit, $offset, $contentType);
        return $response;
    }

    /**
     * Operation getIdentityProvidersWithHttpInfo
     *
     * Returns a list of identity providers for a user.
     *
     * @param  string $sort A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable. (optional)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;) (optional)
     * @param  int $limit The maximum number of items to return. (optional)
     * @param  int $offset An integer to signify the offset to paginate from. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIdentityProviders'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\IdentityProviders, HTTP status code, HTTP response headers (array of strings)
     */
    public function getIdentityProvidersWithHttpInfo($sort = null, $filter = null, $limit = null, $offset = null, string $contentType = self::contentTypes['getIdentityProviders'][0])
    {
        $request = $this->getIdentityProvidersRequest($sort, $filter, $limit, $offset, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Acquia\CloudApi\Model\IdentityProviders' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\IdentityProviders' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\IdentityProviders', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\IdentityProviders';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\IdentityProviders',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getIdentityProvidersAsync
     *
     * Returns a list of identity providers for a user.
     *
     * @param  string $sort A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable. (optional)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;) (optional)
     * @param  int $limit The maximum number of items to return. (optional)
     * @param  int $offset An integer to signify the offset to paginate from. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIdentityProviders'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getIdentityProvidersAsync($sort = null, $filter = null, $limit = null, $offset = null, string $contentType = self::contentTypes['getIdentityProviders'][0])
    {
        return $this->getIdentityProvidersAsyncWithHttpInfo($sort, $filter, $limit, $offset, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getIdentityProvidersAsyncWithHttpInfo
     *
     * Returns a list of identity providers for a user.
     *
     * @param  string $sort A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable. (optional)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;) (optional)
     * @param  int $limit The maximum number of items to return. (optional)
     * @param  int $offset An integer to signify the offset to paginate from. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIdentityProviders'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getIdentityProvidersAsyncWithHttpInfo($sort = null, $filter = null, $limit = null, $offset = null, string $contentType = self::contentTypes['getIdentityProviders'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\IdentityProviders';
        $request = $this->getIdentityProvidersRequest($sort, $filter, $limit, $offset, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getIdentityProviders'
     *
     * @param  string $sort A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable. (optional)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;) (optional)
     * @param  int $limit The maximum number of items to return. (optional)
     * @param  int $offset An integer to signify the offset to paginate from. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIdentityProviders'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getIdentityProvidersRequest($sort = null, $filter = null, $limit = null, $offset = null, string $contentType = self::contentTypes['getIdentityProviders'][0])
    {

        
        



        $resourcePath = '/identity-providers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            'filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postDisableIdentityProvider
     *
     * Disables an identity provider by its UUID.
     *
     * @param  string $identity_provider_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postDisableIdentityProvider'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error
     */
    public function postDisableIdentityProvider($identity_provider_uuid, string $contentType = self::contentTypes['postDisableIdentityProvider'][0])
    {
        list($response) = $this->postDisableIdentityProviderWithHttpInfo($identity_provider_uuid, $contentType);
        return $response;
    }

    /**
     * Operation postDisableIdentityProviderWithHttpInfo
     *
     * Disables an identity provider by its UUID.
     *
     * @param  string $identity_provider_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postDisableIdentityProvider'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function postDisableIdentityProviderWithHttpInfo($identity_provider_uuid, string $contentType = self::contentTypes['postDisableIdentityProvider'][0])
    {
        $request = $this->postDisableIdentityProviderRequest($identity_provider_uuid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Acquia\CloudApi\Model\MessageWithLinks' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\MessageWithLinks' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\MessageWithLinks', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\MessageWithLinks',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postDisableIdentityProviderAsync
     *
     * Disables an identity provider by its UUID.
     *
     * @param  string $identity_provider_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postDisableIdentityProvider'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postDisableIdentityProviderAsync($identity_provider_uuid, string $contentType = self::contentTypes['postDisableIdentityProvider'][0])
    {
        return $this->postDisableIdentityProviderAsyncWithHttpInfo($identity_provider_uuid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postDisableIdentityProviderAsyncWithHttpInfo
     *
     * Disables an identity provider by its UUID.
     *
     * @param  string $identity_provider_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postDisableIdentityProvider'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postDisableIdentityProviderAsyncWithHttpInfo($identity_provider_uuid, string $contentType = self::contentTypes['postDisableIdentityProvider'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
        $request = $this->postDisableIdentityProviderRequest($identity_provider_uuid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postDisableIdentityProvider'
     *
     * @param  string $identity_provider_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postDisableIdentityProvider'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postDisableIdentityProviderRequest($identity_provider_uuid, string $contentType = self::contentTypes['postDisableIdentityProvider'][0])
    {

        // verify the required parameter 'identity_provider_uuid' is set
        if ($identity_provider_uuid === null || (is_array($identity_provider_uuid) && count($identity_provider_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $identity_provider_uuid when calling postDisableIdentityProvider'
            );
        }


        $resourcePath = '/identity-providers/{identityProviderUuid}/actions/disable';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($identity_provider_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'identityProviderUuid' . '}',
                ObjectSerializer::toPathValue($identity_provider_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postEnableIdentityProvider
     *
     * Enables an identity provider by its UUID.
     *
     * @param  string $identity_provider_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnableIdentityProvider'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error
     */
    public function postEnableIdentityProvider($identity_provider_uuid, string $contentType = self::contentTypes['postEnableIdentityProvider'][0])
    {
        list($response) = $this->postEnableIdentityProviderWithHttpInfo($identity_provider_uuid, $contentType);
        return $response;
    }

    /**
     * Operation postEnableIdentityProviderWithHttpInfo
     *
     * Enables an identity provider by its UUID.
     *
     * @param  string $identity_provider_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnableIdentityProvider'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function postEnableIdentityProviderWithHttpInfo($identity_provider_uuid, string $contentType = self::contentTypes['postEnableIdentityProvider'][0])
    {
        $request = $this->postEnableIdentityProviderRequest($identity_provider_uuid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Acquia\CloudApi\Model\MessageWithLinks' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\MessageWithLinks' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\MessageWithLinks', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\MessageWithLinks',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postEnableIdentityProviderAsync
     *
     * Enables an identity provider by its UUID.
     *
     * @param  string $identity_provider_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnableIdentityProvider'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnableIdentityProviderAsync($identity_provider_uuid, string $contentType = self::contentTypes['postEnableIdentityProvider'][0])
    {
        return $this->postEnableIdentityProviderAsyncWithHttpInfo($identity_provider_uuid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postEnableIdentityProviderAsyncWithHttpInfo
     *
     * Enables an identity provider by its UUID.
     *
     * @param  string $identity_provider_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnableIdentityProvider'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnableIdentityProviderAsyncWithHttpInfo($identity_provider_uuid, string $contentType = self::contentTypes['postEnableIdentityProvider'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
        $request = $this->postEnableIdentityProviderRequest($identity_provider_uuid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postEnableIdentityProvider'
     *
     * @param  string $identity_provider_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnableIdentityProvider'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postEnableIdentityProviderRequest($identity_provider_uuid, string $contentType = self::contentTypes['postEnableIdentityProvider'][0])
    {

        // verify the required parameter 'identity_provider_uuid' is set
        if ($identity_provider_uuid === null || (is_array($identity_provider_uuid) && count($identity_provider_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $identity_provider_uuid when calling postEnableIdentityProvider'
            );
        }


        $resourcePath = '/identity-providers/{identityProviderUuid}/actions/enable';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($identity_provider_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'identityProviderUuid' . '}',
                ObjectSerializer::toPathValue($identity_provider_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putIdentityProvider
     *
     * Modifies an identity provider by its UUID.
     *
     * @param  string $identity_provider_uuid The entity&#39;s universally unique identifier. (required)
     * @param  \Acquia\CloudApi\Model\PutIdentityProviderRequest $put_identity_provider_request put_identity_provider_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putIdentityProvider'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\Message|\Acquia\CloudApi\Model\ValidationError|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error
     */
    public function putIdentityProvider($identity_provider_uuid, $put_identity_provider_request, string $contentType = self::contentTypes['putIdentityProvider'][0])
    {
        list($response) = $this->putIdentityProviderWithHttpInfo($identity_provider_uuid, $put_identity_provider_request, $contentType);
        return $response;
    }

    /**
     * Operation putIdentityProviderWithHttpInfo
     *
     * Modifies an identity provider by its UUID.
     *
     * @param  string $identity_provider_uuid The entity&#39;s universally unique identifier. (required)
     * @param  \Acquia\CloudApi\Model\PutIdentityProviderRequest $put_identity_provider_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putIdentityProvider'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\Message|\Acquia\CloudApi\Model\ValidationError|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function putIdentityProviderWithHttpInfo($identity_provider_uuid, $put_identity_provider_request, string $contentType = self::contentTypes['putIdentityProvider'][0])
    {
        $request = $this->putIdentityProviderRequest($identity_provider_uuid, $put_identity_provider_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 202:
                    if ('\Acquia\CloudApi\Model\Message' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Message' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Message', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Acquia\CloudApi\Model\ValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\ValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\ValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\Message';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Message',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\ValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putIdentityProviderAsync
     *
     * Modifies an identity provider by its UUID.
     *
     * @param  string $identity_provider_uuid The entity&#39;s universally unique identifier. (required)
     * @param  \Acquia\CloudApi\Model\PutIdentityProviderRequest $put_identity_provider_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putIdentityProvider'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putIdentityProviderAsync($identity_provider_uuid, $put_identity_provider_request, string $contentType = self::contentTypes['putIdentityProvider'][0])
    {
        return $this->putIdentityProviderAsyncWithHttpInfo($identity_provider_uuid, $put_identity_provider_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putIdentityProviderAsyncWithHttpInfo
     *
     * Modifies an identity provider by its UUID.
     *
     * @param  string $identity_provider_uuid The entity&#39;s universally unique identifier. (required)
     * @param  \Acquia\CloudApi\Model\PutIdentityProviderRequest $put_identity_provider_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putIdentityProvider'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putIdentityProviderAsyncWithHttpInfo($identity_provider_uuid, $put_identity_provider_request, string $contentType = self::contentTypes['putIdentityProvider'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\Message';
        $request = $this->putIdentityProviderRequest($identity_provider_uuid, $put_identity_provider_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putIdentityProvider'
     *
     * @param  string $identity_provider_uuid The entity&#39;s universally unique identifier. (required)
     * @param  \Acquia\CloudApi\Model\PutIdentityProviderRequest $put_identity_provider_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putIdentityProvider'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function putIdentityProviderRequest($identity_provider_uuid, $put_identity_provider_request, string $contentType = self::contentTypes['putIdentityProvider'][0])
    {

        // verify the required parameter 'identity_provider_uuid' is set
        if ($identity_provider_uuid === null || (is_array($identity_provider_uuid) && count($identity_provider_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $identity_provider_uuid when calling putIdentityProvider'
            );
        }

        // verify the required parameter 'put_identity_provider_request' is set
        if ($put_identity_provider_request === null || (is_array($put_identity_provider_request) && count($put_identity_provider_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $put_identity_provider_request when calling putIdentityProvider'
            );
        }


        $resourcePath = '/identity-providers/{identityProviderUuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($identity_provider_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'identityProviderUuid' . '}',
                ObjectSerializer::toPathValue($identity_provider_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($put_identity_provider_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($put_identity_provider_request));
            } else {
                $httpBody = $put_identity_provider_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
