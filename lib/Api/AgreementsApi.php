<?php
/**
 * AgreementsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Acquia\CloudApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Acquia Cloud API Documentation
 *
 * Acquia Cloud API  # Compatibility  ## Stability  The response for all resource endpoints includes an `X-CloudAPI-Stability` header that indicates what changes, if any, Acquia will make to the resource and how changes will be communicated.  There are three levels of stability:  * `prototype`: A prototype resource is experimental and major changes are likely. A prototype resource may not reach production.     * Compatible and emergency changes may be made with no advance notice     * Disruptive changes may be made with one week notice     * Deprecated resources will remain available for at least one month after deprecation * `development`: A resource that is unlikely to change, but is still being worked on, will be marked as in development. These resources are very likely to reach production.     * Compatible and emergency changes may be made with no advance notice     * Disruptive changes may be made with one month notice     * Deprecated resources will remain available for at least six months after deprecation * `production`: A production resource will not introduce breaking changes within a version, and any breaking changes between versions will be communicated ahead of time.  ## Deprecation  Over time, endpoints may become obsolete and will be removed in the future. These endpoints will be marked with an `X-CloudAPI-Deprecated` header indicating the version in which they were deprecated and the reason for the deprecation. Deprecated endpoints may be removed in the next version of the resource.  ## Versioning  All resource endpoints are versioned within the API. Endpoints that have reached production will not introduce breaking changes between versions. Non-production endpoints will not version for changes.  A specific version of an endpoint can be requested via the `Accept` header:      Accept: application/json, version=2  If the version is not specified, the latest version of the endpoint will be used.  Starting with version 3, we will support the current version of an endpoint and the previous version. Version 1 of the API is [provided elsewhere](https://cloudapi.acquia.com/).  ## Errors  Some endpoints will return a 503 status when dependent services are unavailable:      application/json     {         \"error\": \"system\",         \"message\": \"This action is currently unavailable. Please try again later.\"     }  ## Authentication  All Acquia Cloud API calls require authentication to work properly.  Learn more: <a href='https://docs.acquia.com/acquia-cloud/develop/api/auth/' target='_blank'>https://docs.acquia.com/acquia-cloud/develop/api/auth/</a>  ### Example implementation  An example PHP script for making authenticated API requests can be found at <a href='https://docs.acquia.com/_downloads/api-v2-auth.php' target='_blank'>https://docs.acquia.com/_downloads/api-v2-auth.php</a>. This script uses the <a href='https://oauth2-client.thephpleague.com/' target='_blank'>League/oauth2-client</a> library, installed via Composer.
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Acquia\CloudApi\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Acquia\CloudApi\ApiException;
use Acquia\CloudApi\Configuration;
use Acquia\CloudApi\HeaderSelector;
use Acquia\CloudApi\ObjectSerializer;

/**
 * AgreementsApi Class Doc Comment
 *
 * @category Class
 * @package  Acquia\CloudApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AgreementsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'getAgreement' => [
            'application/json',
        ],
        'getAgreements' => [
            'application/json',
        ],
        'getInvitees' => [
            'application/json',
        ],
        'postAcceptAgreement' => [
            'application/json',
        ],
        'postDeclineAgreement' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getAgreement
     *
     * Return a specific agreement by a provided UUID.
     *
     * @param  string $agreement_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAgreement'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\Agreement|\Acquia\CloudApi\Model\Error
     */
    public function getAgreement($agreement_uuid, string $contentType = self::contentTypes['getAgreement'][0])
    {
        list($response) = $this->getAgreementWithHttpInfo($agreement_uuid, $contentType);
        return $response;
    }

    /**
     * Operation getAgreementWithHttpInfo
     *
     * Return a specific agreement by a provided UUID.
     *
     * @param  string $agreement_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAgreement'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\Agreement|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAgreementWithHttpInfo($agreement_uuid, string $contentType = self::contentTypes['getAgreement'][0])
    {
        $request = $this->getAgreementRequest($agreement_uuid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Acquia\CloudApi\Model\Agreement' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Agreement' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Agreement', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\Agreement';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Agreement',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAgreementAsync
     *
     * Return a specific agreement by a provided UUID.
     *
     * @param  string $agreement_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAgreement'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAgreementAsync($agreement_uuid, string $contentType = self::contentTypes['getAgreement'][0])
    {
        return $this->getAgreementAsyncWithHttpInfo($agreement_uuid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAgreementAsyncWithHttpInfo
     *
     * Return a specific agreement by a provided UUID.
     *
     * @param  string $agreement_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAgreement'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAgreementAsyncWithHttpInfo($agreement_uuid, string $contentType = self::contentTypes['getAgreement'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\Agreement';
        $request = $this->getAgreementRequest($agreement_uuid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAgreement'
     *
     * @param  string $agreement_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAgreement'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAgreementRequest($agreement_uuid, string $contentType = self::contentTypes['getAgreement'][0])
    {

        // verify the required parameter 'agreement_uuid' is set
        if ($agreement_uuid === null || (is_array($agreement_uuid) && count($agreement_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $agreement_uuid when calling getAgreement'
            );
        }


        $resourcePath = '/agreements/{agreementUuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($agreement_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'agreementUuid' . '}',
                ObjectSerializer::toPathValue($agreement_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAgreements
     *
     * Return a list of agreements.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAgreements'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\Agreements|\Acquia\CloudApi\Model\Error
     */
    public function getAgreements(string $contentType = self::contentTypes['getAgreements'][0])
    {
        list($response) = $this->getAgreementsWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation getAgreementsWithHttpInfo
     *
     * Return a list of agreements.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAgreements'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\Agreements|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAgreementsWithHttpInfo(string $contentType = self::contentTypes['getAgreements'][0])
    {
        $request = $this->getAgreementsRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Acquia\CloudApi\Model\Agreements' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Agreements' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Agreements', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\Agreements';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Agreements',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAgreementsAsync
     *
     * Return a list of agreements.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAgreements'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAgreementsAsync(string $contentType = self::contentTypes['getAgreements'][0])
    {
        return $this->getAgreementsAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAgreementsAsyncWithHttpInfo
     *
     * Return a list of agreements.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAgreements'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAgreementsAsyncWithHttpInfo(string $contentType = self::contentTypes['getAgreements'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\Agreements';
        $request = $this->getAgreementsRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAgreements'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAgreements'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAgreementsRequest(string $contentType = self::contentTypes['getAgreements'][0])
    {


        $resourcePath = '/agreements';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getInvitees
     *
     * Returns a list of users invited to action this agreement.
     *
     * @param  string $agreement_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInvitees'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\Invitees|\Acquia\CloudApi\Model\Error
     */
    public function getInvitees($agreement_uuid, string $contentType = self::contentTypes['getInvitees'][0])
    {
        list($response) = $this->getInviteesWithHttpInfo($agreement_uuid, $contentType);
        return $response;
    }

    /**
     * Operation getInviteesWithHttpInfo
     *
     * Returns a list of users invited to action this agreement.
     *
     * @param  string $agreement_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInvitees'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\Invitees|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getInviteesWithHttpInfo($agreement_uuid, string $contentType = self::contentTypes['getInvitees'][0])
    {
        $request = $this->getInviteesRequest($agreement_uuid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Acquia\CloudApi\Model\Invitees' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Invitees' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Invitees', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\Invitees';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Invitees',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getInviteesAsync
     *
     * Returns a list of users invited to action this agreement.
     *
     * @param  string $agreement_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInvitees'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInviteesAsync($agreement_uuid, string $contentType = self::contentTypes['getInvitees'][0])
    {
        return $this->getInviteesAsyncWithHttpInfo($agreement_uuid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getInviteesAsyncWithHttpInfo
     *
     * Returns a list of users invited to action this agreement.
     *
     * @param  string $agreement_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInvitees'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInviteesAsyncWithHttpInfo($agreement_uuid, string $contentType = self::contentTypes['getInvitees'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\Invitees';
        $request = $this->getInviteesRequest($agreement_uuid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getInvitees'
     *
     * @param  string $agreement_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInvitees'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getInviteesRequest($agreement_uuid, string $contentType = self::contentTypes['getInvitees'][0])
    {

        // verify the required parameter 'agreement_uuid' is set
        if ($agreement_uuid === null || (is_array($agreement_uuid) && count($agreement_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $agreement_uuid when calling getInvitees'
            );
        }


        $resourcePath = '/agreements/{agreementUuid}/invitees';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($agreement_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'agreementUuid' . '}',
                ObjectSerializer::toPathValue($agreement_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postAcceptAgreement
     *
     * Accepts a legal agreement by UUID.
     *
     * @param  string $agreement_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postAcceptAgreement'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\Message|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error
     */
    public function postAcceptAgreement($agreement_uuid, string $contentType = self::contentTypes['postAcceptAgreement'][0])
    {
        list($response) = $this->postAcceptAgreementWithHttpInfo($agreement_uuid, $contentType);
        return $response;
    }

    /**
     * Operation postAcceptAgreementWithHttpInfo
     *
     * Accepts a legal agreement by UUID.
     *
     * @param  string $agreement_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postAcceptAgreement'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\Message|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function postAcceptAgreementWithHttpInfo($agreement_uuid, string $contentType = self::contentTypes['postAcceptAgreement'][0])
    {
        $request = $this->postAcceptAgreementRequest($agreement_uuid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Acquia\CloudApi\Model\Message' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Message' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Message', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\Message';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Message',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postAcceptAgreementAsync
     *
     * Accepts a legal agreement by UUID.
     *
     * @param  string $agreement_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postAcceptAgreement'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postAcceptAgreementAsync($agreement_uuid, string $contentType = self::contentTypes['postAcceptAgreement'][0])
    {
        return $this->postAcceptAgreementAsyncWithHttpInfo($agreement_uuid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postAcceptAgreementAsyncWithHttpInfo
     *
     * Accepts a legal agreement by UUID.
     *
     * @param  string $agreement_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postAcceptAgreement'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postAcceptAgreementAsyncWithHttpInfo($agreement_uuid, string $contentType = self::contentTypes['postAcceptAgreement'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\Message';
        $request = $this->postAcceptAgreementRequest($agreement_uuid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postAcceptAgreement'
     *
     * @param  string $agreement_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postAcceptAgreement'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postAcceptAgreementRequest($agreement_uuid, string $contentType = self::contentTypes['postAcceptAgreement'][0])
    {

        // verify the required parameter 'agreement_uuid' is set
        if ($agreement_uuid === null || (is_array($agreement_uuid) && count($agreement_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $agreement_uuid when calling postAcceptAgreement'
            );
        }


        $resourcePath = '/agreements/{agreementUuid}/actions/accept';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($agreement_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'agreementUuid' . '}',
                ObjectSerializer::toPathValue($agreement_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postDeclineAgreement
     *
     * Declines a legal agreement by UUID.
     *
     * @param  string $agreement_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postDeclineAgreement'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\Message|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error
     */
    public function postDeclineAgreement($agreement_uuid, string $contentType = self::contentTypes['postDeclineAgreement'][0])
    {
        list($response) = $this->postDeclineAgreementWithHttpInfo($agreement_uuid, $contentType);
        return $response;
    }

    /**
     * Operation postDeclineAgreementWithHttpInfo
     *
     * Declines a legal agreement by UUID.
     *
     * @param  string $agreement_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postDeclineAgreement'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\Message|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function postDeclineAgreementWithHttpInfo($agreement_uuid, string $contentType = self::contentTypes['postDeclineAgreement'][0])
    {
        $request = $this->postDeclineAgreementRequest($agreement_uuid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Acquia\CloudApi\Model\Message' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Message' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Message', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\Message';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Message',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postDeclineAgreementAsync
     *
     * Declines a legal agreement by UUID.
     *
     * @param  string $agreement_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postDeclineAgreement'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postDeclineAgreementAsync($agreement_uuid, string $contentType = self::contentTypes['postDeclineAgreement'][0])
    {
        return $this->postDeclineAgreementAsyncWithHttpInfo($agreement_uuid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postDeclineAgreementAsyncWithHttpInfo
     *
     * Declines a legal agreement by UUID.
     *
     * @param  string $agreement_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postDeclineAgreement'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postDeclineAgreementAsyncWithHttpInfo($agreement_uuid, string $contentType = self::contentTypes['postDeclineAgreement'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\Message';
        $request = $this->postDeclineAgreementRequest($agreement_uuid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postDeclineAgreement'
     *
     * @param  string $agreement_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postDeclineAgreement'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postDeclineAgreementRequest($agreement_uuid, string $contentType = self::contentTypes['postDeclineAgreement'][0])
    {

        // verify the required parameter 'agreement_uuid' is set
        if ($agreement_uuid === null || (is_array($agreement_uuid) && count($agreement_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $agreement_uuid when calling postDeclineAgreement'
            );
        }


        $resourcePath = '/agreements/{agreementUuid}/actions/decline';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($agreement_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'agreementUuid' . '}',
                ObjectSerializer::toPathValue($agreement_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
