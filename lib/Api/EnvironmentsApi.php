<?php
/**
 * EnvironmentsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Acquia\CloudApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Acquia Cloud API Documentation
 *
 * Acquia Cloud API  # Compatibility  ## Stability  The response for all resource endpoints includes an `X-CloudAPI-Stability` header that indicates what changes, if any, Acquia will make to the resource and how changes will be communicated.  There are three levels of stability:  * `prototype`: A prototype resource is experimental and major changes are likely. A prototype resource may not reach production.     * Compatible and emergency changes may be made with no advance notice     * Disruptive changes may be made with one week notice     * Deprecated resources will remain available for at least one month after deprecation * `development`: A resource that is unlikely to change, but is still being worked on, will be marked as in development. These resources are very likely to reach production.     * Compatible and emergency changes may be made with no advance notice     * Disruptive changes may be made with one month notice     * Deprecated resources will remain available for at least six months after deprecation * `production`: A production resource will not introduce breaking changes within a version, and any breaking changes between versions will be communicated ahead of time.  ## Deprecation  Over time, endpoints may become obsolete and will be removed in the future. These endpoints will be marked with an `X-CloudAPI-Deprecated` header indicating the version in which they were deprecated and the reason for the deprecation. Deprecated endpoints may be removed in the next version of the resource.  ## Versioning  All resource endpoints are versioned within the API. Endpoints that have reached production will not introduce breaking changes between versions. Non-production endpoints will not version for changes.  A specific version of an endpoint can be requested via the `Accept` header:      Accept: application/json, version=2  If the version is not specified, the latest version of the endpoint will be used.  Starting with version 3, we will support the current version of an endpoint and the previous version. Version 1 of the API is [provided elsewhere](https://cloudapi.acquia.com/).  ## Errors  Some endpoints will return a 503 status when dependent services are unavailable:      application/json     {         \"error\": \"system\",         \"message\": \"This action is currently unavailable. Please try again later.\"     }  ## Authentication  All Acquia Cloud API calls require authentication to work properly.  Learn more: <a href='https://docs.acquia.com/acquia-cloud/develop/api/auth/' target='_blank'>https://docs.acquia.com/acquia-cloud/develop/api/auth/</a>  ### Example implementation  An example PHP script for making authenticated API requests can be found at <a href='https://docs.acquia.com/_downloads/api-v2-auth.php' target='_blank'>https://docs.acquia.com/_downloads/api-v2-auth.php</a>. This script uses the <a href='https://oauth2-client.thephpleague.com/' target='_blank'>League/oauth2-client</a> library, installed via Composer.
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Acquia\CloudApi\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Acquia\CloudApi\ApiException;
use Acquia\CloudApi\Configuration;
use Acquia\CloudApi\HeaderSelector;
use Acquia\CloudApi\ObjectSerializer;

/**
 * EnvironmentsApi Class Doc Comment
 *
 * @category Class
 * @package  Acquia\CloudApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class EnvironmentsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'deleteCdnByEnvironmentId' => [
            'application/json',
        ],
        'deleteCertificate' => [
            'application/json',
        ],
        'deleteCertificateSigningRequest' => [
            'application/json',
        ],
        'deleteEnvironment' => [
            'application/json',
        ],
        'deleteEnvironmentSearchIndex' => [
            'application/json',
        ],
        'deleteEnvironmentsDatabaseBackup' => [
            'application/json',
        ],
        'deleteEnvironmentsDomain' => [
            'application/json',
        ],
        'deleteEnvironmentsLogForwardingDestination' => [
            'application/json',
        ],
        'deleteEnvironmentsVariable' => [
            'application/json',
        ],
        'getAvailableRuntimes' => [
            'application/json',
        ],
        'getCdnByEnvironmentId' => [
            'application/json',
        ],
        'getCertificate' => [
            'application/json',
        ],
        'getCertificateSigningRequest' => [
            'application/json',
        ],
        'getCertificateSigningRequests' => [
            'application/json',
        ],
        'getCertificates' => [
            'application/json',
        ],
        'getCron' => [
            'application/json',
        ],
        'getCronJobsByEnvironmentId' => [
            'application/json',
        ],
        'getEIPs' => [
            'application/json',
        ],
        'getEnvironment' => [
            'application/json',
        ],
        'getEnvironmentCloudActions' => [
            'application/json',
        ],
        'getEnvironmentSearchIndex' => [
            'application/json',
        ],
        'getEnvironmentSearchIndexes' => [
            'application/json',
        ],
        'getEnvironmentSearchList' => [
            'application/json',
        ],
        'getEnvironmentsDatabase' => [
            'application/json',
        ],
        'getEnvironmentsDatabaseBackup' => [
            'application/json',
        ],
        'getEnvironmentsDatabaseBackups' => [
            'application/json',
        ],
        'getEnvironmentsDatabaseDownloadBackup' => [
            'application/json',
        ],
        'getEnvironmentsDatabasePhpConfig' => [
            'application/json',
        ],
        'getEnvironmentsDatabases' => [
            'application/json',
        ],
        'getEnvironmentsDns' => [
            'application/json',
        ],
        'getEnvironmentsDomain' => [
            'application/json',
        ],
        'getEnvironmentsDomainStatus' => [
            'application/json',
        ],
        'getEnvironmentsDomains' => [
            'application/json',
        ],
        'getEnvironmentsLog' => [
            'application/json',
        ],
        'getEnvironmentsLogForwardingDestination' => [
            'application/json',
        ],
        'getEnvironmentsLogForwardingDestinations' => [
            'application/json',
        ],
        'getEnvironmentsLogs' => [
            'application/json',
        ],
        'getEnvironmentsLogstream' => [
            'application/json',
        ],
        'getEnvironmentsMetrics' => [
            'application/json',
        ],
        'getEnvironmentsServer' => [
            'application/json',
        ],
        'getEnvironmentsServers' => [
            'application/json',
        ],
        'getEnvironmentsSettings' => [
            'application/json',
        ],
        'getEnvironmentsStackMetrics' => [
            'application/json',
        ],
        'getEnvironmentsStackMetricsData' => [
            'application/json',
        ],
        'getEnvironmentsUsageData' => [
            'application/json',
        ],
        'getEnvironmentsUsageLinks' => [
            'application/json',
        ],
        'getEnvironmentsUsageMetricData' => [
            'application/json',
        ],
        'getEnvironmentsVariable' => [
            'application/json',
        ],
        'getEnvironmentsVariables' => [
            'application/json',
        ],
        'getSsl' => [
            'application/json',
        ],
        'postActivateCertificate' => [
            'application/json',
        ],
        'postCdnByEnvironmentId' => [
            'application/json',
        ],
        'postCertificate' => [
            'application/json',
            'application/x-www-form-urlencoded',
        ],
        'postCertificateSigningRequest' => [
            'application/json',
            'application/x-www-form-urlencoded',
        ],
        'postChangeEnvironmentLabel' => [
            'application/json',
            'application/x-www-form-urlencoded',
        ],
        'postDeactivateCertificate' => [
            'application/json',
        ],
        'postDeployArtifact' => [
            'application/json',
            'application/x-www-form-urlencoded',
        ],
        'postEnvironmentCloudActionsDisable' => [
            'application/json',
        ],
        'postEnvironmentCloudActionsEnable' => [
            'application/json',
        ],
        'postEnvironmentCloudActionsReset' => [
            'application/json',
        ],
        'postEnvironmentCronDelete' => [
            'application/json',
        ],
        'postEnvironmentCronDisable' => [
            'application/json',
        ],
        'postEnvironmentCronEnable' => [
            'application/json',
        ],
        'postEnvironmentCrons' => [
            'application/json',
            'application/x-www-form-urlencoded',
        ],
        'postEnvironmentEmailDisable' => [
            'application/json',
        ],
        'postEnvironmentEmailEnable' => [
            'application/json',
        ],
        'postEnvironmentSearchIndexes' => [
            'application/json',
            'application/x-www-form-urlencoded',
        ],
        'postEnvironmentsClearCaches' => [
            'application/json',
        ],
        'postEnvironmentsDatabaseBackups' => [
            'application/json',
        ],
        'postEnvironmentsDatabaseRestoreBackup' => [
            'application/json',
        ],
        'postEnvironmentsDatabases' => [
            'application/json',
            'application/x-www-form-urlencoded',
        ],
        'postEnvironmentsDeployCode' => [
            'application/json',
            'application/x-www-form-urlencoded',
        ],
        'postEnvironmentsDisableLiveDev' => [
            'application/json',
            'application/x-www-form-urlencoded',
        ],
        'postEnvironmentsDisableLogForwardingDestination' => [
            'application/json',
        ],
        'postEnvironmentsDisableProductionMode' => [
            'application/json',
        ],
        'postEnvironmentsDomainClearCaches' => [
            'application/json',
        ],
        'postEnvironmentsDomainClearVarnish' => [
            'application/json',
        ],
        'postEnvironmentsDomains' => [
            'application/json',
            'application/x-www-form-urlencoded',
        ],
        'postEnvironmentsDomainsClearVarnish' => [
            'application/json',
        ],
        'postEnvironmentsEnableLiveDev' => [
            'application/json',
        ],
        'postEnvironmentsEnableLogForwardingDestination' => [
            'application/json',
        ],
        'postEnvironmentsEnableProductionMode' => [
            'application/json',
        ],
        'postEnvironmentsFiles' => [
            'application/json',
            'application/x-www-form-urlencoded',
        ],
        'postEnvironmentsImportSite' => [
            'application/json',
            'application/x-www-form-urlencoded',
        ],
        'postEnvironmentsLog' => [
            'application/hal+json',
        ],
        'postEnvironmentsLogForwardingDestinations' => [
            'application/json',
        ],
        'postEnvironmentsServerReboot' => [
            'application/json',
        ],
        'postEnvironmentsServerRelaunch' => [
            'application/json',
        ],
        'postEnvironmentsServerSuspend' => [
            'application/json',
        ],
        'postEnvironmentsServerUpgrade' => [
            'application/json',
        ],
        'postEnvironmentsSwitchCode' => [
            'application/json',
            'application/x-www-form-urlencoded',
        ],
        'postEnvironmentsVariables' => [
            'application/json',
            'application/x-www-form-urlencoded',
        ],
        'postMigrateEnvironment' => [
            'application/json',
            'application/x-www-form-urlencoded',
        ],
        'postPromoteEnvironment' => [
            'application/json',
            'application/x-www-form-urlencoded',
        ],
        'postRefreshEnvironment' => [
            'application/json',
        ],
        'putCron' => [
            'application/json',
            'application/x-www-form-urlencoded',
        ],
        'putEnvironment' => [
            'application/json',
            'application/x-www-form-urlencoded',
        ],
        'putEnvironmentCloudActions' => [
            'application/json',
            'application/x-www-form-urlencoded',
        ],
        'putEnvironmentSearchIndex' => [
            'application/json',
            'application/x-www-form-urlencoded',
        ],
        'putEnvironmentsLogForwardingDestination' => [
            'application/json',
        ],
        'putEnvironmentsServer' => [
            'application/json',
            'application/x-www-form-urlencoded',
        ],
        'putEnvironmentsVariable' => [
            'application/json',
            'application/x-www-form-urlencoded',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation deleteCdnByEnvironmentId
     *
     * Disables a CDN for an environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCdnByEnvironmentId'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error
     */
    public function deleteCdnByEnvironmentId($environment_id, string $contentType = self::contentTypes['deleteCdnByEnvironmentId'][0])
    {
        list($response) = $this->deleteCdnByEnvironmentIdWithHttpInfo($environment_id, $contentType);
        return $response;
    }

    /**
     * Operation deleteCdnByEnvironmentIdWithHttpInfo
     *
     * Disables a CDN for an environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCdnByEnvironmentId'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteCdnByEnvironmentIdWithHttpInfo($environment_id, string $contentType = self::contentTypes['deleteCdnByEnvironmentId'][0])
    {
        $request = $this->deleteCdnByEnvironmentIdRequest($environment_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Acquia\CloudApi\Model\MessageWithLinks' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\MessageWithLinks' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\MessageWithLinks', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\MessageWithLinks',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteCdnByEnvironmentIdAsync
     *
     * Disables a CDN for an environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCdnByEnvironmentId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCdnByEnvironmentIdAsync($environment_id, string $contentType = self::contentTypes['deleteCdnByEnvironmentId'][0])
    {
        return $this->deleteCdnByEnvironmentIdAsyncWithHttpInfo($environment_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteCdnByEnvironmentIdAsyncWithHttpInfo
     *
     * Disables a CDN for an environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCdnByEnvironmentId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCdnByEnvironmentIdAsyncWithHttpInfo($environment_id, string $contentType = self::contentTypes['deleteCdnByEnvironmentId'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
        $request = $this->deleteCdnByEnvironmentIdRequest($environment_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteCdnByEnvironmentId'
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCdnByEnvironmentId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteCdnByEnvironmentIdRequest($environment_id, string $contentType = self::contentTypes['deleteCdnByEnvironmentId'][0])
    {

        // verify the required parameter 'environment_id' is set
        if ($environment_id === null || (is_array($environment_id) && count($environment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_id when calling deleteCdnByEnvironmentId'
            );
        }


        $resourcePath = '/environments/{environmentId}/cdn';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($environment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'environmentId' . '}',
                ObjectSerializer::toPathValue($environment_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteCertificate
     *
     * Deletes a specific certificate by its ID.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  int $certificate_id An ID that uniquely identifies a certificate. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCertificate'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\ValidationError
     */
    public function deleteCertificate($environment_id, $certificate_id, string $contentType = self::contentTypes['deleteCertificate'][0])
    {
        list($response) = $this->deleteCertificateWithHttpInfo($environment_id, $certificate_id, $contentType);
        return $response;
    }

    /**
     * Operation deleteCertificateWithHttpInfo
     *
     * Deletes a specific certificate by its ID.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  int $certificate_id An ID that uniquely identifies a certificate. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCertificate'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\ValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteCertificateWithHttpInfo($environment_id, $certificate_id, string $contentType = self::contentTypes['deleteCertificate'][0])
    {
        $request = $this->deleteCertificateRequest($environment_id, $certificate_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 202:
                    if ('\Acquia\CloudApi\Model\MessageWithLinks' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\MessageWithLinks' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\MessageWithLinks', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Acquia\CloudApi\Model\ValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\ValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\ValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\MessageWithLinks',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\ValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteCertificateAsync
     *
     * Deletes a specific certificate by its ID.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  int $certificate_id An ID that uniquely identifies a certificate. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCertificate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCertificateAsync($environment_id, $certificate_id, string $contentType = self::contentTypes['deleteCertificate'][0])
    {
        return $this->deleteCertificateAsyncWithHttpInfo($environment_id, $certificate_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteCertificateAsyncWithHttpInfo
     *
     * Deletes a specific certificate by its ID.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  int $certificate_id An ID that uniquely identifies a certificate. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCertificate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCertificateAsyncWithHttpInfo($environment_id, $certificate_id, string $contentType = self::contentTypes['deleteCertificate'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
        $request = $this->deleteCertificateRequest($environment_id, $certificate_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteCertificate'
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  int $certificate_id An ID that uniquely identifies a certificate. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCertificate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteCertificateRequest($environment_id, $certificate_id, string $contentType = self::contentTypes['deleteCertificate'][0])
    {

        // verify the required parameter 'environment_id' is set
        if ($environment_id === null || (is_array($environment_id) && count($environment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_id when calling deleteCertificate'
            );
        }

        // verify the required parameter 'certificate_id' is set
        if ($certificate_id === null || (is_array($certificate_id) && count($certificate_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $certificate_id when calling deleteCertificate'
            );
        }


        $resourcePath = '/environments/{environmentId}/ssl/certificates/{certificateId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($environment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'environmentId' . '}',
                ObjectSerializer::toPathValue($environment_id),
                $resourcePath
            );
        }
        // path params
        if ($certificate_id !== null) {
            $resourcePath = str_replace(
                '{' . 'certificateId' . '}',
                ObjectSerializer::toPathValue($certificate_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteCertificateSigningRequest
     *
     * Deletes the certificate signing request.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  int $certificate_id An ID that uniquely identifies a certificate. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCertificateSigningRequest'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\Message|\Acquia\CloudApi\Model\ValidationError|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error
     */
    public function deleteCertificateSigningRequest($environment_id, $certificate_id, string $contentType = self::contentTypes['deleteCertificateSigningRequest'][0])
    {
        list($response) = $this->deleteCertificateSigningRequestWithHttpInfo($environment_id, $certificate_id, $contentType);
        return $response;
    }

    /**
     * Operation deleteCertificateSigningRequestWithHttpInfo
     *
     * Deletes the certificate signing request.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  int $certificate_id An ID that uniquely identifies a certificate. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCertificateSigningRequest'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\Message|\Acquia\CloudApi\Model\ValidationError|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteCertificateSigningRequestWithHttpInfo($environment_id, $certificate_id, string $contentType = self::contentTypes['deleteCertificateSigningRequest'][0])
    {
        $request = $this->deleteCertificateSigningRequestRequest($environment_id, $certificate_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 202:
                    if ('\Acquia\CloudApi\Model\Message' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Message' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Message', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Acquia\CloudApi\Model\ValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\ValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\ValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\Message';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Message',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\ValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteCertificateSigningRequestAsync
     *
     * Deletes the certificate signing request.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  int $certificate_id An ID that uniquely identifies a certificate. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCertificateSigningRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCertificateSigningRequestAsync($environment_id, $certificate_id, string $contentType = self::contentTypes['deleteCertificateSigningRequest'][0])
    {
        return $this->deleteCertificateSigningRequestAsyncWithHttpInfo($environment_id, $certificate_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteCertificateSigningRequestAsyncWithHttpInfo
     *
     * Deletes the certificate signing request.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  int $certificate_id An ID that uniquely identifies a certificate. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCertificateSigningRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCertificateSigningRequestAsyncWithHttpInfo($environment_id, $certificate_id, string $contentType = self::contentTypes['deleteCertificateSigningRequest'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\Message';
        $request = $this->deleteCertificateSigningRequestRequest($environment_id, $certificate_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteCertificateSigningRequest'
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  int $certificate_id An ID that uniquely identifies a certificate. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCertificateSigningRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteCertificateSigningRequestRequest($environment_id, $certificate_id, string $contentType = self::contentTypes['deleteCertificateSigningRequest'][0])
    {

        // verify the required parameter 'environment_id' is set
        if ($environment_id === null || (is_array($environment_id) && count($environment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_id when calling deleteCertificateSigningRequest'
            );
        }

        // verify the required parameter 'certificate_id' is set
        if ($certificate_id === null || (is_array($certificate_id) && count($certificate_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $certificate_id when calling deleteCertificateSigningRequest'
            );
        }


        $resourcePath = '/environments/{environmentId}/ssl/csrs/{certificateId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($environment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'environmentId' . '}',
                ObjectSerializer::toPathValue($environment_id),
                $resourcePath
            );
        }
        // path params
        if ($certificate_id !== null) {
            $resourcePath = str_replace(
                '{' . 'certificateId' . '}',
                ObjectSerializer::toPathValue($certificate_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteEnvironment
     *
     * Deletes a CD environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteEnvironment'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\Message|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error
     */
    public function deleteEnvironment($environment_id, string $contentType = self::contentTypes['deleteEnvironment'][0])
    {
        list($response) = $this->deleteEnvironmentWithHttpInfo($environment_id, $contentType);
        return $response;
    }

    /**
     * Operation deleteEnvironmentWithHttpInfo
     *
     * Deletes a CD environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteEnvironment'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\Message|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteEnvironmentWithHttpInfo($environment_id, string $contentType = self::contentTypes['deleteEnvironment'][0])
    {
        $request = $this->deleteEnvironmentRequest($environment_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 202:
                    if ('\Acquia\CloudApi\Model\Message' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Message' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Message', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\Message';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Message',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteEnvironmentAsync
     *
     * Deletes a CD environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteEnvironment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEnvironmentAsync($environment_id, string $contentType = self::contentTypes['deleteEnvironment'][0])
    {
        return $this->deleteEnvironmentAsyncWithHttpInfo($environment_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteEnvironmentAsyncWithHttpInfo
     *
     * Deletes a CD environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteEnvironment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEnvironmentAsyncWithHttpInfo($environment_id, string $contentType = self::contentTypes['deleteEnvironment'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\Message';
        $request = $this->deleteEnvironmentRequest($environment_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteEnvironment'
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteEnvironment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteEnvironmentRequest($environment_id, string $contentType = self::contentTypes['deleteEnvironment'][0])
    {

        // verify the required parameter 'environment_id' is set
        if ($environment_id === null || (is_array($environment_id) && count($environment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_id when calling deleteEnvironment'
            );
        }


        $resourcePath = '/environments/{environmentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($environment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'environmentId' . '}',
                ObjectSerializer::toPathValue($environment_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteEnvironmentSearchIndex
     *
     * Removes and deletes a specific search index from an environment
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $index_id An ID that uniquely identifies an index. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteEnvironmentSearchIndex'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error
     */
    public function deleteEnvironmentSearchIndex($environment_id, $index_id, string $contentType = self::contentTypes['deleteEnvironmentSearchIndex'][0])
    {
        list($response) = $this->deleteEnvironmentSearchIndexWithHttpInfo($environment_id, $index_id, $contentType);
        return $response;
    }

    /**
     * Operation deleteEnvironmentSearchIndexWithHttpInfo
     *
     * Removes and deletes a specific search index from an environment
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $index_id An ID that uniquely identifies an index. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteEnvironmentSearchIndex'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteEnvironmentSearchIndexWithHttpInfo($environment_id, $index_id, string $contentType = self::contentTypes['deleteEnvironmentSearchIndex'][0])
    {
        $request = $this->deleteEnvironmentSearchIndexRequest($environment_id, $index_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Acquia\CloudApi\Model\MessageWithLinks' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\MessageWithLinks' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\MessageWithLinks', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\MessageWithLinks',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteEnvironmentSearchIndexAsync
     *
     * Removes and deletes a specific search index from an environment
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $index_id An ID that uniquely identifies an index. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteEnvironmentSearchIndex'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEnvironmentSearchIndexAsync($environment_id, $index_id, string $contentType = self::contentTypes['deleteEnvironmentSearchIndex'][0])
    {
        return $this->deleteEnvironmentSearchIndexAsyncWithHttpInfo($environment_id, $index_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteEnvironmentSearchIndexAsyncWithHttpInfo
     *
     * Removes and deletes a specific search index from an environment
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $index_id An ID that uniquely identifies an index. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteEnvironmentSearchIndex'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEnvironmentSearchIndexAsyncWithHttpInfo($environment_id, $index_id, string $contentType = self::contentTypes['deleteEnvironmentSearchIndex'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
        $request = $this->deleteEnvironmentSearchIndexRequest($environment_id, $index_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteEnvironmentSearchIndex'
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $index_id An ID that uniquely identifies an index. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteEnvironmentSearchIndex'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteEnvironmentSearchIndexRequest($environment_id, $index_id, string $contentType = self::contentTypes['deleteEnvironmentSearchIndex'][0])
    {

        // verify the required parameter 'environment_id' is set
        if ($environment_id === null || (is_array($environment_id) && count($environment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_id when calling deleteEnvironmentSearchIndex'
            );
        }

        // verify the required parameter 'index_id' is set
        if ($index_id === null || (is_array($index_id) && count($index_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $index_id when calling deleteEnvironmentSearchIndex'
            );
        }


        $resourcePath = '/environments/{environmentId}/search/indexes/{indexId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($environment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'environmentId' . '}',
                ObjectSerializer::toPathValue($environment_id),
                $resourcePath
            );
        }
        // path params
        if ($index_id !== null) {
            $resourcePath = str_replace(
                '{' . 'indexId' . '}',
                ObjectSerializer::toPathValue($index_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteEnvironmentsDatabaseBackup
     *
     * Deletes a database backup.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $database_name The database name, typically lower snake case. (required)
     * @param  int $backup_id The database backup identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteEnvironmentsDatabaseBackup'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\ValidationError|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error
     */
    public function deleteEnvironmentsDatabaseBackup($environment_id, $database_name, $backup_id, string $contentType = self::contentTypes['deleteEnvironmentsDatabaseBackup'][0])
    {
        list($response) = $this->deleteEnvironmentsDatabaseBackupWithHttpInfo($environment_id, $database_name, $backup_id, $contentType);
        return $response;
    }

    /**
     * Operation deleteEnvironmentsDatabaseBackupWithHttpInfo
     *
     * Deletes a database backup.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $database_name The database name, typically lower snake case. (required)
     * @param  int $backup_id The database backup identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteEnvironmentsDatabaseBackup'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\ValidationError|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteEnvironmentsDatabaseBackupWithHttpInfo($environment_id, $database_name, $backup_id, string $contentType = self::contentTypes['deleteEnvironmentsDatabaseBackup'][0])
    {
        $request = $this->deleteEnvironmentsDatabaseBackupRequest($environment_id, $database_name, $backup_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 202:
                    if ('\Acquia\CloudApi\Model\MessageWithLinks' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\MessageWithLinks' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\MessageWithLinks', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Acquia\CloudApi\Model\ValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\ValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\ValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\MessageWithLinks',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\ValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteEnvironmentsDatabaseBackupAsync
     *
     * Deletes a database backup.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $database_name The database name, typically lower snake case. (required)
     * @param  int $backup_id The database backup identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteEnvironmentsDatabaseBackup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEnvironmentsDatabaseBackupAsync($environment_id, $database_name, $backup_id, string $contentType = self::contentTypes['deleteEnvironmentsDatabaseBackup'][0])
    {
        return $this->deleteEnvironmentsDatabaseBackupAsyncWithHttpInfo($environment_id, $database_name, $backup_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteEnvironmentsDatabaseBackupAsyncWithHttpInfo
     *
     * Deletes a database backup.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $database_name The database name, typically lower snake case. (required)
     * @param  int $backup_id The database backup identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteEnvironmentsDatabaseBackup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEnvironmentsDatabaseBackupAsyncWithHttpInfo($environment_id, $database_name, $backup_id, string $contentType = self::contentTypes['deleteEnvironmentsDatabaseBackup'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
        $request = $this->deleteEnvironmentsDatabaseBackupRequest($environment_id, $database_name, $backup_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteEnvironmentsDatabaseBackup'
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $database_name The database name, typically lower snake case. (required)
     * @param  int $backup_id The database backup identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteEnvironmentsDatabaseBackup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteEnvironmentsDatabaseBackupRequest($environment_id, $database_name, $backup_id, string $contentType = self::contentTypes['deleteEnvironmentsDatabaseBackup'][0])
    {

        // verify the required parameter 'environment_id' is set
        if ($environment_id === null || (is_array($environment_id) && count($environment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_id when calling deleteEnvironmentsDatabaseBackup'
            );
        }

        // verify the required parameter 'database_name' is set
        if ($database_name === null || (is_array($database_name) && count($database_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $database_name when calling deleteEnvironmentsDatabaseBackup'
            );
        }

        // verify the required parameter 'backup_id' is set
        if ($backup_id === null || (is_array($backup_id) && count($backup_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $backup_id when calling deleteEnvironmentsDatabaseBackup'
            );
        }


        $resourcePath = '/environments/{environmentId}/databases/{databaseName}/backups/{backupId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($environment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'environmentId' . '}',
                ObjectSerializer::toPathValue($environment_id),
                $resourcePath
            );
        }
        // path params
        if ($database_name !== null) {
            $resourcePath = str_replace(
                '{' . 'databaseName' . '}',
                ObjectSerializer::toPathValue($database_name),
                $resourcePath
            );
        }
        // path params
        if ($backup_id !== null) {
            $resourcePath = str_replace(
                '{' . 'backupId' . '}',
                ObjectSerializer::toPathValue($backup_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteEnvironmentsDomain
     *
     * Removes the domain from this environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $domain A domain name. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteEnvironmentsDomain'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error
     */
    public function deleteEnvironmentsDomain($environment_id, $domain, string $contentType = self::contentTypes['deleteEnvironmentsDomain'][0])
    {
        list($response) = $this->deleteEnvironmentsDomainWithHttpInfo($environment_id, $domain, $contentType);
        return $response;
    }

    /**
     * Operation deleteEnvironmentsDomainWithHttpInfo
     *
     * Removes the domain from this environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $domain A domain name. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteEnvironmentsDomain'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteEnvironmentsDomainWithHttpInfo($environment_id, $domain, string $contentType = self::contentTypes['deleteEnvironmentsDomain'][0])
    {
        $request = $this->deleteEnvironmentsDomainRequest($environment_id, $domain, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 202:
                    if ('\Acquia\CloudApi\Model\MessageWithLinks' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\MessageWithLinks' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\MessageWithLinks', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\MessageWithLinks',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteEnvironmentsDomainAsync
     *
     * Removes the domain from this environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $domain A domain name. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteEnvironmentsDomain'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEnvironmentsDomainAsync($environment_id, $domain, string $contentType = self::contentTypes['deleteEnvironmentsDomain'][0])
    {
        return $this->deleteEnvironmentsDomainAsyncWithHttpInfo($environment_id, $domain, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteEnvironmentsDomainAsyncWithHttpInfo
     *
     * Removes the domain from this environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $domain A domain name. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteEnvironmentsDomain'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEnvironmentsDomainAsyncWithHttpInfo($environment_id, $domain, string $contentType = self::contentTypes['deleteEnvironmentsDomain'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
        $request = $this->deleteEnvironmentsDomainRequest($environment_id, $domain, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteEnvironmentsDomain'
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $domain A domain name. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteEnvironmentsDomain'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteEnvironmentsDomainRequest($environment_id, $domain, string $contentType = self::contentTypes['deleteEnvironmentsDomain'][0])
    {

        // verify the required parameter 'environment_id' is set
        if ($environment_id === null || (is_array($environment_id) && count($environment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_id when calling deleteEnvironmentsDomain'
            );
        }

        // verify the required parameter 'domain' is set
        if ($domain === null || (is_array($domain) && count($domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $domain when calling deleteEnvironmentsDomain'
            );
        }


        $resourcePath = '/environments/{environmentId}/domains/{domain}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($environment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'environmentId' . '}',
                ObjectSerializer::toPathValue($environment_id),
                $resourcePath
            );
        }
        // path params
        if ($domain !== null) {
            $resourcePath = str_replace(
                '{' . 'domain' . '}',
                ObjectSerializer::toPathValue($domain),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteEnvironmentsLogForwardingDestination
     *
     * Deletes the specified log forwarding destination.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $log_forwarding_destination_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteEnvironmentsLogForwardingDestination'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\ValidationError|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error
     */
    public function deleteEnvironmentsLogForwardingDestination($environment_id, $log_forwarding_destination_uuid, string $contentType = self::contentTypes['deleteEnvironmentsLogForwardingDestination'][0])
    {
        list($response) = $this->deleteEnvironmentsLogForwardingDestinationWithHttpInfo($environment_id, $log_forwarding_destination_uuid, $contentType);
        return $response;
    }

    /**
     * Operation deleteEnvironmentsLogForwardingDestinationWithHttpInfo
     *
     * Deletes the specified log forwarding destination.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $log_forwarding_destination_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteEnvironmentsLogForwardingDestination'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\ValidationError|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteEnvironmentsLogForwardingDestinationWithHttpInfo($environment_id, $log_forwarding_destination_uuid, string $contentType = self::contentTypes['deleteEnvironmentsLogForwardingDestination'][0])
    {
        $request = $this->deleteEnvironmentsLogForwardingDestinationRequest($environment_id, $log_forwarding_destination_uuid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 202:
                    if ('\Acquia\CloudApi\Model\MessageWithLinks' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\MessageWithLinks' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\MessageWithLinks', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Acquia\CloudApi\Model\ValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\ValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\ValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\MessageWithLinks',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\ValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteEnvironmentsLogForwardingDestinationAsync
     *
     * Deletes the specified log forwarding destination.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $log_forwarding_destination_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteEnvironmentsLogForwardingDestination'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEnvironmentsLogForwardingDestinationAsync($environment_id, $log_forwarding_destination_uuid, string $contentType = self::contentTypes['deleteEnvironmentsLogForwardingDestination'][0])
    {
        return $this->deleteEnvironmentsLogForwardingDestinationAsyncWithHttpInfo($environment_id, $log_forwarding_destination_uuid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteEnvironmentsLogForwardingDestinationAsyncWithHttpInfo
     *
     * Deletes the specified log forwarding destination.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $log_forwarding_destination_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteEnvironmentsLogForwardingDestination'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEnvironmentsLogForwardingDestinationAsyncWithHttpInfo($environment_id, $log_forwarding_destination_uuid, string $contentType = self::contentTypes['deleteEnvironmentsLogForwardingDestination'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
        $request = $this->deleteEnvironmentsLogForwardingDestinationRequest($environment_id, $log_forwarding_destination_uuid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteEnvironmentsLogForwardingDestination'
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $log_forwarding_destination_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteEnvironmentsLogForwardingDestination'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteEnvironmentsLogForwardingDestinationRequest($environment_id, $log_forwarding_destination_uuid, string $contentType = self::contentTypes['deleteEnvironmentsLogForwardingDestination'][0])
    {

        // verify the required parameter 'environment_id' is set
        if ($environment_id === null || (is_array($environment_id) && count($environment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_id when calling deleteEnvironmentsLogForwardingDestination'
            );
        }

        // verify the required parameter 'log_forwarding_destination_uuid' is set
        if ($log_forwarding_destination_uuid === null || (is_array($log_forwarding_destination_uuid) && count($log_forwarding_destination_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $log_forwarding_destination_uuid when calling deleteEnvironmentsLogForwardingDestination'
            );
        }


        $resourcePath = '/environments/{environmentId}/log-forwarding-destinations/{logForwardingDestinationUuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($environment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'environmentId' . '}',
                ObjectSerializer::toPathValue($environment_id),
                $resourcePath
            );
        }
        // path params
        if ($log_forwarding_destination_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'logForwardingDestinationUuid' . '}',
                ObjectSerializer::toPathValue($log_forwarding_destination_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteEnvironmentsVariable
     *
     * Removes an environment variable from an environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $environment_variable_name The environment variable name. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteEnvironmentsVariable'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\ValidationError|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error
     */
    public function deleteEnvironmentsVariable($environment_id, $environment_variable_name, string $contentType = self::contentTypes['deleteEnvironmentsVariable'][0])
    {
        list($response) = $this->deleteEnvironmentsVariableWithHttpInfo($environment_id, $environment_variable_name, $contentType);
        return $response;
    }

    /**
     * Operation deleteEnvironmentsVariableWithHttpInfo
     *
     * Removes an environment variable from an environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $environment_variable_name The environment variable name. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteEnvironmentsVariable'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\ValidationError|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteEnvironmentsVariableWithHttpInfo($environment_id, $environment_variable_name, string $contentType = self::contentTypes['deleteEnvironmentsVariable'][0])
    {
        $request = $this->deleteEnvironmentsVariableRequest($environment_id, $environment_variable_name, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 202:
                    if ('\Acquia\CloudApi\Model\MessageWithLinks' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\MessageWithLinks' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\MessageWithLinks', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Acquia\CloudApi\Model\ValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\ValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\ValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\MessageWithLinks',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\ValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteEnvironmentsVariableAsync
     *
     * Removes an environment variable from an environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $environment_variable_name The environment variable name. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteEnvironmentsVariable'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEnvironmentsVariableAsync($environment_id, $environment_variable_name, string $contentType = self::contentTypes['deleteEnvironmentsVariable'][0])
    {
        return $this->deleteEnvironmentsVariableAsyncWithHttpInfo($environment_id, $environment_variable_name, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteEnvironmentsVariableAsyncWithHttpInfo
     *
     * Removes an environment variable from an environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $environment_variable_name The environment variable name. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteEnvironmentsVariable'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEnvironmentsVariableAsyncWithHttpInfo($environment_id, $environment_variable_name, string $contentType = self::contentTypes['deleteEnvironmentsVariable'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
        $request = $this->deleteEnvironmentsVariableRequest($environment_id, $environment_variable_name, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteEnvironmentsVariable'
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $environment_variable_name The environment variable name. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteEnvironmentsVariable'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteEnvironmentsVariableRequest($environment_id, $environment_variable_name, string $contentType = self::contentTypes['deleteEnvironmentsVariable'][0])
    {

        // verify the required parameter 'environment_id' is set
        if ($environment_id === null || (is_array($environment_id) && count($environment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_id when calling deleteEnvironmentsVariable'
            );
        }

        // verify the required parameter 'environment_variable_name' is set
        if ($environment_variable_name === null || (is_array($environment_variable_name) && count($environment_variable_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_variable_name when calling deleteEnvironmentsVariable'
            );
        }
        if (strlen($environment_variable_name) > 255) {
            throw new \InvalidArgumentException('invalid length for "$environment_variable_name" when calling EnvironmentsApi.deleteEnvironmentsVariable, must be smaller than or equal to 255.');
        }
        if (strlen($environment_variable_name) < 1) {
            throw new \InvalidArgumentException('invalid length for "$environment_variable_name" when calling EnvironmentsApi.deleteEnvironmentsVariable, must be bigger than or equal to 1.');
        }
        if (!preg_match("/^(?!(ACQUIA_|AH_))[A-Za-z_][A-Za-z0-9_]*$/", $environment_variable_name)) {
            throw new \InvalidArgumentException("invalid value for \"environment_variable_name\" when calling EnvironmentsApi.deleteEnvironmentsVariable, must conform to the pattern /^(?!(ACQUIA_|AH_))[A-Za-z_][A-Za-z0-9_]*$/.");
        }
        

        $resourcePath = '/environments/{environmentId}/variables/{environmentVariableName}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($environment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'environmentId' . '}',
                ObjectSerializer::toPathValue($environment_id),
                $resourcePath
            );
        }
        // path params
        if ($environment_variable_name !== null) {
            $resourcePath = str_replace(
                '{' . 'environmentVariableName' . '}',
                ObjectSerializer::toPathValue($environment_variable_name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAvailableRuntimes
     *
     * Return a list of runtimes.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAvailableRuntimes'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\AvailableRuntimes|\Acquia\CloudApi\Model\Error
     */
    public function getAvailableRuntimes($environment_id, string $contentType = self::contentTypes['getAvailableRuntimes'][0])
    {
        list($response) = $this->getAvailableRuntimesWithHttpInfo($environment_id, $contentType);
        return $response;
    }

    /**
     * Operation getAvailableRuntimesWithHttpInfo
     *
     * Return a list of runtimes.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAvailableRuntimes'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\AvailableRuntimes|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAvailableRuntimesWithHttpInfo($environment_id, string $contentType = self::contentTypes['getAvailableRuntimes'][0])
    {
        $request = $this->getAvailableRuntimesRequest($environment_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Acquia\CloudApi\Model\AvailableRuntimes' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\AvailableRuntimes' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\AvailableRuntimes', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\AvailableRuntimes';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\AvailableRuntimes',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAvailableRuntimesAsync
     *
     * Return a list of runtimes.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAvailableRuntimes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAvailableRuntimesAsync($environment_id, string $contentType = self::contentTypes['getAvailableRuntimes'][0])
    {
        return $this->getAvailableRuntimesAsyncWithHttpInfo($environment_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAvailableRuntimesAsyncWithHttpInfo
     *
     * Return a list of runtimes.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAvailableRuntimes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAvailableRuntimesAsyncWithHttpInfo($environment_id, string $contentType = self::contentTypes['getAvailableRuntimes'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\AvailableRuntimes';
        $request = $this->getAvailableRuntimesRequest($environment_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAvailableRuntimes'
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAvailableRuntimes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAvailableRuntimesRequest($environment_id, string $contentType = self::contentTypes['getAvailableRuntimes'][0])
    {

        // verify the required parameter 'environment_id' is set
        if ($environment_id === null || (is_array($environment_id) && count($environment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_id when calling getAvailableRuntimes'
            );
        }


        $resourcePath = '/environments/{environmentId}/available-runtimes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($environment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'environmentId' . '}',
                ObjectSerializer::toPathValue($environment_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCdnByEnvironmentId
     *
     * Returns the CDN status for an environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCdnByEnvironmentId'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\Cdn|\Acquia\CloudApi\Model\Error
     */
    public function getCdnByEnvironmentId($environment_id, string $contentType = self::contentTypes['getCdnByEnvironmentId'][0])
    {
        list($response) = $this->getCdnByEnvironmentIdWithHttpInfo($environment_id, $contentType);
        return $response;
    }

    /**
     * Operation getCdnByEnvironmentIdWithHttpInfo
     *
     * Returns the CDN status for an environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCdnByEnvironmentId'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\Cdn|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCdnByEnvironmentIdWithHttpInfo($environment_id, string $contentType = self::contentTypes['getCdnByEnvironmentId'][0])
    {
        $request = $this->getCdnByEnvironmentIdRequest($environment_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Acquia\CloudApi\Model\Cdn' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Cdn' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Cdn', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\Cdn';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Cdn',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCdnByEnvironmentIdAsync
     *
     * Returns the CDN status for an environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCdnByEnvironmentId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCdnByEnvironmentIdAsync($environment_id, string $contentType = self::contentTypes['getCdnByEnvironmentId'][0])
    {
        return $this->getCdnByEnvironmentIdAsyncWithHttpInfo($environment_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCdnByEnvironmentIdAsyncWithHttpInfo
     *
     * Returns the CDN status for an environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCdnByEnvironmentId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCdnByEnvironmentIdAsyncWithHttpInfo($environment_id, string $contentType = self::contentTypes['getCdnByEnvironmentId'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\Cdn';
        $request = $this->getCdnByEnvironmentIdRequest($environment_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCdnByEnvironmentId'
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCdnByEnvironmentId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCdnByEnvironmentIdRequest($environment_id, string $contentType = self::contentTypes['getCdnByEnvironmentId'][0])
    {

        // verify the required parameter 'environment_id' is set
        if ($environment_id === null || (is_array($environment_id) && count($environment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_id when calling getCdnByEnvironmentId'
            );
        }


        $resourcePath = '/environments/{environmentId}/cdn';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($environment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'environmentId' . '}',
                ObjectSerializer::toPathValue($environment_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCertificate
     *
     * Returns a specific certificate by certificate id.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  int $certificate_id An ID that uniquely identifies a certificate. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCertificate'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\Certificate|\Acquia\CloudApi\Model\Error
     */
    public function getCertificate($environment_id, $certificate_id, string $contentType = self::contentTypes['getCertificate'][0])
    {
        list($response) = $this->getCertificateWithHttpInfo($environment_id, $certificate_id, $contentType);
        return $response;
    }

    /**
     * Operation getCertificateWithHttpInfo
     *
     * Returns a specific certificate by certificate id.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  int $certificate_id An ID that uniquely identifies a certificate. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCertificate'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\Certificate|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCertificateWithHttpInfo($environment_id, $certificate_id, string $contentType = self::contentTypes['getCertificate'][0])
    {
        $request = $this->getCertificateRequest($environment_id, $certificate_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Acquia\CloudApi\Model\Certificate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Certificate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Certificate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\Certificate';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Certificate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCertificateAsync
     *
     * Returns a specific certificate by certificate id.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  int $certificate_id An ID that uniquely identifies a certificate. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCertificate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCertificateAsync($environment_id, $certificate_id, string $contentType = self::contentTypes['getCertificate'][0])
    {
        return $this->getCertificateAsyncWithHttpInfo($environment_id, $certificate_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCertificateAsyncWithHttpInfo
     *
     * Returns a specific certificate by certificate id.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  int $certificate_id An ID that uniquely identifies a certificate. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCertificate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCertificateAsyncWithHttpInfo($environment_id, $certificate_id, string $contentType = self::contentTypes['getCertificate'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\Certificate';
        $request = $this->getCertificateRequest($environment_id, $certificate_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCertificate'
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  int $certificate_id An ID that uniquely identifies a certificate. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCertificate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCertificateRequest($environment_id, $certificate_id, string $contentType = self::contentTypes['getCertificate'][0])
    {

        // verify the required parameter 'environment_id' is set
        if ($environment_id === null || (is_array($environment_id) && count($environment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_id when calling getCertificate'
            );
        }

        // verify the required parameter 'certificate_id' is set
        if ($certificate_id === null || (is_array($certificate_id) && count($certificate_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $certificate_id when calling getCertificate'
            );
        }


        $resourcePath = '/environments/{environmentId}/ssl/certificates/{certificateId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($environment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'environmentId' . '}',
                ObjectSerializer::toPathValue($environment_id),
                $resourcePath
            );
        }
        // path params
        if ($certificate_id !== null) {
            $resourcePath = str_replace(
                '{' . 'certificateId' . '}',
                ObjectSerializer::toPathValue($certificate_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCertificateSigningRequest
     *
     * Returns the certificate signing request for the certificate specified by id.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  int $certificate_id An ID that uniquely identifies a certificate. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCertificateSigningRequest'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\CertificateSigningRequest|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error
     */
    public function getCertificateSigningRequest($environment_id, $certificate_id, string $contentType = self::contentTypes['getCertificateSigningRequest'][0])
    {
        list($response) = $this->getCertificateSigningRequestWithHttpInfo($environment_id, $certificate_id, $contentType);
        return $response;
    }

    /**
     * Operation getCertificateSigningRequestWithHttpInfo
     *
     * Returns the certificate signing request for the certificate specified by id.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  int $certificate_id An ID that uniquely identifies a certificate. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCertificateSigningRequest'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\CertificateSigningRequest|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCertificateSigningRequestWithHttpInfo($environment_id, $certificate_id, string $contentType = self::contentTypes['getCertificateSigningRequest'][0])
    {
        $request = $this->getCertificateSigningRequestRequest($environment_id, $certificate_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Acquia\CloudApi\Model\CertificateSigningRequest' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\CertificateSigningRequest' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\CertificateSigningRequest', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\CertificateSigningRequest';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\CertificateSigningRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCertificateSigningRequestAsync
     *
     * Returns the certificate signing request for the certificate specified by id.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  int $certificate_id An ID that uniquely identifies a certificate. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCertificateSigningRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCertificateSigningRequestAsync($environment_id, $certificate_id, string $contentType = self::contentTypes['getCertificateSigningRequest'][0])
    {
        return $this->getCertificateSigningRequestAsyncWithHttpInfo($environment_id, $certificate_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCertificateSigningRequestAsyncWithHttpInfo
     *
     * Returns the certificate signing request for the certificate specified by id.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  int $certificate_id An ID that uniquely identifies a certificate. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCertificateSigningRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCertificateSigningRequestAsyncWithHttpInfo($environment_id, $certificate_id, string $contentType = self::contentTypes['getCertificateSigningRequest'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\CertificateSigningRequest';
        $request = $this->getCertificateSigningRequestRequest($environment_id, $certificate_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCertificateSigningRequest'
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  int $certificate_id An ID that uniquely identifies a certificate. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCertificateSigningRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCertificateSigningRequestRequest($environment_id, $certificate_id, string $contentType = self::contentTypes['getCertificateSigningRequest'][0])
    {

        // verify the required parameter 'environment_id' is set
        if ($environment_id === null || (is_array($environment_id) && count($environment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_id when calling getCertificateSigningRequest'
            );
        }

        // verify the required parameter 'certificate_id' is set
        if ($certificate_id === null || (is_array($certificate_id) && count($certificate_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $certificate_id when calling getCertificateSigningRequest'
            );
        }


        $resourcePath = '/environments/{environmentId}/ssl/csrs/{certificateId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($environment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'environmentId' . '}',
                ObjectSerializer::toPathValue($environment_id),
                $resourcePath
            );
        }
        // path params
        if ($certificate_id !== null) {
            $resourcePath = str_replace(
                '{' . 'certificateId' . '}',
                ObjectSerializer::toPathValue($certificate_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCertificateSigningRequests
     *
     * Returns certificate signing requests.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCertificateSigningRequests'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\Certificates|\Acquia\CloudApi\Model\Error
     */
    public function getCertificateSigningRequests($environment_id, string $contentType = self::contentTypes['getCertificateSigningRequests'][0])
    {
        list($response) = $this->getCertificateSigningRequestsWithHttpInfo($environment_id, $contentType);
        return $response;
    }

    /**
     * Operation getCertificateSigningRequestsWithHttpInfo
     *
     * Returns certificate signing requests.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCertificateSigningRequests'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\Certificates|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCertificateSigningRequestsWithHttpInfo($environment_id, string $contentType = self::contentTypes['getCertificateSigningRequests'][0])
    {
        $request = $this->getCertificateSigningRequestsRequest($environment_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Acquia\CloudApi\Model\Certificates' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Certificates' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Certificates', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\Certificates';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Certificates',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCertificateSigningRequestsAsync
     *
     * Returns certificate signing requests.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCertificateSigningRequests'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCertificateSigningRequestsAsync($environment_id, string $contentType = self::contentTypes['getCertificateSigningRequests'][0])
    {
        return $this->getCertificateSigningRequestsAsyncWithHttpInfo($environment_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCertificateSigningRequestsAsyncWithHttpInfo
     *
     * Returns certificate signing requests.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCertificateSigningRequests'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCertificateSigningRequestsAsyncWithHttpInfo($environment_id, string $contentType = self::contentTypes['getCertificateSigningRequests'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\Certificates';
        $request = $this->getCertificateSigningRequestsRequest($environment_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCertificateSigningRequests'
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCertificateSigningRequests'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCertificateSigningRequestsRequest($environment_id, string $contentType = self::contentTypes['getCertificateSigningRequests'][0])
    {

        // verify the required parameter 'environment_id' is set
        if ($environment_id === null || (is_array($environment_id) && count($environment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_id when calling getCertificateSigningRequests'
            );
        }


        $resourcePath = '/environments/{environmentId}/ssl/csrs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($environment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'environmentId' . '}',
                ObjectSerializer::toPathValue($environment_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCertificates
     *
     * Return a list of SSL certificates.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCertificates'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\Certificates|\Acquia\CloudApi\Model\Error
     */
    public function getCertificates($environment_id, string $contentType = self::contentTypes['getCertificates'][0])
    {
        list($response) = $this->getCertificatesWithHttpInfo($environment_id, $contentType);
        return $response;
    }

    /**
     * Operation getCertificatesWithHttpInfo
     *
     * Return a list of SSL certificates.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCertificates'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\Certificates|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCertificatesWithHttpInfo($environment_id, string $contentType = self::contentTypes['getCertificates'][0])
    {
        $request = $this->getCertificatesRequest($environment_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Acquia\CloudApi\Model\Certificates' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Certificates' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Certificates', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\Certificates';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Certificates',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCertificatesAsync
     *
     * Return a list of SSL certificates.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCertificates'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCertificatesAsync($environment_id, string $contentType = self::contentTypes['getCertificates'][0])
    {
        return $this->getCertificatesAsyncWithHttpInfo($environment_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCertificatesAsyncWithHttpInfo
     *
     * Return a list of SSL certificates.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCertificates'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCertificatesAsyncWithHttpInfo($environment_id, string $contentType = self::contentTypes['getCertificates'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\Certificates';
        $request = $this->getCertificatesRequest($environment_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCertificates'
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCertificates'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCertificatesRequest($environment_id, string $contentType = self::contentTypes['getCertificates'][0])
    {

        // verify the required parameter 'environment_id' is set
        if ($environment_id === null || (is_array($environment_id) && count($environment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_id when calling getCertificates'
            );
        }


        $resourcePath = '/environments/{environmentId}/ssl/certificates';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($environment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'environmentId' . '}',
                ObjectSerializer::toPathValue($environment_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCron
     *
     * Return details about a specific cron job.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $cron_id An ID that uniquely identifies a cron job. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCron'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\Cron|\Acquia\CloudApi\Model\Error
     */
    public function getCron($environment_id, $cron_id, string $contentType = self::contentTypes['getCron'][0])
    {
        list($response) = $this->getCronWithHttpInfo($environment_id, $cron_id, $contentType);
        return $response;
    }

    /**
     * Operation getCronWithHttpInfo
     *
     * Return details about a specific cron job.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $cron_id An ID that uniquely identifies a cron job. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCron'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\Cron|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCronWithHttpInfo($environment_id, $cron_id, string $contentType = self::contentTypes['getCron'][0])
    {
        $request = $this->getCronRequest($environment_id, $cron_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Acquia\CloudApi\Model\Cron' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Cron' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Cron', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\Cron';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Cron',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCronAsync
     *
     * Return details about a specific cron job.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $cron_id An ID that uniquely identifies a cron job. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCron'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCronAsync($environment_id, $cron_id, string $contentType = self::contentTypes['getCron'][0])
    {
        return $this->getCronAsyncWithHttpInfo($environment_id, $cron_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCronAsyncWithHttpInfo
     *
     * Return details about a specific cron job.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $cron_id An ID that uniquely identifies a cron job. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCron'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCronAsyncWithHttpInfo($environment_id, $cron_id, string $contentType = self::contentTypes['getCron'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\Cron';
        $request = $this->getCronRequest($environment_id, $cron_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCron'
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $cron_id An ID that uniquely identifies a cron job. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCron'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCronRequest($environment_id, $cron_id, string $contentType = self::contentTypes['getCron'][0])
    {

        // verify the required parameter 'environment_id' is set
        if ($environment_id === null || (is_array($environment_id) && count($environment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_id when calling getCron'
            );
        }

        // verify the required parameter 'cron_id' is set
        if ($cron_id === null || (is_array($cron_id) && count($cron_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cron_id when calling getCron'
            );
        }


        $resourcePath = '/environments/{environmentId}/crons/{cronId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($environment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'environmentId' . '}',
                ObjectSerializer::toPathValue($environment_id),
                $resourcePath
            );
        }
        // path params
        if ($cron_id !== null) {
            $resourcePath = str_replace(
                '{' . 'cronId' . '}',
                ObjectSerializer::toPathValue($cron_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCronJobsByEnvironmentId
     *
     * Return environment cron jobs.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCronJobsByEnvironmentId'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\Crons|\Acquia\CloudApi\Model\Error
     */
    public function getCronJobsByEnvironmentId($environment_id, string $contentType = self::contentTypes['getCronJobsByEnvironmentId'][0])
    {
        list($response) = $this->getCronJobsByEnvironmentIdWithHttpInfo($environment_id, $contentType);
        return $response;
    }

    /**
     * Operation getCronJobsByEnvironmentIdWithHttpInfo
     *
     * Return environment cron jobs.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCronJobsByEnvironmentId'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\Crons|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCronJobsByEnvironmentIdWithHttpInfo($environment_id, string $contentType = self::contentTypes['getCronJobsByEnvironmentId'][0])
    {
        $request = $this->getCronJobsByEnvironmentIdRequest($environment_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Acquia\CloudApi\Model\Crons' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Crons' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Crons', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\Crons';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Crons',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCronJobsByEnvironmentIdAsync
     *
     * Return environment cron jobs.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCronJobsByEnvironmentId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCronJobsByEnvironmentIdAsync($environment_id, string $contentType = self::contentTypes['getCronJobsByEnvironmentId'][0])
    {
        return $this->getCronJobsByEnvironmentIdAsyncWithHttpInfo($environment_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCronJobsByEnvironmentIdAsyncWithHttpInfo
     *
     * Return environment cron jobs.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCronJobsByEnvironmentId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCronJobsByEnvironmentIdAsyncWithHttpInfo($environment_id, string $contentType = self::contentTypes['getCronJobsByEnvironmentId'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\Crons';
        $request = $this->getCronJobsByEnvironmentIdRequest($environment_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCronJobsByEnvironmentId'
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCronJobsByEnvironmentId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCronJobsByEnvironmentIdRequest($environment_id, string $contentType = self::contentTypes['getCronJobsByEnvironmentId'][0])
    {

        // verify the required parameter 'environment_id' is set
        if ($environment_id === null || (is_array($environment_id) && count($environment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_id when calling getCronJobsByEnvironmentId'
            );
        }


        $resourcePath = '/environments/{environmentId}/crons';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($environment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'environmentId' . '}',
                ObjectSerializer::toPathValue($environment_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEIPs
     *
     * Return a list of Web EIPs.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEIPs'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\EIPs|\Acquia\CloudApi\Model\Error
     */
    public function getEIPs($environment_id, string $contentType = self::contentTypes['getEIPs'][0])
    {
        list($response) = $this->getEIPsWithHttpInfo($environment_id, $contentType);
        return $response;
    }

    /**
     * Operation getEIPsWithHttpInfo
     *
     * Return a list of Web EIPs.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEIPs'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\EIPs|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEIPsWithHttpInfo($environment_id, string $contentType = self::contentTypes['getEIPs'][0])
    {
        $request = $this->getEIPsRequest($environment_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Acquia\CloudApi\Model\EIPs' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\EIPs' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\EIPs', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\EIPs';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\EIPs',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEIPsAsync
     *
     * Return a list of Web EIPs.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEIPs'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEIPsAsync($environment_id, string $contentType = self::contentTypes['getEIPs'][0])
    {
        return $this->getEIPsAsyncWithHttpInfo($environment_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEIPsAsyncWithHttpInfo
     *
     * Return a list of Web EIPs.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEIPs'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEIPsAsyncWithHttpInfo($environment_id, string $contentType = self::contentTypes['getEIPs'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\EIPs';
        $request = $this->getEIPsRequest($environment_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEIPs'
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEIPs'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEIPsRequest($environment_id, string $contentType = self::contentTypes['getEIPs'][0])
    {

        // verify the required parameter 'environment_id' is set
        if ($environment_id === null || (is_array($environment_id) && count($environment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_id when calling getEIPs'
            );
        }


        $resourcePath = '/environments/{environmentId}/eips';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($environment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'environmentId' . '}',
                ObjectSerializer::toPathValue($environment_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnvironment
     *
     * Return details about a specific environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironment'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\Environment|\Acquia\CloudApi\Model\Error
     */
    public function getEnvironment($environment_id, string $contentType = self::contentTypes['getEnvironment'][0])
    {
        list($response) = $this->getEnvironmentWithHttpInfo($environment_id, $contentType);
        return $response;
    }

    /**
     * Operation getEnvironmentWithHttpInfo
     *
     * Return details about a specific environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironment'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\Environment|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnvironmentWithHttpInfo($environment_id, string $contentType = self::contentTypes['getEnvironment'][0])
    {
        $request = $this->getEnvironmentRequest($environment_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Acquia\CloudApi\Model\Environment' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Environment' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Environment', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\Environment';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Environment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnvironmentAsync
     *
     * Return details about a specific environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnvironmentAsync($environment_id, string $contentType = self::contentTypes['getEnvironment'][0])
    {
        return $this->getEnvironmentAsyncWithHttpInfo($environment_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnvironmentAsyncWithHttpInfo
     *
     * Return details about a specific environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnvironmentAsyncWithHttpInfo($environment_id, string $contentType = self::contentTypes['getEnvironment'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\Environment';
        $request = $this->getEnvironmentRequest($environment_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnvironment'
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEnvironmentRequest($environment_id, string $contentType = self::contentTypes['getEnvironment'][0])
    {

        // verify the required parameter 'environment_id' is set
        if ($environment_id === null || (is_array($environment_id) && count($environment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_id when calling getEnvironment'
            );
        }


        $resourcePath = '/environments/{environmentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($environment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'environmentId' . '}',
                ObjectSerializer::toPathValue($environment_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnvironmentCloudActions
     *
     * Returns a list of Cloud Actions.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentCloudActions'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\CloudActions|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error
     */
    public function getEnvironmentCloudActions($environment_id, string $contentType = self::contentTypes['getEnvironmentCloudActions'][0])
    {
        list($response) = $this->getEnvironmentCloudActionsWithHttpInfo($environment_id, $contentType);
        return $response;
    }

    /**
     * Operation getEnvironmentCloudActionsWithHttpInfo
     *
     * Returns a list of Cloud Actions.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentCloudActions'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\CloudActions|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnvironmentCloudActionsWithHttpInfo($environment_id, string $contentType = self::contentTypes['getEnvironmentCloudActions'][0])
    {
        $request = $this->getEnvironmentCloudActionsRequest($environment_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Acquia\CloudApi\Model\CloudActions' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\CloudActions' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\CloudActions', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\CloudActions';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\CloudActions',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnvironmentCloudActionsAsync
     *
     * Returns a list of Cloud Actions.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentCloudActions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnvironmentCloudActionsAsync($environment_id, string $contentType = self::contentTypes['getEnvironmentCloudActions'][0])
    {
        return $this->getEnvironmentCloudActionsAsyncWithHttpInfo($environment_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnvironmentCloudActionsAsyncWithHttpInfo
     *
     * Returns a list of Cloud Actions.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentCloudActions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnvironmentCloudActionsAsyncWithHttpInfo($environment_id, string $contentType = self::contentTypes['getEnvironmentCloudActions'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\CloudActions';
        $request = $this->getEnvironmentCloudActionsRequest($environment_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnvironmentCloudActions'
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentCloudActions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEnvironmentCloudActionsRequest($environment_id, string $contentType = self::contentTypes['getEnvironmentCloudActions'][0])
    {

        // verify the required parameter 'environment_id' is set
        if ($environment_id === null || (is_array($environment_id) && count($environment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_id when calling getEnvironmentCloudActions'
            );
        }


        $resourcePath = '/environments/{environmentId}/cloud-actions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($environment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'environmentId' . '}',
                ObjectSerializer::toPathValue($environment_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnvironmentSearchIndex
     *
     * Returns a search configuration set for an application
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $index_id An ID that uniquely identifies an index. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentSearchIndex'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\Index|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error
     */
    public function getEnvironmentSearchIndex($environment_id, $index_id, string $contentType = self::contentTypes['getEnvironmentSearchIndex'][0])
    {
        list($response) = $this->getEnvironmentSearchIndexWithHttpInfo($environment_id, $index_id, $contentType);
        return $response;
    }

    /**
     * Operation getEnvironmentSearchIndexWithHttpInfo
     *
     * Returns a search configuration set for an application
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $index_id An ID that uniquely identifies an index. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentSearchIndex'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\Index|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnvironmentSearchIndexWithHttpInfo($environment_id, $index_id, string $contentType = self::contentTypes['getEnvironmentSearchIndex'][0])
    {
        $request = $this->getEnvironmentSearchIndexRequest($environment_id, $index_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Acquia\CloudApi\Model\Index' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Index' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Index', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\Index';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Index',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnvironmentSearchIndexAsync
     *
     * Returns a search configuration set for an application
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $index_id An ID that uniquely identifies an index. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentSearchIndex'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnvironmentSearchIndexAsync($environment_id, $index_id, string $contentType = self::contentTypes['getEnvironmentSearchIndex'][0])
    {
        return $this->getEnvironmentSearchIndexAsyncWithHttpInfo($environment_id, $index_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnvironmentSearchIndexAsyncWithHttpInfo
     *
     * Returns a search configuration set for an application
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $index_id An ID that uniquely identifies an index. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentSearchIndex'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnvironmentSearchIndexAsyncWithHttpInfo($environment_id, $index_id, string $contentType = self::contentTypes['getEnvironmentSearchIndex'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\Index';
        $request = $this->getEnvironmentSearchIndexRequest($environment_id, $index_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnvironmentSearchIndex'
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $index_id An ID that uniquely identifies an index. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentSearchIndex'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEnvironmentSearchIndexRequest($environment_id, $index_id, string $contentType = self::contentTypes['getEnvironmentSearchIndex'][0])
    {

        // verify the required parameter 'environment_id' is set
        if ($environment_id === null || (is_array($environment_id) && count($environment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_id when calling getEnvironmentSearchIndex'
            );
        }

        // verify the required parameter 'index_id' is set
        if ($index_id === null || (is_array($index_id) && count($index_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $index_id when calling getEnvironmentSearchIndex'
            );
        }


        $resourcePath = '/environments/{environmentId}/search/indexes/{indexId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($environment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'environmentId' . '}',
                ObjectSerializer::toPathValue($environment_id),
                $resourcePath
            );
        }
        // path params
        if ($index_id !== null) {
            $resourcePath = str_replace(
                '{' . 'indexId' . '}',
                ObjectSerializer::toPathValue($index_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnvironmentSearchIndexes
     *
     * Returns a collection of search indexes for an environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentSearchIndexes'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\Indexes|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error
     */
    public function getEnvironmentSearchIndexes($environment_id, string $contentType = self::contentTypes['getEnvironmentSearchIndexes'][0])
    {
        list($response) = $this->getEnvironmentSearchIndexesWithHttpInfo($environment_id, $contentType);
        return $response;
    }

    /**
     * Operation getEnvironmentSearchIndexesWithHttpInfo
     *
     * Returns a collection of search indexes for an environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentSearchIndexes'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\Indexes|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnvironmentSearchIndexesWithHttpInfo($environment_id, string $contentType = self::contentTypes['getEnvironmentSearchIndexes'][0])
    {
        $request = $this->getEnvironmentSearchIndexesRequest($environment_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Acquia\CloudApi\Model\Indexes' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Indexes' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Indexes', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\Indexes';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Indexes',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnvironmentSearchIndexesAsync
     *
     * Returns a collection of search indexes for an environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentSearchIndexes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnvironmentSearchIndexesAsync($environment_id, string $contentType = self::contentTypes['getEnvironmentSearchIndexes'][0])
    {
        return $this->getEnvironmentSearchIndexesAsyncWithHttpInfo($environment_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnvironmentSearchIndexesAsyncWithHttpInfo
     *
     * Returns a collection of search indexes for an environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentSearchIndexes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnvironmentSearchIndexesAsyncWithHttpInfo($environment_id, string $contentType = self::contentTypes['getEnvironmentSearchIndexes'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\Indexes';
        $request = $this->getEnvironmentSearchIndexesRequest($environment_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnvironmentSearchIndexes'
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentSearchIndexes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEnvironmentSearchIndexesRequest($environment_id, string $contentType = self::contentTypes['getEnvironmentSearchIndexes'][0])
    {

        // verify the required parameter 'environment_id' is set
        if ($environment_id === null || (is_array($environment_id) && count($environment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_id when calling getEnvironmentSearchIndexes'
            );
        }


        $resourcePath = '/environments/{environmentId}/search/indexes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($environment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'environmentId' . '}',
                ObjectSerializer::toPathValue($environment_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnvironmentSearchList
     *
     * Returns a traversal endpoint for search entities for the environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentSearchList'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\Search|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error
     */
    public function getEnvironmentSearchList($environment_id, string $contentType = self::contentTypes['getEnvironmentSearchList'][0])
    {
        list($response) = $this->getEnvironmentSearchListWithHttpInfo($environment_id, $contentType);
        return $response;
    }

    /**
     * Operation getEnvironmentSearchListWithHttpInfo
     *
     * Returns a traversal endpoint for search entities for the environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentSearchList'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\Search|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnvironmentSearchListWithHttpInfo($environment_id, string $contentType = self::contentTypes['getEnvironmentSearchList'][0])
    {
        $request = $this->getEnvironmentSearchListRequest($environment_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Acquia\CloudApi\Model\Search' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Search' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Search', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\Search';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Search',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnvironmentSearchListAsync
     *
     * Returns a traversal endpoint for search entities for the environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentSearchList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnvironmentSearchListAsync($environment_id, string $contentType = self::contentTypes['getEnvironmentSearchList'][0])
    {
        return $this->getEnvironmentSearchListAsyncWithHttpInfo($environment_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnvironmentSearchListAsyncWithHttpInfo
     *
     * Returns a traversal endpoint for search entities for the environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentSearchList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnvironmentSearchListAsyncWithHttpInfo($environment_id, string $contentType = self::contentTypes['getEnvironmentSearchList'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\Search';
        $request = $this->getEnvironmentSearchListRequest($environment_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnvironmentSearchList'
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentSearchList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEnvironmentSearchListRequest($environment_id, string $contentType = self::contentTypes['getEnvironmentSearchList'][0])
    {

        // verify the required parameter 'environment_id' is set
        if ($environment_id === null || (is_array($environment_id) && count($environment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_id when calling getEnvironmentSearchList'
            );
        }


        $resourcePath = '/environments/{environmentId}/search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($environment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'environmentId' . '}',
                ObjectSerializer::toPathValue($environment_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnvironmentsDatabase
     *
     * Return details about a specific database.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $database_name The database name, typically lower snake case. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsDatabase'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\Database|\Acquia\CloudApi\Model\Error
     */
    public function getEnvironmentsDatabase($environment_id, $database_name, string $contentType = self::contentTypes['getEnvironmentsDatabase'][0])
    {
        list($response) = $this->getEnvironmentsDatabaseWithHttpInfo($environment_id, $database_name, $contentType);
        return $response;
    }

    /**
     * Operation getEnvironmentsDatabaseWithHttpInfo
     *
     * Return details about a specific database.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $database_name The database name, typically lower snake case. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsDatabase'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\Database|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnvironmentsDatabaseWithHttpInfo($environment_id, $database_name, string $contentType = self::contentTypes['getEnvironmentsDatabase'][0])
    {
        $request = $this->getEnvironmentsDatabaseRequest($environment_id, $database_name, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Acquia\CloudApi\Model\Database' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Database' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Database', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\Database';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Database',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnvironmentsDatabaseAsync
     *
     * Return details about a specific database.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $database_name The database name, typically lower snake case. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsDatabase'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnvironmentsDatabaseAsync($environment_id, $database_name, string $contentType = self::contentTypes['getEnvironmentsDatabase'][0])
    {
        return $this->getEnvironmentsDatabaseAsyncWithHttpInfo($environment_id, $database_name, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnvironmentsDatabaseAsyncWithHttpInfo
     *
     * Return details about a specific database.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $database_name The database name, typically lower snake case. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsDatabase'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnvironmentsDatabaseAsyncWithHttpInfo($environment_id, $database_name, string $contentType = self::contentTypes['getEnvironmentsDatabase'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\Database';
        $request = $this->getEnvironmentsDatabaseRequest($environment_id, $database_name, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnvironmentsDatabase'
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $database_name The database name, typically lower snake case. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsDatabase'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEnvironmentsDatabaseRequest($environment_id, $database_name, string $contentType = self::contentTypes['getEnvironmentsDatabase'][0])
    {

        // verify the required parameter 'environment_id' is set
        if ($environment_id === null || (is_array($environment_id) && count($environment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_id when calling getEnvironmentsDatabase'
            );
        }

        // verify the required parameter 'database_name' is set
        if ($database_name === null || (is_array($database_name) && count($database_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $database_name when calling getEnvironmentsDatabase'
            );
        }


        $resourcePath = '/environments/{environmentId}/databases/{databaseName}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($environment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'environmentId' . '}',
                ObjectSerializer::toPathValue($environment_id),
                $resourcePath
            );
        }
        // path params
        if ($database_name !== null) {
            $resourcePath = str_replace(
                '{' . 'databaseName' . '}',
                ObjectSerializer::toPathValue($database_name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnvironmentsDatabaseBackup
     *
     * Return details about a specific backup.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $database_name The database name, typically lower snake case. (required)
     * @param  int $backup_id The database backup identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsDatabaseBackup'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\Backup|\Acquia\CloudApi\Model\Error
     */
    public function getEnvironmentsDatabaseBackup($environment_id, $database_name, $backup_id, string $contentType = self::contentTypes['getEnvironmentsDatabaseBackup'][0])
    {
        list($response) = $this->getEnvironmentsDatabaseBackupWithHttpInfo($environment_id, $database_name, $backup_id, $contentType);
        return $response;
    }

    /**
     * Operation getEnvironmentsDatabaseBackupWithHttpInfo
     *
     * Return details about a specific backup.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $database_name The database name, typically lower snake case. (required)
     * @param  int $backup_id The database backup identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsDatabaseBackup'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\Backup|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnvironmentsDatabaseBackupWithHttpInfo($environment_id, $database_name, $backup_id, string $contentType = self::contentTypes['getEnvironmentsDatabaseBackup'][0])
    {
        $request = $this->getEnvironmentsDatabaseBackupRequest($environment_id, $database_name, $backup_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Acquia\CloudApi\Model\Backup' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Backup' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Backup', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\Backup';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Backup',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnvironmentsDatabaseBackupAsync
     *
     * Return details about a specific backup.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $database_name The database name, typically lower snake case. (required)
     * @param  int $backup_id The database backup identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsDatabaseBackup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnvironmentsDatabaseBackupAsync($environment_id, $database_name, $backup_id, string $contentType = self::contentTypes['getEnvironmentsDatabaseBackup'][0])
    {
        return $this->getEnvironmentsDatabaseBackupAsyncWithHttpInfo($environment_id, $database_name, $backup_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnvironmentsDatabaseBackupAsyncWithHttpInfo
     *
     * Return details about a specific backup.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $database_name The database name, typically lower snake case. (required)
     * @param  int $backup_id The database backup identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsDatabaseBackup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnvironmentsDatabaseBackupAsyncWithHttpInfo($environment_id, $database_name, $backup_id, string $contentType = self::contentTypes['getEnvironmentsDatabaseBackup'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\Backup';
        $request = $this->getEnvironmentsDatabaseBackupRequest($environment_id, $database_name, $backup_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnvironmentsDatabaseBackup'
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $database_name The database name, typically lower snake case. (required)
     * @param  int $backup_id The database backup identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsDatabaseBackup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEnvironmentsDatabaseBackupRequest($environment_id, $database_name, $backup_id, string $contentType = self::contentTypes['getEnvironmentsDatabaseBackup'][0])
    {

        // verify the required parameter 'environment_id' is set
        if ($environment_id === null || (is_array($environment_id) && count($environment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_id when calling getEnvironmentsDatabaseBackup'
            );
        }

        // verify the required parameter 'database_name' is set
        if ($database_name === null || (is_array($database_name) && count($database_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $database_name when calling getEnvironmentsDatabaseBackup'
            );
        }

        // verify the required parameter 'backup_id' is set
        if ($backup_id === null || (is_array($backup_id) && count($backup_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $backup_id when calling getEnvironmentsDatabaseBackup'
            );
        }


        $resourcePath = '/environments/{environmentId}/databases/{databaseName}/backups/{backupId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($environment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'environmentId' . '}',
                ObjectSerializer::toPathValue($environment_id),
                $resourcePath
            );
        }
        // path params
        if ($database_name !== null) {
            $resourcePath = str_replace(
                '{' . 'databaseName' . '}',
                ObjectSerializer::toPathValue($database_name),
                $resourcePath
            );
        }
        // path params
        if ($backup_id !== null) {
            $resourcePath = str_replace(
                '{' . 'backupId' . '}',
                ObjectSerializer::toPathValue($backup_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnvironmentsDatabaseBackups
     *
     * Returns a list of backups.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $database_name The database name, typically lower snake case. (required)
     * @param  string $from (Use filter &#x60;from&#x60; instead.) Specifies an [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) formatted date. Used in conjunction with &#x60;to&#x60; query. (optional) (deprecated)
     * @param  string $to (Use filter &#x60;to&#x60; instead.) Specifies an [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) formatted date. Used in conjunction with &#x60;from&#x60; query. (optional) (deprecated)
     * @param  string $sort A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable. (optional)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;) (optional)
     * @param  int $limit The maximum number of items to return. (optional)
     * @param  int $offset An integer to signify the offset to paginate from. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsDatabaseBackups'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\Backups|\Acquia\CloudApi\Model\Error
     */
    public function getEnvironmentsDatabaseBackups($environment_id, $database_name, $from = null, $to = null, $sort = null, $filter = null, $limit = null, $offset = null, string $contentType = self::contentTypes['getEnvironmentsDatabaseBackups'][0])
    {
        list($response) = $this->getEnvironmentsDatabaseBackupsWithHttpInfo($environment_id, $database_name, $from, $to, $sort, $filter, $limit, $offset, $contentType);
        return $response;
    }

    /**
     * Operation getEnvironmentsDatabaseBackupsWithHttpInfo
     *
     * Returns a list of backups.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $database_name The database name, typically lower snake case. (required)
     * @param  string $from (Use filter &#x60;from&#x60; instead.) Specifies an [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) formatted date. Used in conjunction with &#x60;to&#x60; query. (optional) (deprecated)
     * @param  string $to (Use filter &#x60;to&#x60; instead.) Specifies an [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) formatted date. Used in conjunction with &#x60;from&#x60; query. (optional) (deprecated)
     * @param  string $sort A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable. (optional)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;) (optional)
     * @param  int $limit The maximum number of items to return. (optional)
     * @param  int $offset An integer to signify the offset to paginate from. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsDatabaseBackups'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\Backups|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnvironmentsDatabaseBackupsWithHttpInfo($environment_id, $database_name, $from = null, $to = null, $sort = null, $filter = null, $limit = null, $offset = null, string $contentType = self::contentTypes['getEnvironmentsDatabaseBackups'][0])
    {
        $request = $this->getEnvironmentsDatabaseBackupsRequest($environment_id, $database_name, $from, $to, $sort, $filter, $limit, $offset, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Acquia\CloudApi\Model\Backups' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Backups' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Backups', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\Backups';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Backups',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnvironmentsDatabaseBackupsAsync
     *
     * Returns a list of backups.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $database_name The database name, typically lower snake case. (required)
     * @param  string $from (Use filter &#x60;from&#x60; instead.) Specifies an [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) formatted date. Used in conjunction with &#x60;to&#x60; query. (optional) (deprecated)
     * @param  string $to (Use filter &#x60;to&#x60; instead.) Specifies an [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) formatted date. Used in conjunction with &#x60;from&#x60; query. (optional) (deprecated)
     * @param  string $sort A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable. (optional)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;) (optional)
     * @param  int $limit The maximum number of items to return. (optional)
     * @param  int $offset An integer to signify the offset to paginate from. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsDatabaseBackups'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnvironmentsDatabaseBackupsAsync($environment_id, $database_name, $from = null, $to = null, $sort = null, $filter = null, $limit = null, $offset = null, string $contentType = self::contentTypes['getEnvironmentsDatabaseBackups'][0])
    {
        return $this->getEnvironmentsDatabaseBackupsAsyncWithHttpInfo($environment_id, $database_name, $from, $to, $sort, $filter, $limit, $offset, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnvironmentsDatabaseBackupsAsyncWithHttpInfo
     *
     * Returns a list of backups.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $database_name The database name, typically lower snake case. (required)
     * @param  string $from (Use filter &#x60;from&#x60; instead.) Specifies an [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) formatted date. Used in conjunction with &#x60;to&#x60; query. (optional) (deprecated)
     * @param  string $to (Use filter &#x60;to&#x60; instead.) Specifies an [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) formatted date. Used in conjunction with &#x60;from&#x60; query. (optional) (deprecated)
     * @param  string $sort A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable. (optional)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;) (optional)
     * @param  int $limit The maximum number of items to return. (optional)
     * @param  int $offset An integer to signify the offset to paginate from. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsDatabaseBackups'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnvironmentsDatabaseBackupsAsyncWithHttpInfo($environment_id, $database_name, $from = null, $to = null, $sort = null, $filter = null, $limit = null, $offset = null, string $contentType = self::contentTypes['getEnvironmentsDatabaseBackups'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\Backups';
        $request = $this->getEnvironmentsDatabaseBackupsRequest($environment_id, $database_name, $from, $to, $sort, $filter, $limit, $offset, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnvironmentsDatabaseBackups'
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $database_name The database name, typically lower snake case. (required)
     * @param  string $from (Use filter &#x60;from&#x60; instead.) Specifies an [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) formatted date. Used in conjunction with &#x60;to&#x60; query. (optional) (deprecated)
     * @param  string $to (Use filter &#x60;to&#x60; instead.) Specifies an [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) formatted date. Used in conjunction with &#x60;from&#x60; query. (optional) (deprecated)
     * @param  string $sort A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable. (optional)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;) (optional)
     * @param  int $limit The maximum number of items to return. (optional)
     * @param  int $offset An integer to signify the offset to paginate from. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsDatabaseBackups'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEnvironmentsDatabaseBackupsRequest($environment_id, $database_name, $from = null, $to = null, $sort = null, $filter = null, $limit = null, $offset = null, string $contentType = self::contentTypes['getEnvironmentsDatabaseBackups'][0])
    {

        // verify the required parameter 'environment_id' is set
        if ($environment_id === null || (is_array($environment_id) && count($environment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_id when calling getEnvironmentsDatabaseBackups'
            );
        }

        // verify the required parameter 'database_name' is set
        if ($database_name === null || (is_array($database_name) && count($database_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $database_name when calling getEnvironmentsDatabaseBackups'
            );
        }



        
        



        $resourcePath = '/environments/{environmentId}/databases/{databaseName}/backups';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from,
            'from', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $to,
            'to', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            'filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($environment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'environmentId' . '}',
                ObjectSerializer::toPathValue($environment_id),
                $resourcePath
            );
        }
        // path params
        if ($database_name !== null) {
            $resourcePath = str_replace(
                '{' . 'databaseName' . '}',
                ObjectSerializer::toPathValue($database_name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnvironmentsDatabaseDownloadBackup
     *
     * Downloads the database backup file.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $database_name The database name, typically lower snake case. (required)
     * @param  int $backup_id The database backup identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsDatabaseDownloadBackup'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error
     */
    public function getEnvironmentsDatabaseDownloadBackup($environment_id, $database_name, $backup_id, string $contentType = self::contentTypes['getEnvironmentsDatabaseDownloadBackup'][0])
    {
        list($response) = $this->getEnvironmentsDatabaseDownloadBackupWithHttpInfo($environment_id, $database_name, $backup_id, $contentType);
        return $response;
    }

    /**
     * Operation getEnvironmentsDatabaseDownloadBackupWithHttpInfo
     *
     * Downloads the database backup file.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $database_name The database name, typically lower snake case. (required)
     * @param  int $backup_id The database backup identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsDatabaseDownloadBackup'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnvironmentsDatabaseDownloadBackupWithHttpInfo($environment_id, $database_name, $backup_id, string $contentType = self::contentTypes['getEnvironmentsDatabaseDownloadBackup'][0])
    {
        $request = $this->getEnvironmentsDatabaseDownloadBackupRequest($environment_id, $database_name, $backup_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SplFileObject' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnvironmentsDatabaseDownloadBackupAsync
     *
     * Downloads the database backup file.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $database_name The database name, typically lower snake case. (required)
     * @param  int $backup_id The database backup identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsDatabaseDownloadBackup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnvironmentsDatabaseDownloadBackupAsync($environment_id, $database_name, $backup_id, string $contentType = self::contentTypes['getEnvironmentsDatabaseDownloadBackup'][0])
    {
        return $this->getEnvironmentsDatabaseDownloadBackupAsyncWithHttpInfo($environment_id, $database_name, $backup_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnvironmentsDatabaseDownloadBackupAsyncWithHttpInfo
     *
     * Downloads the database backup file.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $database_name The database name, typically lower snake case. (required)
     * @param  int $backup_id The database backup identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsDatabaseDownloadBackup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnvironmentsDatabaseDownloadBackupAsyncWithHttpInfo($environment_id, $database_name, $backup_id, string $contentType = self::contentTypes['getEnvironmentsDatabaseDownloadBackup'][0])
    {
        $returnType = '\SplFileObject';
        $request = $this->getEnvironmentsDatabaseDownloadBackupRequest($environment_id, $database_name, $backup_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnvironmentsDatabaseDownloadBackup'
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $database_name The database name, typically lower snake case. (required)
     * @param  int $backup_id The database backup identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsDatabaseDownloadBackup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEnvironmentsDatabaseDownloadBackupRequest($environment_id, $database_name, $backup_id, string $contentType = self::contentTypes['getEnvironmentsDatabaseDownloadBackup'][0])
    {

        // verify the required parameter 'environment_id' is set
        if ($environment_id === null || (is_array($environment_id) && count($environment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_id when calling getEnvironmentsDatabaseDownloadBackup'
            );
        }

        // verify the required parameter 'database_name' is set
        if ($database_name === null || (is_array($database_name) && count($database_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $database_name when calling getEnvironmentsDatabaseDownloadBackup'
            );
        }

        // verify the required parameter 'backup_id' is set
        if ($backup_id === null || (is_array($backup_id) && count($backup_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $backup_id when calling getEnvironmentsDatabaseDownloadBackup'
            );
        }


        $resourcePath = '/environments/{environmentId}/databases/{databaseName}/backups/{backupId}/actions/download';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($environment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'environmentId' . '}',
                ObjectSerializer::toPathValue($environment_id),
                $resourcePath
            );
        }
        // path params
        if ($database_name !== null) {
            $resourcePath = str_replace(
                '{' . 'databaseName' . '}',
                ObjectSerializer::toPathValue($database_name),
                $resourcePath
            );
        }
        // path params
        if ($backup_id !== null) {
            $resourcePath = str_replace(
                '{' . 'backupId' . '}',
                ObjectSerializer::toPathValue($backup_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/octet-stream', 'application/hal+json', 'application/json', 'text/html', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnvironmentsDatabasePhpConfig
     *
     * Returns PHP configuration details for this database.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $database_name The database name, typically lower snake case. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsDatabasePhpConfig'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\DatabasePhpConfig|\Acquia\CloudApi\Model\Error
     */
    public function getEnvironmentsDatabasePhpConfig($environment_id, $database_name, string $contentType = self::contentTypes['getEnvironmentsDatabasePhpConfig'][0])
    {
        list($response) = $this->getEnvironmentsDatabasePhpConfigWithHttpInfo($environment_id, $database_name, $contentType);
        return $response;
    }

    /**
     * Operation getEnvironmentsDatabasePhpConfigWithHttpInfo
     *
     * Returns PHP configuration details for this database.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $database_name The database name, typically lower snake case. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsDatabasePhpConfig'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\DatabasePhpConfig|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnvironmentsDatabasePhpConfigWithHttpInfo($environment_id, $database_name, string $contentType = self::contentTypes['getEnvironmentsDatabasePhpConfig'][0])
    {
        $request = $this->getEnvironmentsDatabasePhpConfigRequest($environment_id, $database_name, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Acquia\CloudApi\Model\DatabasePhpConfig' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\DatabasePhpConfig' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\DatabasePhpConfig', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\DatabasePhpConfig';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\DatabasePhpConfig',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnvironmentsDatabasePhpConfigAsync
     *
     * Returns PHP configuration details for this database.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $database_name The database name, typically lower snake case. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsDatabasePhpConfig'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnvironmentsDatabasePhpConfigAsync($environment_id, $database_name, string $contentType = self::contentTypes['getEnvironmentsDatabasePhpConfig'][0])
    {
        return $this->getEnvironmentsDatabasePhpConfigAsyncWithHttpInfo($environment_id, $database_name, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnvironmentsDatabasePhpConfigAsyncWithHttpInfo
     *
     * Returns PHP configuration details for this database.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $database_name The database name, typically lower snake case. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsDatabasePhpConfig'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnvironmentsDatabasePhpConfigAsyncWithHttpInfo($environment_id, $database_name, string $contentType = self::contentTypes['getEnvironmentsDatabasePhpConfig'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\DatabasePhpConfig';
        $request = $this->getEnvironmentsDatabasePhpConfigRequest($environment_id, $database_name, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnvironmentsDatabasePhpConfig'
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $database_name The database name, typically lower snake case. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsDatabasePhpConfig'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEnvironmentsDatabasePhpConfigRequest($environment_id, $database_name, string $contentType = self::contentTypes['getEnvironmentsDatabasePhpConfig'][0])
    {

        // verify the required parameter 'environment_id' is set
        if ($environment_id === null || (is_array($environment_id) && count($environment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_id when calling getEnvironmentsDatabasePhpConfig'
            );
        }

        // verify the required parameter 'database_name' is set
        if ($database_name === null || (is_array($database_name) && count($database_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $database_name when calling getEnvironmentsDatabasePhpConfig'
            );
        }


        $resourcePath = '/environments/{environmentId}/databases/{databaseName}/php-config';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($environment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'environmentId' . '}',
                ObjectSerializer::toPathValue($environment_id),
                $resourcePath
            );
        }
        // path params
        if ($database_name !== null) {
            $resourcePath = str_replace(
                '{' . 'databaseName' . '}',
                ObjectSerializer::toPathValue($database_name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnvironmentsDatabases
     *
     * Returns a list of databases.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $sort A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable. (optional)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;) (optional)
     * @param  int $limit The maximum number of items to return. (optional)
     * @param  int $offset An integer to signify the offset to paginate from. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsDatabases'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\Databases|\Acquia\CloudApi\Model\Error
     */
    public function getEnvironmentsDatabases($environment_id, $sort = null, $filter = null, $limit = null, $offset = null, string $contentType = self::contentTypes['getEnvironmentsDatabases'][0])
    {
        list($response) = $this->getEnvironmentsDatabasesWithHttpInfo($environment_id, $sort, $filter, $limit, $offset, $contentType);
        return $response;
    }

    /**
     * Operation getEnvironmentsDatabasesWithHttpInfo
     *
     * Returns a list of databases.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $sort A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable. (optional)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;) (optional)
     * @param  int $limit The maximum number of items to return. (optional)
     * @param  int $offset An integer to signify the offset to paginate from. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsDatabases'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\Databases|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnvironmentsDatabasesWithHttpInfo($environment_id, $sort = null, $filter = null, $limit = null, $offset = null, string $contentType = self::contentTypes['getEnvironmentsDatabases'][0])
    {
        $request = $this->getEnvironmentsDatabasesRequest($environment_id, $sort, $filter, $limit, $offset, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Acquia\CloudApi\Model\Databases' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Databases' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Databases', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\Databases';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Databases',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnvironmentsDatabasesAsync
     *
     * Returns a list of databases.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $sort A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable. (optional)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;) (optional)
     * @param  int $limit The maximum number of items to return. (optional)
     * @param  int $offset An integer to signify the offset to paginate from. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsDatabases'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnvironmentsDatabasesAsync($environment_id, $sort = null, $filter = null, $limit = null, $offset = null, string $contentType = self::contentTypes['getEnvironmentsDatabases'][0])
    {
        return $this->getEnvironmentsDatabasesAsyncWithHttpInfo($environment_id, $sort, $filter, $limit, $offset, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnvironmentsDatabasesAsyncWithHttpInfo
     *
     * Returns a list of databases.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $sort A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable. (optional)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;) (optional)
     * @param  int $limit The maximum number of items to return. (optional)
     * @param  int $offset An integer to signify the offset to paginate from. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsDatabases'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnvironmentsDatabasesAsyncWithHttpInfo($environment_id, $sort = null, $filter = null, $limit = null, $offset = null, string $contentType = self::contentTypes['getEnvironmentsDatabases'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\Databases';
        $request = $this->getEnvironmentsDatabasesRequest($environment_id, $sort, $filter, $limit, $offset, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnvironmentsDatabases'
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $sort A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable. (optional)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;) (optional)
     * @param  int $limit The maximum number of items to return. (optional)
     * @param  int $offset An integer to signify the offset to paginate from. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsDatabases'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEnvironmentsDatabasesRequest($environment_id, $sort = null, $filter = null, $limit = null, $offset = null, string $contentType = self::contentTypes['getEnvironmentsDatabases'][0])
    {

        // verify the required parameter 'environment_id' is set
        if ($environment_id === null || (is_array($environment_id) && count($environment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_id when calling getEnvironmentsDatabases'
            );
        }

        
        



        $resourcePath = '/environments/{environmentId}/databases';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            'filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($environment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'environmentId' . '}',
                ObjectSerializer::toPathValue($environment_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnvironmentsDns
     *
     * Returns DNS configuration details for an environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsDns'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\Dns|\Acquia\CloudApi\Model\Error
     */
    public function getEnvironmentsDns($environment_id, string $contentType = self::contentTypes['getEnvironmentsDns'][0])
    {
        list($response) = $this->getEnvironmentsDnsWithHttpInfo($environment_id, $contentType);
        return $response;
    }

    /**
     * Operation getEnvironmentsDnsWithHttpInfo
     *
     * Returns DNS configuration details for an environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsDns'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\Dns|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnvironmentsDnsWithHttpInfo($environment_id, string $contentType = self::contentTypes['getEnvironmentsDns'][0])
    {
        $request = $this->getEnvironmentsDnsRequest($environment_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Acquia\CloudApi\Model\Dns' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Dns' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Dns', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\Dns';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Dns',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnvironmentsDnsAsync
     *
     * Returns DNS configuration details for an environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsDns'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnvironmentsDnsAsync($environment_id, string $contentType = self::contentTypes['getEnvironmentsDns'][0])
    {
        return $this->getEnvironmentsDnsAsyncWithHttpInfo($environment_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnvironmentsDnsAsyncWithHttpInfo
     *
     * Returns DNS configuration details for an environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsDns'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnvironmentsDnsAsyncWithHttpInfo($environment_id, string $contentType = self::contentTypes['getEnvironmentsDns'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\Dns';
        $request = $this->getEnvironmentsDnsRequest($environment_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnvironmentsDns'
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsDns'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEnvironmentsDnsRequest($environment_id, string $contentType = self::contentTypes['getEnvironmentsDns'][0])
    {

        // verify the required parameter 'environment_id' is set
        if ($environment_id === null || (is_array($environment_id) && count($environment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_id when calling getEnvironmentsDns'
            );
        }


        $resourcePath = '/environments/{environmentId}/dns';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($environment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'environmentId' . '}',
                ObjectSerializer::toPathValue($environment_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnvironmentsDomain
     *
     * Return details about a specific domain.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $domain A domain name. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsDomain'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\Domain|\Acquia\CloudApi\Model\Error
     */
    public function getEnvironmentsDomain($environment_id, $domain, string $contentType = self::contentTypes['getEnvironmentsDomain'][0])
    {
        list($response) = $this->getEnvironmentsDomainWithHttpInfo($environment_id, $domain, $contentType);
        return $response;
    }

    /**
     * Operation getEnvironmentsDomainWithHttpInfo
     *
     * Return details about a specific domain.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $domain A domain name. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsDomain'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\Domain|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnvironmentsDomainWithHttpInfo($environment_id, $domain, string $contentType = self::contentTypes['getEnvironmentsDomain'][0])
    {
        $request = $this->getEnvironmentsDomainRequest($environment_id, $domain, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Acquia\CloudApi\Model\Domain' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Domain' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Domain', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\Domain';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Domain',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnvironmentsDomainAsync
     *
     * Return details about a specific domain.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $domain A domain name. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsDomain'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnvironmentsDomainAsync($environment_id, $domain, string $contentType = self::contentTypes['getEnvironmentsDomain'][0])
    {
        return $this->getEnvironmentsDomainAsyncWithHttpInfo($environment_id, $domain, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnvironmentsDomainAsyncWithHttpInfo
     *
     * Return details about a specific domain.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $domain A domain name. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsDomain'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnvironmentsDomainAsyncWithHttpInfo($environment_id, $domain, string $contentType = self::contentTypes['getEnvironmentsDomain'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\Domain';
        $request = $this->getEnvironmentsDomainRequest($environment_id, $domain, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnvironmentsDomain'
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $domain A domain name. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsDomain'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEnvironmentsDomainRequest($environment_id, $domain, string $contentType = self::contentTypes['getEnvironmentsDomain'][0])
    {

        // verify the required parameter 'environment_id' is set
        if ($environment_id === null || (is_array($environment_id) && count($environment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_id when calling getEnvironmentsDomain'
            );
        }

        // verify the required parameter 'domain' is set
        if ($domain === null || (is_array($domain) && count($domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $domain when calling getEnvironmentsDomain'
            );
        }


        $resourcePath = '/environments/{environmentId}/domains/{domain}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($environment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'environmentId' . '}',
                ObjectSerializer::toPathValue($environment_id),
                $resourcePath
            );
        }
        // path params
        if ($domain !== null) {
            $resourcePath = str_replace(
                '{' . 'domain' . '}',
                ObjectSerializer::toPathValue($domain),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnvironmentsDomainStatus
     *
     * Returns details about the domain.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $domain A domain name. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsDomainStatus'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\DomainStatus|\Acquia\CloudApi\Model\Error
     */
    public function getEnvironmentsDomainStatus($environment_id, $domain, string $contentType = self::contentTypes['getEnvironmentsDomainStatus'][0])
    {
        list($response) = $this->getEnvironmentsDomainStatusWithHttpInfo($environment_id, $domain, $contentType);
        return $response;
    }

    /**
     * Operation getEnvironmentsDomainStatusWithHttpInfo
     *
     * Returns details about the domain.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $domain A domain name. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsDomainStatus'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\DomainStatus|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnvironmentsDomainStatusWithHttpInfo($environment_id, $domain, string $contentType = self::contentTypes['getEnvironmentsDomainStatus'][0])
    {
        $request = $this->getEnvironmentsDomainStatusRequest($environment_id, $domain, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Acquia\CloudApi\Model\DomainStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\DomainStatus' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\DomainStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\DomainStatus';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\DomainStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnvironmentsDomainStatusAsync
     *
     * Returns details about the domain.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $domain A domain name. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsDomainStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnvironmentsDomainStatusAsync($environment_id, $domain, string $contentType = self::contentTypes['getEnvironmentsDomainStatus'][0])
    {
        return $this->getEnvironmentsDomainStatusAsyncWithHttpInfo($environment_id, $domain, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnvironmentsDomainStatusAsyncWithHttpInfo
     *
     * Returns details about the domain.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $domain A domain name. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsDomainStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnvironmentsDomainStatusAsyncWithHttpInfo($environment_id, $domain, string $contentType = self::contentTypes['getEnvironmentsDomainStatus'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\DomainStatus';
        $request = $this->getEnvironmentsDomainStatusRequest($environment_id, $domain, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnvironmentsDomainStatus'
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $domain A domain name. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsDomainStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEnvironmentsDomainStatusRequest($environment_id, $domain, string $contentType = self::contentTypes['getEnvironmentsDomainStatus'][0])
    {

        // verify the required parameter 'environment_id' is set
        if ($environment_id === null || (is_array($environment_id) && count($environment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_id when calling getEnvironmentsDomainStatus'
            );
        }

        // verify the required parameter 'domain' is set
        if ($domain === null || (is_array($domain) && count($domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $domain when calling getEnvironmentsDomainStatus'
            );
        }


        $resourcePath = '/environments/{environmentId}/domains/{domain}/status';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($environment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'environmentId' . '}',
                ObjectSerializer::toPathValue($environment_id),
                $resourcePath
            );
        }
        // path params
        if ($domain !== null) {
            $resourcePath = str_replace(
                '{' . 'domain' . '}',
                ObjectSerializer::toPathValue($domain),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnvironmentsDomains
     *
     * Returns a list of domains.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $sort A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable. (optional)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;) (optional)
     * @param  int $limit The maximum number of items to return. (optional)
     * @param  int $offset An integer to signify the offset to paginate from. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsDomains'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\Domains|\Acquia\CloudApi\Model\Error
     */
    public function getEnvironmentsDomains($environment_id, $sort = null, $filter = null, $limit = null, $offset = null, string $contentType = self::contentTypes['getEnvironmentsDomains'][0])
    {
        list($response) = $this->getEnvironmentsDomainsWithHttpInfo($environment_id, $sort, $filter, $limit, $offset, $contentType);
        return $response;
    }

    /**
     * Operation getEnvironmentsDomainsWithHttpInfo
     *
     * Returns a list of domains.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $sort A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable. (optional)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;) (optional)
     * @param  int $limit The maximum number of items to return. (optional)
     * @param  int $offset An integer to signify the offset to paginate from. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsDomains'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\Domains|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnvironmentsDomainsWithHttpInfo($environment_id, $sort = null, $filter = null, $limit = null, $offset = null, string $contentType = self::contentTypes['getEnvironmentsDomains'][0])
    {
        $request = $this->getEnvironmentsDomainsRequest($environment_id, $sort, $filter, $limit, $offset, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Acquia\CloudApi\Model\Domains' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Domains' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Domains', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\Domains';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Domains',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnvironmentsDomainsAsync
     *
     * Returns a list of domains.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $sort A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable. (optional)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;) (optional)
     * @param  int $limit The maximum number of items to return. (optional)
     * @param  int $offset An integer to signify the offset to paginate from. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsDomains'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnvironmentsDomainsAsync($environment_id, $sort = null, $filter = null, $limit = null, $offset = null, string $contentType = self::contentTypes['getEnvironmentsDomains'][0])
    {
        return $this->getEnvironmentsDomainsAsyncWithHttpInfo($environment_id, $sort, $filter, $limit, $offset, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnvironmentsDomainsAsyncWithHttpInfo
     *
     * Returns a list of domains.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $sort A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable. (optional)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;) (optional)
     * @param  int $limit The maximum number of items to return. (optional)
     * @param  int $offset An integer to signify the offset to paginate from. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsDomains'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnvironmentsDomainsAsyncWithHttpInfo($environment_id, $sort = null, $filter = null, $limit = null, $offset = null, string $contentType = self::contentTypes['getEnvironmentsDomains'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\Domains';
        $request = $this->getEnvironmentsDomainsRequest($environment_id, $sort, $filter, $limit, $offset, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnvironmentsDomains'
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $sort A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable. (optional)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;) (optional)
     * @param  int $limit The maximum number of items to return. (optional)
     * @param  int $offset An integer to signify the offset to paginate from. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsDomains'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEnvironmentsDomainsRequest($environment_id, $sort = null, $filter = null, $limit = null, $offset = null, string $contentType = self::contentTypes['getEnvironmentsDomains'][0])
    {

        // verify the required parameter 'environment_id' is set
        if ($environment_id === null || (is_array($environment_id) && count($environment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_id when calling getEnvironmentsDomains'
            );
        }

        
        



        $resourcePath = '/environments/{environmentId}/domains';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            'filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($environment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'environmentId' . '}',
                ObjectSerializer::toPathValue($environment_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnvironmentsLog
     *
     * Downloads the log file.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $log_type An ID that uniquely identifies a log type. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsLog'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error
     */
    public function getEnvironmentsLog($environment_id, $log_type, string $contentType = self::contentTypes['getEnvironmentsLog'][0])
    {
        list($response) = $this->getEnvironmentsLogWithHttpInfo($environment_id, $log_type, $contentType);
        return $response;
    }

    /**
     * Operation getEnvironmentsLogWithHttpInfo
     *
     * Downloads the log file.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $log_type An ID that uniquely identifies a log type. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsLog'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnvironmentsLogWithHttpInfo($environment_id, $log_type, string $contentType = self::contentTypes['getEnvironmentsLog'][0])
    {
        $request = $this->getEnvironmentsLogRequest($environment_id, $log_type, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SplFileObject' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnvironmentsLogAsync
     *
     * Downloads the log file.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $log_type An ID that uniquely identifies a log type. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsLog'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnvironmentsLogAsync($environment_id, $log_type, string $contentType = self::contentTypes['getEnvironmentsLog'][0])
    {
        return $this->getEnvironmentsLogAsyncWithHttpInfo($environment_id, $log_type, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnvironmentsLogAsyncWithHttpInfo
     *
     * Downloads the log file.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $log_type An ID that uniquely identifies a log type. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsLog'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnvironmentsLogAsyncWithHttpInfo($environment_id, $log_type, string $contentType = self::contentTypes['getEnvironmentsLog'][0])
    {
        $returnType = '\SplFileObject';
        $request = $this->getEnvironmentsLogRequest($environment_id, $log_type, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnvironmentsLog'
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $log_type An ID that uniquely identifies a log type. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsLog'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEnvironmentsLogRequest($environment_id, $log_type, string $contentType = self::contentTypes['getEnvironmentsLog'][0])
    {

        // verify the required parameter 'environment_id' is set
        if ($environment_id === null || (is_array($environment_id) && count($environment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_id when calling getEnvironmentsLog'
            );
        }

        // verify the required parameter 'log_type' is set
        if ($log_type === null || (is_array($log_type) && count($log_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $log_type when calling getEnvironmentsLog'
            );
        }


        $resourcePath = '/environments/{environmentId}/logs/{logType}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($environment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'environmentId' . '}',
                ObjectSerializer::toPathValue($environment_id),
                $resourcePath
            );
        }
        // path params
        if ($log_type !== null) {
            $resourcePath = str_replace(
                '{' . 'logType' . '}',
                ObjectSerializer::toPathValue($log_type),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/octet-stream', 'application/json', 'application/hal+json', 'text/html', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnvironmentsLogForwardingDestination
     *
     * Returns the specified log forwarding destination.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $log_forwarding_destination_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsLogForwardingDestination'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\LogForwardingDestination|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error
     */
    public function getEnvironmentsLogForwardingDestination($environment_id, $log_forwarding_destination_uuid, string $contentType = self::contentTypes['getEnvironmentsLogForwardingDestination'][0])
    {
        list($response) = $this->getEnvironmentsLogForwardingDestinationWithHttpInfo($environment_id, $log_forwarding_destination_uuid, $contentType);
        return $response;
    }

    /**
     * Operation getEnvironmentsLogForwardingDestinationWithHttpInfo
     *
     * Returns the specified log forwarding destination.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $log_forwarding_destination_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsLogForwardingDestination'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\LogForwardingDestination|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnvironmentsLogForwardingDestinationWithHttpInfo($environment_id, $log_forwarding_destination_uuid, string $contentType = self::contentTypes['getEnvironmentsLogForwardingDestination'][0])
    {
        $request = $this->getEnvironmentsLogForwardingDestinationRequest($environment_id, $log_forwarding_destination_uuid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Acquia\CloudApi\Model\LogForwardingDestination' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\LogForwardingDestination' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\LogForwardingDestination', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\LogForwardingDestination';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\LogForwardingDestination',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnvironmentsLogForwardingDestinationAsync
     *
     * Returns the specified log forwarding destination.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $log_forwarding_destination_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsLogForwardingDestination'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnvironmentsLogForwardingDestinationAsync($environment_id, $log_forwarding_destination_uuid, string $contentType = self::contentTypes['getEnvironmentsLogForwardingDestination'][0])
    {
        return $this->getEnvironmentsLogForwardingDestinationAsyncWithHttpInfo($environment_id, $log_forwarding_destination_uuid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnvironmentsLogForwardingDestinationAsyncWithHttpInfo
     *
     * Returns the specified log forwarding destination.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $log_forwarding_destination_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsLogForwardingDestination'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnvironmentsLogForwardingDestinationAsyncWithHttpInfo($environment_id, $log_forwarding_destination_uuid, string $contentType = self::contentTypes['getEnvironmentsLogForwardingDestination'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\LogForwardingDestination';
        $request = $this->getEnvironmentsLogForwardingDestinationRequest($environment_id, $log_forwarding_destination_uuid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnvironmentsLogForwardingDestination'
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $log_forwarding_destination_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsLogForwardingDestination'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEnvironmentsLogForwardingDestinationRequest($environment_id, $log_forwarding_destination_uuid, string $contentType = self::contentTypes['getEnvironmentsLogForwardingDestination'][0])
    {

        // verify the required parameter 'environment_id' is set
        if ($environment_id === null || (is_array($environment_id) && count($environment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_id when calling getEnvironmentsLogForwardingDestination'
            );
        }

        // verify the required parameter 'log_forwarding_destination_uuid' is set
        if ($log_forwarding_destination_uuid === null || (is_array($log_forwarding_destination_uuid) && count($log_forwarding_destination_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $log_forwarding_destination_uuid when calling getEnvironmentsLogForwardingDestination'
            );
        }


        $resourcePath = '/environments/{environmentId}/log-forwarding-destinations/{logForwardingDestinationUuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($environment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'environmentId' . '}',
                ObjectSerializer::toPathValue($environment_id),
                $resourcePath
            );
        }
        // path params
        if ($log_forwarding_destination_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'logForwardingDestinationUuid' . '}',
                ObjectSerializer::toPathValue($log_forwarding_destination_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnvironmentsLogForwardingDestinations
     *
     * Returns a collection of log forwarding destinations for this environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $sort A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable. (optional)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;) (optional)
     * @param  int $limit The maximum number of items to return. (optional)
     * @param  int $offset An integer to signify the offset to paginate from. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsLogForwardingDestinations'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\LogForwardingDestinations|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error
     */
    public function getEnvironmentsLogForwardingDestinations($environment_id, $sort = null, $filter = null, $limit = null, $offset = null, string $contentType = self::contentTypes['getEnvironmentsLogForwardingDestinations'][0])
    {
        list($response) = $this->getEnvironmentsLogForwardingDestinationsWithHttpInfo($environment_id, $sort, $filter, $limit, $offset, $contentType);
        return $response;
    }

    /**
     * Operation getEnvironmentsLogForwardingDestinationsWithHttpInfo
     *
     * Returns a collection of log forwarding destinations for this environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $sort A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable. (optional)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;) (optional)
     * @param  int $limit The maximum number of items to return. (optional)
     * @param  int $offset An integer to signify the offset to paginate from. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsLogForwardingDestinations'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\LogForwardingDestinations|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnvironmentsLogForwardingDestinationsWithHttpInfo($environment_id, $sort = null, $filter = null, $limit = null, $offset = null, string $contentType = self::contentTypes['getEnvironmentsLogForwardingDestinations'][0])
    {
        $request = $this->getEnvironmentsLogForwardingDestinationsRequest($environment_id, $sort, $filter, $limit, $offset, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Acquia\CloudApi\Model\LogForwardingDestinations' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\LogForwardingDestinations' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\LogForwardingDestinations', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\LogForwardingDestinations';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\LogForwardingDestinations',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnvironmentsLogForwardingDestinationsAsync
     *
     * Returns a collection of log forwarding destinations for this environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $sort A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable. (optional)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;) (optional)
     * @param  int $limit The maximum number of items to return. (optional)
     * @param  int $offset An integer to signify the offset to paginate from. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsLogForwardingDestinations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnvironmentsLogForwardingDestinationsAsync($environment_id, $sort = null, $filter = null, $limit = null, $offset = null, string $contentType = self::contentTypes['getEnvironmentsLogForwardingDestinations'][0])
    {
        return $this->getEnvironmentsLogForwardingDestinationsAsyncWithHttpInfo($environment_id, $sort, $filter, $limit, $offset, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnvironmentsLogForwardingDestinationsAsyncWithHttpInfo
     *
     * Returns a collection of log forwarding destinations for this environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $sort A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable. (optional)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;) (optional)
     * @param  int $limit The maximum number of items to return. (optional)
     * @param  int $offset An integer to signify the offset to paginate from. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsLogForwardingDestinations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnvironmentsLogForwardingDestinationsAsyncWithHttpInfo($environment_id, $sort = null, $filter = null, $limit = null, $offset = null, string $contentType = self::contentTypes['getEnvironmentsLogForwardingDestinations'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\LogForwardingDestinations';
        $request = $this->getEnvironmentsLogForwardingDestinationsRequest($environment_id, $sort, $filter, $limit, $offset, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnvironmentsLogForwardingDestinations'
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $sort A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable. (optional)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;) (optional)
     * @param  int $limit The maximum number of items to return. (optional)
     * @param  int $offset An integer to signify the offset to paginate from. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsLogForwardingDestinations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEnvironmentsLogForwardingDestinationsRequest($environment_id, $sort = null, $filter = null, $limit = null, $offset = null, string $contentType = self::contentTypes['getEnvironmentsLogForwardingDestinations'][0])
    {

        // verify the required parameter 'environment_id' is set
        if ($environment_id === null || (is_array($environment_id) && count($environment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_id when calling getEnvironmentsLogForwardingDestinations'
            );
        }

        
        



        $resourcePath = '/environments/{environmentId}/log-forwarding-destinations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            'filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($environment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'environmentId' . '}',
                ObjectSerializer::toPathValue($environment_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnvironmentsLogs
     *
     * Returns a list of log files for this environment available for download.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsLogs'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\Logs|\Acquia\CloudApi\Model\Error
     */
    public function getEnvironmentsLogs($environment_id, string $contentType = self::contentTypes['getEnvironmentsLogs'][0])
    {
        list($response) = $this->getEnvironmentsLogsWithHttpInfo($environment_id, $contentType);
        return $response;
    }

    /**
     * Operation getEnvironmentsLogsWithHttpInfo
     *
     * Returns a list of log files for this environment available for download.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsLogs'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\Logs|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnvironmentsLogsWithHttpInfo($environment_id, string $contentType = self::contentTypes['getEnvironmentsLogs'][0])
    {
        $request = $this->getEnvironmentsLogsRequest($environment_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Acquia\CloudApi\Model\Logs' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Logs' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Logs', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\Logs';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Logs',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnvironmentsLogsAsync
     *
     * Returns a list of log files for this environment available for download.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsLogs'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnvironmentsLogsAsync($environment_id, string $contentType = self::contentTypes['getEnvironmentsLogs'][0])
    {
        return $this->getEnvironmentsLogsAsyncWithHttpInfo($environment_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnvironmentsLogsAsyncWithHttpInfo
     *
     * Returns a list of log files for this environment available for download.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsLogs'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnvironmentsLogsAsyncWithHttpInfo($environment_id, string $contentType = self::contentTypes['getEnvironmentsLogs'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\Logs';
        $request = $this->getEnvironmentsLogsRequest($environment_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnvironmentsLogs'
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsLogs'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEnvironmentsLogsRequest($environment_id, string $contentType = self::contentTypes['getEnvironmentsLogs'][0])
    {

        // verify the required parameter 'environment_id' is set
        if ($environment_id === null || (is_array($environment_id) && count($environment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_id when calling getEnvironmentsLogs'
            );
        }


        $resourcePath = '/environments/{environmentId}/logs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($environment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'environmentId' . '}',
                ObjectSerializer::toPathValue($environment_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnvironmentsLogstream
     *
     * Returns a logstream url and metadata.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsLogstream'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\Logstream|\Acquia\CloudApi\Model\Error
     */
    public function getEnvironmentsLogstream($environment_id, string $contentType = self::contentTypes['getEnvironmentsLogstream'][0])
    {
        list($response) = $this->getEnvironmentsLogstreamWithHttpInfo($environment_id, $contentType);
        return $response;
    }

    /**
     * Operation getEnvironmentsLogstreamWithHttpInfo
     *
     * Returns a logstream url and metadata.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsLogstream'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\Logstream|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnvironmentsLogstreamWithHttpInfo($environment_id, string $contentType = self::contentTypes['getEnvironmentsLogstream'][0])
    {
        $request = $this->getEnvironmentsLogstreamRequest($environment_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Acquia\CloudApi\Model\Logstream' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Logstream' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Logstream', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\Logstream';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Logstream',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnvironmentsLogstreamAsync
     *
     * Returns a logstream url and metadata.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsLogstream'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnvironmentsLogstreamAsync($environment_id, string $contentType = self::contentTypes['getEnvironmentsLogstream'][0])
    {
        return $this->getEnvironmentsLogstreamAsyncWithHttpInfo($environment_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnvironmentsLogstreamAsyncWithHttpInfo
     *
     * Returns a logstream url and metadata.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsLogstream'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnvironmentsLogstreamAsyncWithHttpInfo($environment_id, string $contentType = self::contentTypes['getEnvironmentsLogstream'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\Logstream';
        $request = $this->getEnvironmentsLogstreamRequest($environment_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnvironmentsLogstream'
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsLogstream'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEnvironmentsLogstreamRequest($environment_id, string $contentType = self::contentTypes['getEnvironmentsLogstream'][0])
    {

        // verify the required parameter 'environment_id' is set
        if ($environment_id === null || (is_array($environment_id) && count($environment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_id when calling getEnvironmentsLogstream'
            );
        }


        $resourcePath = '/environments/{environmentId}/logstream';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($environment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'environmentId' . '}',
                ObjectSerializer::toPathValue($environment_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnvironmentsMetrics
     *
     * Does not return any data. Allows traversal to metrics groups endpoints.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsMetrics'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\Metrics|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error
     */
    public function getEnvironmentsMetrics($environment_id, string $contentType = self::contentTypes['getEnvironmentsMetrics'][0])
    {
        list($response) = $this->getEnvironmentsMetricsWithHttpInfo($environment_id, $contentType);
        return $response;
    }

    /**
     * Operation getEnvironmentsMetricsWithHttpInfo
     *
     * Does not return any data. Allows traversal to metrics groups endpoints.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsMetrics'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\Metrics|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnvironmentsMetricsWithHttpInfo($environment_id, string $contentType = self::contentTypes['getEnvironmentsMetrics'][0])
    {
        $request = $this->getEnvironmentsMetricsRequest($environment_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Acquia\CloudApi\Model\Metrics' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Metrics' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Metrics', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\Metrics';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Metrics',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnvironmentsMetricsAsync
     *
     * Does not return any data. Allows traversal to metrics groups endpoints.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsMetrics'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnvironmentsMetricsAsync($environment_id, string $contentType = self::contentTypes['getEnvironmentsMetrics'][0])
    {
        return $this->getEnvironmentsMetricsAsyncWithHttpInfo($environment_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnvironmentsMetricsAsyncWithHttpInfo
     *
     * Does not return any data. Allows traversal to metrics groups endpoints.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsMetrics'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnvironmentsMetricsAsyncWithHttpInfo($environment_id, string $contentType = self::contentTypes['getEnvironmentsMetrics'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\Metrics';
        $request = $this->getEnvironmentsMetricsRequest($environment_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnvironmentsMetrics'
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsMetrics'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEnvironmentsMetricsRequest($environment_id, string $contentType = self::contentTypes['getEnvironmentsMetrics'][0])
    {

        // verify the required parameter 'environment_id' is set
        if ($environment_id === null || (is_array($environment_id) && count($environment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_id when calling getEnvironmentsMetrics'
            );
        }


        $resourcePath = '/environments/{environmentId}/metrics';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($environment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'environmentId' . '}',
                ObjectSerializer::toPathValue($environment_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnvironmentsServer
     *
     * Return details about a specific server.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $server_id The internal database identifier of the server. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsServer'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\Server|\Acquia\CloudApi\Model\Error
     */
    public function getEnvironmentsServer($environment_id, $server_id, string $contentType = self::contentTypes['getEnvironmentsServer'][0])
    {
        list($response) = $this->getEnvironmentsServerWithHttpInfo($environment_id, $server_id, $contentType);
        return $response;
    }

    /**
     * Operation getEnvironmentsServerWithHttpInfo
     *
     * Return details about a specific server.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $server_id The internal database identifier of the server. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsServer'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\Server|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnvironmentsServerWithHttpInfo($environment_id, $server_id, string $contentType = self::contentTypes['getEnvironmentsServer'][0])
    {
        $request = $this->getEnvironmentsServerRequest($environment_id, $server_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Acquia\CloudApi\Model\Server' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Server' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Server', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\Server';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Server',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnvironmentsServerAsync
     *
     * Return details about a specific server.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $server_id The internal database identifier of the server. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsServer'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnvironmentsServerAsync($environment_id, $server_id, string $contentType = self::contentTypes['getEnvironmentsServer'][0])
    {
        return $this->getEnvironmentsServerAsyncWithHttpInfo($environment_id, $server_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnvironmentsServerAsyncWithHttpInfo
     *
     * Return details about a specific server.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $server_id The internal database identifier of the server. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsServer'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnvironmentsServerAsyncWithHttpInfo($environment_id, $server_id, string $contentType = self::contentTypes['getEnvironmentsServer'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\Server';
        $request = $this->getEnvironmentsServerRequest($environment_id, $server_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnvironmentsServer'
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $server_id The internal database identifier of the server. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsServer'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEnvironmentsServerRequest($environment_id, $server_id, string $contentType = self::contentTypes['getEnvironmentsServer'][0])
    {

        // verify the required parameter 'environment_id' is set
        if ($environment_id === null || (is_array($environment_id) && count($environment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_id when calling getEnvironmentsServer'
            );
        }

        // verify the required parameter 'server_id' is set
        if ($server_id === null || (is_array($server_id) && count($server_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $server_id when calling getEnvironmentsServer'
            );
        }


        $resourcePath = '/environments/{environmentId}/servers/{serverId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($environment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'environmentId' . '}',
                ObjectSerializer::toPathValue($environment_id),
                $resourcePath
            );
        }
        // path params
        if ($server_id !== null) {
            $resourcePath = str_replace(
                '{' . 'serverId' . '}',
                ObjectSerializer::toPathValue($server_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnvironmentsServers
     *
     * Returns a list of servers.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $sort A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable. (optional)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;) (optional)
     * @param  int $limit The maximum number of items to return. (optional)
     * @param  int $offset An integer to signify the offset to paginate from. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsServers'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\Servers|\Acquia\CloudApi\Model\Error
     */
    public function getEnvironmentsServers($environment_id, $sort = null, $filter = null, $limit = null, $offset = null, string $contentType = self::contentTypes['getEnvironmentsServers'][0])
    {
        list($response) = $this->getEnvironmentsServersWithHttpInfo($environment_id, $sort, $filter, $limit, $offset, $contentType);
        return $response;
    }

    /**
     * Operation getEnvironmentsServersWithHttpInfo
     *
     * Returns a list of servers.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $sort A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable. (optional)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;) (optional)
     * @param  int $limit The maximum number of items to return. (optional)
     * @param  int $offset An integer to signify the offset to paginate from. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsServers'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\Servers|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnvironmentsServersWithHttpInfo($environment_id, $sort = null, $filter = null, $limit = null, $offset = null, string $contentType = self::contentTypes['getEnvironmentsServers'][0])
    {
        $request = $this->getEnvironmentsServersRequest($environment_id, $sort, $filter, $limit, $offset, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Acquia\CloudApi\Model\Servers' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Servers' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Servers', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\Servers';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Servers',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnvironmentsServersAsync
     *
     * Returns a list of servers.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $sort A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable. (optional)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;) (optional)
     * @param  int $limit The maximum number of items to return. (optional)
     * @param  int $offset An integer to signify the offset to paginate from. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsServers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnvironmentsServersAsync($environment_id, $sort = null, $filter = null, $limit = null, $offset = null, string $contentType = self::contentTypes['getEnvironmentsServers'][0])
    {
        return $this->getEnvironmentsServersAsyncWithHttpInfo($environment_id, $sort, $filter, $limit, $offset, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnvironmentsServersAsyncWithHttpInfo
     *
     * Returns a list of servers.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $sort A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable. (optional)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;) (optional)
     * @param  int $limit The maximum number of items to return. (optional)
     * @param  int $offset An integer to signify the offset to paginate from. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsServers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnvironmentsServersAsyncWithHttpInfo($environment_id, $sort = null, $filter = null, $limit = null, $offset = null, string $contentType = self::contentTypes['getEnvironmentsServers'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\Servers';
        $request = $this->getEnvironmentsServersRequest($environment_id, $sort, $filter, $limit, $offset, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnvironmentsServers'
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $sort A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable. (optional)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;) (optional)
     * @param  int $limit The maximum number of items to return. (optional)
     * @param  int $offset An integer to signify the offset to paginate from. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsServers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEnvironmentsServersRequest($environment_id, $sort = null, $filter = null, $limit = null, $offset = null, string $contentType = self::contentTypes['getEnvironmentsServers'][0])
    {

        // verify the required parameter 'environment_id' is set
        if ($environment_id === null || (is_array($environment_id) && count($environment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_id when calling getEnvironmentsServers'
            );
        }

        
        



        $resourcePath = '/environments/{environmentId}/servers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            'filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($environment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'environmentId' . '}',
                ObjectSerializer::toPathValue($environment_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnvironmentsSettings
     *
     * Provides links to environment settings.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsSettings'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\EnvironmentSettings|\Acquia\CloudApi\Model\Error
     */
    public function getEnvironmentsSettings($environment_id, string $contentType = self::contentTypes['getEnvironmentsSettings'][0])
    {
        list($response) = $this->getEnvironmentsSettingsWithHttpInfo($environment_id, $contentType);
        return $response;
    }

    /**
     * Operation getEnvironmentsSettingsWithHttpInfo
     *
     * Provides links to environment settings.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsSettings'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\EnvironmentSettings|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnvironmentsSettingsWithHttpInfo($environment_id, string $contentType = self::contentTypes['getEnvironmentsSettings'][0])
    {
        $request = $this->getEnvironmentsSettingsRequest($environment_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Acquia\CloudApi\Model\EnvironmentSettings' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\EnvironmentSettings' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\EnvironmentSettings', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\EnvironmentSettings';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\EnvironmentSettings',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnvironmentsSettingsAsync
     *
     * Provides links to environment settings.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsSettings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnvironmentsSettingsAsync($environment_id, string $contentType = self::contentTypes['getEnvironmentsSettings'][0])
    {
        return $this->getEnvironmentsSettingsAsyncWithHttpInfo($environment_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnvironmentsSettingsAsyncWithHttpInfo
     *
     * Provides links to environment settings.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsSettings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnvironmentsSettingsAsyncWithHttpInfo($environment_id, string $contentType = self::contentTypes['getEnvironmentsSettings'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\EnvironmentSettings';
        $request = $this->getEnvironmentsSettingsRequest($environment_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnvironmentsSettings'
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsSettings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEnvironmentsSettingsRequest($environment_id, string $contentType = self::contentTypes['getEnvironmentsSettings'][0])
    {

        // verify the required parameter 'environment_id' is set
        if ($environment_id === null || (is_array($environment_id) && count($environment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_id when calling getEnvironmentsSettings'
            );
        }


        $resourcePath = '/environments/{environmentId}/settings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($environment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'environmentId' . '}',
                ObjectSerializer::toPathValue($environment_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnvironmentsStackMetrics
     *
     * Does not return any data. Allows traversal to StackMetrics endpoints.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsStackMetrics'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\Metrics|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error
     */
    public function getEnvironmentsStackMetrics($environment_id, string $contentType = self::contentTypes['getEnvironmentsStackMetrics'][0])
    {
        list($response) = $this->getEnvironmentsStackMetricsWithHttpInfo($environment_id, $contentType);
        return $response;
    }

    /**
     * Operation getEnvironmentsStackMetricsWithHttpInfo
     *
     * Does not return any data. Allows traversal to StackMetrics endpoints.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsStackMetrics'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\Metrics|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnvironmentsStackMetricsWithHttpInfo($environment_id, string $contentType = self::contentTypes['getEnvironmentsStackMetrics'][0])
    {
        $request = $this->getEnvironmentsStackMetricsRequest($environment_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Acquia\CloudApi\Model\Metrics' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Metrics' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Metrics', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\Metrics';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Metrics',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnvironmentsStackMetricsAsync
     *
     * Does not return any data. Allows traversal to StackMetrics endpoints.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsStackMetrics'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnvironmentsStackMetricsAsync($environment_id, string $contentType = self::contentTypes['getEnvironmentsStackMetrics'][0])
    {
        return $this->getEnvironmentsStackMetricsAsyncWithHttpInfo($environment_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnvironmentsStackMetricsAsyncWithHttpInfo
     *
     * Does not return any data. Allows traversal to StackMetrics endpoints.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsStackMetrics'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnvironmentsStackMetricsAsyncWithHttpInfo($environment_id, string $contentType = self::contentTypes['getEnvironmentsStackMetrics'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\Metrics';
        $request = $this->getEnvironmentsStackMetricsRequest($environment_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnvironmentsStackMetrics'
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsStackMetrics'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEnvironmentsStackMetricsRequest($environment_id, string $contentType = self::contentTypes['getEnvironmentsStackMetrics'][0])
    {

        // verify the required parameter 'environment_id' is set
        if ($environment_id === null || (is_array($environment_id) && count($environment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_id when calling getEnvironmentsStackMetrics'
            );
        }


        $resourcePath = '/environments/{environmentId}/metrics/stackmetrics';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($environment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'environmentId' . '}',
                ObjectSerializer::toPathValue($environment_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnvironmentsStackMetricsData
     *
     * Returns StackMetrics data for the metrics specified in the filter paramater (e.g., apache-access, web-cpu).
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;)  **For this endpoint, the \&quot;metric\&quot; filter is required. Multiple metrics can be returned in one request. The following metrics are available:**  * apache-requests, bal-cpu, bal-memory, cron-memory, db-cpu, db-disk-size, db-disk-usage, db-memory, file-disk-size, file-cpu, file-disk-usage, file-memory, http-2xx, http-3xx, http-4xx, http-5xx, mysql-slow-query-count, nginx-requests, out-of-memory, php-proc-max-reached-site, php-proc-max-reached-total, php-proc-site, php-proc-total, varnish-cache-hit-rate, varnish-requests, web-cpu, web-memory (required)
     * @param  string $from An ISO-8601 formatted date retrieve metrics from. (required)
     * @param  string $to An ISO-8601 formatted date retrieve results to. (optional)
     * @param  string $resolution Specifies the data granularity of the request. Available resolutions: minute, hour, day, week or month.  Limits: - 3 hour limit for “minute” resolution - 1 week limit for “hour” resolution - 6 month limit for “day” resolution - 1 year limit for \&quot;week\&quot; resolution - 3 year limit for “month” resolution (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsStackMetricsData'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\StackMetricsData|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error
     */
    public function getEnvironmentsStackMetricsData($environment_id, $filter, $from, $to = null, $resolution = null, string $contentType = self::contentTypes['getEnvironmentsStackMetricsData'][0])
    {
        list($response) = $this->getEnvironmentsStackMetricsDataWithHttpInfo($environment_id, $filter, $from, $to, $resolution, $contentType);
        return $response;
    }

    /**
     * Operation getEnvironmentsStackMetricsDataWithHttpInfo
     *
     * Returns StackMetrics data for the metrics specified in the filter paramater (e.g., apache-access, web-cpu).
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;)  **For this endpoint, the \&quot;metric\&quot; filter is required. Multiple metrics can be returned in one request. The following metrics are available:**  * apache-requests, bal-cpu, bal-memory, cron-memory, db-cpu, db-disk-size, db-disk-usage, db-memory, file-disk-size, file-cpu, file-disk-usage, file-memory, http-2xx, http-3xx, http-4xx, http-5xx, mysql-slow-query-count, nginx-requests, out-of-memory, php-proc-max-reached-site, php-proc-max-reached-total, php-proc-site, php-proc-total, varnish-cache-hit-rate, varnish-requests, web-cpu, web-memory (required)
     * @param  string $from An ISO-8601 formatted date retrieve metrics from. (required)
     * @param  string $to An ISO-8601 formatted date retrieve results to. (optional)
     * @param  string $resolution Specifies the data granularity of the request. Available resolutions: minute, hour, day, week or month.  Limits: - 3 hour limit for “minute” resolution - 1 week limit for “hour” resolution - 6 month limit for “day” resolution - 1 year limit for \&quot;week\&quot; resolution - 3 year limit for “month” resolution (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsStackMetricsData'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\StackMetricsData|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnvironmentsStackMetricsDataWithHttpInfo($environment_id, $filter, $from, $to = null, $resolution = null, string $contentType = self::contentTypes['getEnvironmentsStackMetricsData'][0])
    {
        $request = $this->getEnvironmentsStackMetricsDataRequest($environment_id, $filter, $from, $to, $resolution, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Acquia\CloudApi\Model\StackMetricsData' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\StackMetricsData' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\StackMetricsData', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\StackMetricsData';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\StackMetricsData',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnvironmentsStackMetricsDataAsync
     *
     * Returns StackMetrics data for the metrics specified in the filter paramater (e.g., apache-access, web-cpu).
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;)  **For this endpoint, the \&quot;metric\&quot; filter is required. Multiple metrics can be returned in one request. The following metrics are available:**  * apache-requests, bal-cpu, bal-memory, cron-memory, db-cpu, db-disk-size, db-disk-usage, db-memory, file-disk-size, file-cpu, file-disk-usage, file-memory, http-2xx, http-3xx, http-4xx, http-5xx, mysql-slow-query-count, nginx-requests, out-of-memory, php-proc-max-reached-site, php-proc-max-reached-total, php-proc-site, php-proc-total, varnish-cache-hit-rate, varnish-requests, web-cpu, web-memory (required)
     * @param  string $from An ISO-8601 formatted date retrieve metrics from. (required)
     * @param  string $to An ISO-8601 formatted date retrieve results to. (optional)
     * @param  string $resolution Specifies the data granularity of the request. Available resolutions: minute, hour, day, week or month.  Limits: - 3 hour limit for “minute” resolution - 1 week limit for “hour” resolution - 6 month limit for “day” resolution - 1 year limit for \&quot;week\&quot; resolution - 3 year limit for “month” resolution (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsStackMetricsData'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnvironmentsStackMetricsDataAsync($environment_id, $filter, $from, $to = null, $resolution = null, string $contentType = self::contentTypes['getEnvironmentsStackMetricsData'][0])
    {
        return $this->getEnvironmentsStackMetricsDataAsyncWithHttpInfo($environment_id, $filter, $from, $to, $resolution, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnvironmentsStackMetricsDataAsyncWithHttpInfo
     *
     * Returns StackMetrics data for the metrics specified in the filter paramater (e.g., apache-access, web-cpu).
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;)  **For this endpoint, the \&quot;metric\&quot; filter is required. Multiple metrics can be returned in one request. The following metrics are available:**  * apache-requests, bal-cpu, bal-memory, cron-memory, db-cpu, db-disk-size, db-disk-usage, db-memory, file-disk-size, file-cpu, file-disk-usage, file-memory, http-2xx, http-3xx, http-4xx, http-5xx, mysql-slow-query-count, nginx-requests, out-of-memory, php-proc-max-reached-site, php-proc-max-reached-total, php-proc-site, php-proc-total, varnish-cache-hit-rate, varnish-requests, web-cpu, web-memory (required)
     * @param  string $from An ISO-8601 formatted date retrieve metrics from. (required)
     * @param  string $to An ISO-8601 formatted date retrieve results to. (optional)
     * @param  string $resolution Specifies the data granularity of the request. Available resolutions: minute, hour, day, week or month.  Limits: - 3 hour limit for “minute” resolution - 1 week limit for “hour” resolution - 6 month limit for “day” resolution - 1 year limit for \&quot;week\&quot; resolution - 3 year limit for “month” resolution (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsStackMetricsData'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnvironmentsStackMetricsDataAsyncWithHttpInfo($environment_id, $filter, $from, $to = null, $resolution = null, string $contentType = self::contentTypes['getEnvironmentsStackMetricsData'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\StackMetricsData';
        $request = $this->getEnvironmentsStackMetricsDataRequest($environment_id, $filter, $from, $to, $resolution, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnvironmentsStackMetricsData'
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;)  **For this endpoint, the \&quot;metric\&quot; filter is required. Multiple metrics can be returned in one request. The following metrics are available:**  * apache-requests, bal-cpu, bal-memory, cron-memory, db-cpu, db-disk-size, db-disk-usage, db-memory, file-disk-size, file-cpu, file-disk-usage, file-memory, http-2xx, http-3xx, http-4xx, http-5xx, mysql-slow-query-count, nginx-requests, out-of-memory, php-proc-max-reached-site, php-proc-max-reached-total, php-proc-site, php-proc-total, varnish-cache-hit-rate, varnish-requests, web-cpu, web-memory (required)
     * @param  string $from An ISO-8601 formatted date retrieve metrics from. (required)
     * @param  string $to An ISO-8601 formatted date retrieve results to. (optional)
     * @param  string $resolution Specifies the data granularity of the request. Available resolutions: minute, hour, day, week or month.  Limits: - 3 hour limit for “minute” resolution - 1 week limit for “hour” resolution - 6 month limit for “day” resolution - 1 year limit for \&quot;week\&quot; resolution - 3 year limit for “month” resolution (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsStackMetricsData'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEnvironmentsStackMetricsDataRequest($environment_id, $filter, $from, $to = null, $resolution = null, string $contentType = self::contentTypes['getEnvironmentsStackMetricsData'][0])
    {

        // verify the required parameter 'environment_id' is set
        if ($environment_id === null || (is_array($environment_id) && count($environment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_id when calling getEnvironmentsStackMetricsData'
            );
        }

        // verify the required parameter 'filter' is set
        if ($filter === null || (is_array($filter) && count($filter) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $filter when calling getEnvironmentsStackMetricsData'
            );
        }
        
        // verify the required parameter 'from' is set
        if ($from === null || (is_array($from) && count($from) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $from when calling getEnvironmentsStackMetricsData'
            );
        }




        $resourcePath = '/environments/{environmentId}/metrics/stackmetrics/data';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            'filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from,
            'from', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $to,
            'to', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $resolution,
            'resolution', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($environment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'environmentId' . '}',
                ObjectSerializer::toPathValue($environment_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnvironmentsUsageData
     *
     * Retrieves usage data for an environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $from Specifies relative or absolute time period to retrieve results from. (Default value -7d) (optional)
     * @param  string $to Optionally specifies relative or absolute time period to retrieve results until. (optional)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;) (optional)
     * @param  string $resolution Specifies the data granularity of the request. Available resolutions: minute, hour, day, week or month.  Limits: - 3 hour limit for “minute” resolution - 1 week limit for “hour” resolution - 6 month limit for “day” resolution - 1 year limit for \&quot;week\&quot; resolution - 3 year limit for “month” resolution (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsUsageData'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\EnvironmentUsageMetrics|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error
     */
    public function getEnvironmentsUsageData($environment_id, $from = null, $to = null, $filter = null, $resolution = null, string $contentType = self::contentTypes['getEnvironmentsUsageData'][0])
    {
        list($response) = $this->getEnvironmentsUsageDataWithHttpInfo($environment_id, $from, $to, $filter, $resolution, $contentType);
        return $response;
    }

    /**
     * Operation getEnvironmentsUsageDataWithHttpInfo
     *
     * Retrieves usage data for an environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $from Specifies relative or absolute time period to retrieve results from. (Default value -7d) (optional)
     * @param  string $to Optionally specifies relative or absolute time period to retrieve results until. (optional)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;) (optional)
     * @param  string $resolution Specifies the data granularity of the request. Available resolutions: minute, hour, day, week or month.  Limits: - 3 hour limit for “minute” resolution - 1 week limit for “hour” resolution - 6 month limit for “day” resolution - 1 year limit for \&quot;week\&quot; resolution - 3 year limit for “month” resolution (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsUsageData'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\EnvironmentUsageMetrics|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnvironmentsUsageDataWithHttpInfo($environment_id, $from = null, $to = null, $filter = null, $resolution = null, string $contentType = self::contentTypes['getEnvironmentsUsageData'][0])
    {
        $request = $this->getEnvironmentsUsageDataRequest($environment_id, $from, $to, $filter, $resolution, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Acquia\CloudApi\Model\EnvironmentUsageMetrics' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\EnvironmentUsageMetrics' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\EnvironmentUsageMetrics', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\EnvironmentUsageMetrics';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\EnvironmentUsageMetrics',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnvironmentsUsageDataAsync
     *
     * Retrieves usage data for an environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $from Specifies relative or absolute time period to retrieve results from. (Default value -7d) (optional)
     * @param  string $to Optionally specifies relative or absolute time period to retrieve results until. (optional)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;) (optional)
     * @param  string $resolution Specifies the data granularity of the request. Available resolutions: minute, hour, day, week or month.  Limits: - 3 hour limit for “minute” resolution - 1 week limit for “hour” resolution - 6 month limit for “day” resolution - 1 year limit for \&quot;week\&quot; resolution - 3 year limit for “month” resolution (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsUsageData'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnvironmentsUsageDataAsync($environment_id, $from = null, $to = null, $filter = null, $resolution = null, string $contentType = self::contentTypes['getEnvironmentsUsageData'][0])
    {
        return $this->getEnvironmentsUsageDataAsyncWithHttpInfo($environment_id, $from, $to, $filter, $resolution, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnvironmentsUsageDataAsyncWithHttpInfo
     *
     * Retrieves usage data for an environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $from Specifies relative or absolute time period to retrieve results from. (Default value -7d) (optional)
     * @param  string $to Optionally specifies relative or absolute time period to retrieve results until. (optional)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;) (optional)
     * @param  string $resolution Specifies the data granularity of the request. Available resolutions: minute, hour, day, week or month.  Limits: - 3 hour limit for “minute” resolution - 1 week limit for “hour” resolution - 6 month limit for “day” resolution - 1 year limit for \&quot;week\&quot; resolution - 3 year limit for “month” resolution (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsUsageData'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnvironmentsUsageDataAsyncWithHttpInfo($environment_id, $from = null, $to = null, $filter = null, $resolution = null, string $contentType = self::contentTypes['getEnvironmentsUsageData'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\EnvironmentUsageMetrics';
        $request = $this->getEnvironmentsUsageDataRequest($environment_id, $from, $to, $filter, $resolution, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnvironmentsUsageData'
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $from Specifies relative or absolute time period to retrieve results from. (Default value -7d) (optional)
     * @param  string $to Optionally specifies relative or absolute time period to retrieve results until. (optional)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;) (optional)
     * @param  string $resolution Specifies the data granularity of the request. Available resolutions: minute, hour, day, week or month.  Limits: - 3 hour limit for “minute” resolution - 1 week limit for “hour” resolution - 6 month limit for “day” resolution - 1 year limit for \&quot;week\&quot; resolution - 3 year limit for “month” resolution (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsUsageData'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEnvironmentsUsageDataRequest($environment_id, $from = null, $to = null, $filter = null, $resolution = null, string $contentType = self::contentTypes['getEnvironmentsUsageData'][0])
    {

        // verify the required parameter 'environment_id' is set
        if ($environment_id === null || (is_array($environment_id) && count($environment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_id when calling getEnvironmentsUsageData'
            );
        }



        


        $resourcePath = '/environments/{environmentId}/metrics/usage/data';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from,
            'from', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $to,
            'to', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            'filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $resolution,
            'resolution', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($environment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'environmentId' . '}',
                ObjectSerializer::toPathValue($environment_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnvironmentsUsageLinks
     *
     * Retrieves traversal links for an environment&#39;s usage data.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsUsageLinks'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\Usage|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error
     */
    public function getEnvironmentsUsageLinks($environment_id, string $contentType = self::contentTypes['getEnvironmentsUsageLinks'][0])
    {
        list($response) = $this->getEnvironmentsUsageLinksWithHttpInfo($environment_id, $contentType);
        return $response;
    }

    /**
     * Operation getEnvironmentsUsageLinksWithHttpInfo
     *
     * Retrieves traversal links for an environment&#39;s usage data.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsUsageLinks'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\Usage|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnvironmentsUsageLinksWithHttpInfo($environment_id, string $contentType = self::contentTypes['getEnvironmentsUsageLinks'][0])
    {
        $request = $this->getEnvironmentsUsageLinksRequest($environment_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Acquia\CloudApi\Model\Usage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Usage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Usage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\Usage';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Usage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnvironmentsUsageLinksAsync
     *
     * Retrieves traversal links for an environment&#39;s usage data.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsUsageLinks'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnvironmentsUsageLinksAsync($environment_id, string $contentType = self::contentTypes['getEnvironmentsUsageLinks'][0])
    {
        return $this->getEnvironmentsUsageLinksAsyncWithHttpInfo($environment_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnvironmentsUsageLinksAsyncWithHttpInfo
     *
     * Retrieves traversal links for an environment&#39;s usage data.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsUsageLinks'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnvironmentsUsageLinksAsyncWithHttpInfo($environment_id, string $contentType = self::contentTypes['getEnvironmentsUsageLinks'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\Usage';
        $request = $this->getEnvironmentsUsageLinksRequest($environment_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnvironmentsUsageLinks'
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsUsageLinks'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEnvironmentsUsageLinksRequest($environment_id, string $contentType = self::contentTypes['getEnvironmentsUsageLinks'][0])
    {

        // verify the required parameter 'environment_id' is set
        if ($environment_id === null || (is_array($environment_id) && count($environment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_id when calling getEnvironmentsUsageLinks'
            );
        }


        $resourcePath = '/environments/{environmentId}/metrics/usage';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($environment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'environmentId' . '}',
                ObjectSerializer::toPathValue($environment_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnvironmentsUsageMetricData
     *
     * Retrieves usage metric data for an environment.
     *
     * @param  string $usage_metric A usage data metric type. (required)
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $from Specifies relative or absolute time period to retrieve results from. (Default value -7d) (optional)
     * @param  string $to Optionally specifies relative or absolute time period to retrieve results until. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsUsageMetricData'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\EnvironmentUsageMetric|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error
     */
    public function getEnvironmentsUsageMetricData($usage_metric, $environment_id, $from = null, $to = null, string $contentType = self::contentTypes['getEnvironmentsUsageMetricData'][0])
    {
        list($response) = $this->getEnvironmentsUsageMetricDataWithHttpInfo($usage_metric, $environment_id, $from, $to, $contentType);
        return $response;
    }

    /**
     * Operation getEnvironmentsUsageMetricDataWithHttpInfo
     *
     * Retrieves usage metric data for an environment.
     *
     * @param  string $usage_metric A usage data metric type. (required)
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $from Specifies relative or absolute time period to retrieve results from. (Default value -7d) (optional)
     * @param  string $to Optionally specifies relative or absolute time period to retrieve results until. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsUsageMetricData'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\EnvironmentUsageMetric|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnvironmentsUsageMetricDataWithHttpInfo($usage_metric, $environment_id, $from = null, $to = null, string $contentType = self::contentTypes['getEnvironmentsUsageMetricData'][0])
    {
        $request = $this->getEnvironmentsUsageMetricDataRequest($usage_metric, $environment_id, $from, $to, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Acquia\CloudApi\Model\EnvironmentUsageMetric' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\EnvironmentUsageMetric' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\EnvironmentUsageMetric', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\EnvironmentUsageMetric';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\EnvironmentUsageMetric',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnvironmentsUsageMetricDataAsync
     *
     * Retrieves usage metric data for an environment.
     *
     * @param  string $usage_metric A usage data metric type. (required)
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $from Specifies relative or absolute time period to retrieve results from. (Default value -7d) (optional)
     * @param  string $to Optionally specifies relative or absolute time period to retrieve results until. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsUsageMetricData'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnvironmentsUsageMetricDataAsync($usage_metric, $environment_id, $from = null, $to = null, string $contentType = self::contentTypes['getEnvironmentsUsageMetricData'][0])
    {
        return $this->getEnvironmentsUsageMetricDataAsyncWithHttpInfo($usage_metric, $environment_id, $from, $to, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnvironmentsUsageMetricDataAsyncWithHttpInfo
     *
     * Retrieves usage metric data for an environment.
     *
     * @param  string $usage_metric A usage data metric type. (required)
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $from Specifies relative or absolute time period to retrieve results from. (Default value -7d) (optional)
     * @param  string $to Optionally specifies relative or absolute time period to retrieve results until. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsUsageMetricData'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnvironmentsUsageMetricDataAsyncWithHttpInfo($usage_metric, $environment_id, $from = null, $to = null, string $contentType = self::contentTypes['getEnvironmentsUsageMetricData'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\EnvironmentUsageMetric';
        $request = $this->getEnvironmentsUsageMetricDataRequest($usage_metric, $environment_id, $from, $to, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnvironmentsUsageMetricData'
     *
     * @param  string $usage_metric A usage data metric type. (required)
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $from Specifies relative or absolute time period to retrieve results from. (Default value -7d) (optional)
     * @param  string $to Optionally specifies relative or absolute time period to retrieve results until. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsUsageMetricData'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEnvironmentsUsageMetricDataRequest($usage_metric, $environment_id, $from = null, $to = null, string $contentType = self::contentTypes['getEnvironmentsUsageMetricData'][0])
    {

        // verify the required parameter 'usage_metric' is set
        if ($usage_metric === null || (is_array($usage_metric) && count($usage_metric) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $usage_metric when calling getEnvironmentsUsageMetricData'
            );
        }

        // verify the required parameter 'environment_id' is set
        if ($environment_id === null || (is_array($environment_id) && count($environment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_id when calling getEnvironmentsUsageMetricData'
            );
        }




        $resourcePath = '/environments/{environmentId}/metrics/usage/{usageMetric}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from,
            'from', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $to,
            'to', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($usage_metric !== null) {
            $resourcePath = str_replace(
                '{' . 'usageMetric' . '}',
                ObjectSerializer::toPathValue($usage_metric),
                $resourcePath
            );
        }
        // path params
        if ($environment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'environmentId' . '}',
                ObjectSerializer::toPathValue($environment_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnvironmentsVariable
     *
     * Get an environment variable associated with this environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $environment_variable_name The environment variable name. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsVariable'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\EnvironmentVariable|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error
     */
    public function getEnvironmentsVariable($environment_id, $environment_variable_name, string $contentType = self::contentTypes['getEnvironmentsVariable'][0])
    {
        list($response) = $this->getEnvironmentsVariableWithHttpInfo($environment_id, $environment_variable_name, $contentType);
        return $response;
    }

    /**
     * Operation getEnvironmentsVariableWithHttpInfo
     *
     * Get an environment variable associated with this environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $environment_variable_name The environment variable name. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsVariable'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\EnvironmentVariable|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnvironmentsVariableWithHttpInfo($environment_id, $environment_variable_name, string $contentType = self::contentTypes['getEnvironmentsVariable'][0])
    {
        $request = $this->getEnvironmentsVariableRequest($environment_id, $environment_variable_name, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Acquia\CloudApi\Model\EnvironmentVariable' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\EnvironmentVariable' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\EnvironmentVariable', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\EnvironmentVariable';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\EnvironmentVariable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnvironmentsVariableAsync
     *
     * Get an environment variable associated with this environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $environment_variable_name The environment variable name. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsVariable'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnvironmentsVariableAsync($environment_id, $environment_variable_name, string $contentType = self::contentTypes['getEnvironmentsVariable'][0])
    {
        return $this->getEnvironmentsVariableAsyncWithHttpInfo($environment_id, $environment_variable_name, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnvironmentsVariableAsyncWithHttpInfo
     *
     * Get an environment variable associated with this environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $environment_variable_name The environment variable name. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsVariable'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnvironmentsVariableAsyncWithHttpInfo($environment_id, $environment_variable_name, string $contentType = self::contentTypes['getEnvironmentsVariable'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\EnvironmentVariable';
        $request = $this->getEnvironmentsVariableRequest($environment_id, $environment_variable_name, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnvironmentsVariable'
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $environment_variable_name The environment variable name. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsVariable'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEnvironmentsVariableRequest($environment_id, $environment_variable_name, string $contentType = self::contentTypes['getEnvironmentsVariable'][0])
    {

        // verify the required parameter 'environment_id' is set
        if ($environment_id === null || (is_array($environment_id) && count($environment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_id when calling getEnvironmentsVariable'
            );
        }

        // verify the required parameter 'environment_variable_name' is set
        if ($environment_variable_name === null || (is_array($environment_variable_name) && count($environment_variable_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_variable_name when calling getEnvironmentsVariable'
            );
        }
        if (strlen($environment_variable_name) > 255) {
            throw new \InvalidArgumentException('invalid length for "$environment_variable_name" when calling EnvironmentsApi.getEnvironmentsVariable, must be smaller than or equal to 255.');
        }
        if (strlen($environment_variable_name) < 1) {
            throw new \InvalidArgumentException('invalid length for "$environment_variable_name" when calling EnvironmentsApi.getEnvironmentsVariable, must be bigger than or equal to 1.');
        }
        if (!preg_match("/^(?!(ACQUIA_|AH_))[A-Za-z_][A-Za-z0-9_]*$/", $environment_variable_name)) {
            throw new \InvalidArgumentException("invalid value for \"environment_variable_name\" when calling EnvironmentsApi.getEnvironmentsVariable, must conform to the pattern /^(?!(ACQUIA_|AH_))[A-Za-z_][A-Za-z0-9_]*$/.");
        }
        

        $resourcePath = '/environments/{environmentId}/variables/{environmentVariableName}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($environment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'environmentId' . '}',
                ObjectSerializer::toPathValue($environment_id),
                $resourcePath
            );
        }
        // path params
        if ($environment_variable_name !== null) {
            $resourcePath = str_replace(
                '{' . 'environmentVariableName' . '}',
                ObjectSerializer::toPathValue($environment_variable_name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnvironmentsVariables
     *
     * Returns a list of environment variables associated with this environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $sort A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable. (optional)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;) (optional)
     * @param  int $limit The maximum number of items to return. (optional)
     * @param  int $offset An integer to signify the offset to paginate from. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsVariables'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\EnvironmentVariables|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error
     */
    public function getEnvironmentsVariables($environment_id, $sort = null, $filter = null, $limit = null, $offset = null, string $contentType = self::contentTypes['getEnvironmentsVariables'][0])
    {
        list($response) = $this->getEnvironmentsVariablesWithHttpInfo($environment_id, $sort, $filter, $limit, $offset, $contentType);
        return $response;
    }

    /**
     * Operation getEnvironmentsVariablesWithHttpInfo
     *
     * Returns a list of environment variables associated with this environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $sort A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable. (optional)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;) (optional)
     * @param  int $limit The maximum number of items to return. (optional)
     * @param  int $offset An integer to signify the offset to paginate from. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsVariables'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\EnvironmentVariables|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnvironmentsVariablesWithHttpInfo($environment_id, $sort = null, $filter = null, $limit = null, $offset = null, string $contentType = self::contentTypes['getEnvironmentsVariables'][0])
    {
        $request = $this->getEnvironmentsVariablesRequest($environment_id, $sort, $filter, $limit, $offset, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Acquia\CloudApi\Model\EnvironmentVariables' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\EnvironmentVariables' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\EnvironmentVariables', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\EnvironmentVariables';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\EnvironmentVariables',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnvironmentsVariablesAsync
     *
     * Returns a list of environment variables associated with this environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $sort A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable. (optional)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;) (optional)
     * @param  int $limit The maximum number of items to return. (optional)
     * @param  int $offset An integer to signify the offset to paginate from. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsVariables'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnvironmentsVariablesAsync($environment_id, $sort = null, $filter = null, $limit = null, $offset = null, string $contentType = self::contentTypes['getEnvironmentsVariables'][0])
    {
        return $this->getEnvironmentsVariablesAsyncWithHttpInfo($environment_id, $sort, $filter, $limit, $offset, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnvironmentsVariablesAsyncWithHttpInfo
     *
     * Returns a list of environment variables associated with this environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $sort A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable. (optional)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;) (optional)
     * @param  int $limit The maximum number of items to return. (optional)
     * @param  int $offset An integer to signify the offset to paginate from. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsVariables'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnvironmentsVariablesAsyncWithHttpInfo($environment_id, $sort = null, $filter = null, $limit = null, $offset = null, string $contentType = self::contentTypes['getEnvironmentsVariables'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\EnvironmentVariables';
        $request = $this->getEnvironmentsVariablesRequest($environment_id, $sort, $filter, $limit, $offset, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnvironmentsVariables'
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $sort A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable. (optional)
     * @param  string $filter The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.  There are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:  * Equals: &#x60;&#x3D; (%3D)&#x60; * Does not equal: &#x60;!&#x3D; (!%3D)&#x60; * Greater than: &#x60;&gt; (%3E)&#x60; * Less than: &#x60;&lt; (%3C)&#x60; * Greater than or equal to: &#x60;&gt;&#x3D; (%3E%3D)&#x60; * Less than or equal to: &#x60;&lt;&#x3D; (%3C%3D)&#x60; * Contains substring: &#x60;&#x3D;@ (%3D@)&#x60; * Does not contain substring: &#x60;!@ (!@)&#x60;  Filters can be combined using &#x60;OR&#x60; and &#x60;AND&#x60; boolean logic. The &#x60;OR&#x60; operator is defined using a comma (&#x60;,&#x60;) and the &#x60;AND&#x60; operator is defined using a semi-colon (&#x60;;&#x60;).  Some examples: * &#x60;filter&#x3D;field%3Dvalue&#x60; (&#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60;) * &#x60;filter&#x3D;field%3D@*partialmatch,field%3Dvalue;field2%3C5&#x60; (&#x60;field&#x60; ends with &#x60;&#39;partialmatch&#39;&#x60; OR &#x60;field&#x60; equals &#x60;&#39;value&#39;&#x60; AND &#x60;field2&#x60; &gt; &#x60;5&#x60;) (optional)
     * @param  int $limit The maximum number of items to return. (optional)
     * @param  int $offset An integer to signify the offset to paginate from. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEnvironmentsVariables'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEnvironmentsVariablesRequest($environment_id, $sort = null, $filter = null, $limit = null, $offset = null, string $contentType = self::contentTypes['getEnvironmentsVariables'][0])
    {

        // verify the required parameter 'environment_id' is set
        if ($environment_id === null || (is_array($environment_id) && count($environment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_id when calling getEnvironmentsVariables'
            );
        }

        
        



        $resourcePath = '/environments/{environmentId}/variables';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            'filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($environment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'environmentId' . '}',
                ObjectSerializer::toPathValue($environment_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSsl
     *
     * Returns the SSL settings for this environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSsl'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\Ssl|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error
     */
    public function getSsl($environment_id, string $contentType = self::contentTypes['getSsl'][0])
    {
        list($response) = $this->getSslWithHttpInfo($environment_id, $contentType);
        return $response;
    }

    /**
     * Operation getSslWithHttpInfo
     *
     * Returns the SSL settings for this environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSsl'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\Ssl|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSslWithHttpInfo($environment_id, string $contentType = self::contentTypes['getSsl'][0])
    {
        $request = $this->getSslRequest($environment_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Acquia\CloudApi\Model\Ssl' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Ssl' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Ssl', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\Ssl';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Ssl',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSslAsync
     *
     * Returns the SSL settings for this environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSsl'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSslAsync($environment_id, string $contentType = self::contentTypes['getSsl'][0])
    {
        return $this->getSslAsyncWithHttpInfo($environment_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSslAsyncWithHttpInfo
     *
     * Returns the SSL settings for this environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSsl'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSslAsyncWithHttpInfo($environment_id, string $contentType = self::contentTypes['getSsl'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\Ssl';
        $request = $this->getSslRequest($environment_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSsl'
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSsl'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getSslRequest($environment_id, string $contentType = self::contentTypes['getSsl'][0])
    {

        // verify the required parameter 'environment_id' is set
        if ($environment_id === null || (is_array($environment_id) && count($environment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_id when calling getSsl'
            );
        }


        $resourcePath = '/environments/{environmentId}/ssl';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($environment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'environmentId' . '}',
                ObjectSerializer::toPathValue($environment_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postActivateCertificate
     *
     * Activates an SSL certificate.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  int $certificate_id An ID that uniquely identifies a certificate. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postActivateCertificate'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\ValidationError|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\ValidationError
     */
    public function postActivateCertificate($environment_id, $certificate_id, string $contentType = self::contentTypes['postActivateCertificate'][0])
    {
        list($response) = $this->postActivateCertificateWithHttpInfo($environment_id, $certificate_id, $contentType);
        return $response;
    }

    /**
     * Operation postActivateCertificateWithHttpInfo
     *
     * Activates an SSL certificate.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  int $certificate_id An ID that uniquely identifies a certificate. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postActivateCertificate'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\ValidationError|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\ValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function postActivateCertificateWithHttpInfo($environment_id, $certificate_id, string $contentType = self::contentTypes['postActivateCertificate'][0])
    {
        $request = $this->postActivateCertificateRequest($environment_id, $certificate_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 202:
                    if ('\Acquia\CloudApi\Model\MessageWithLinks' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\MessageWithLinks' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\MessageWithLinks', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Acquia\CloudApi\Model\ValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\ValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\ValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Acquia\CloudApi\Model\ValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\ValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\ValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\MessageWithLinks',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\ValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\ValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postActivateCertificateAsync
     *
     * Activates an SSL certificate.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  int $certificate_id An ID that uniquely identifies a certificate. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postActivateCertificate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postActivateCertificateAsync($environment_id, $certificate_id, string $contentType = self::contentTypes['postActivateCertificate'][0])
    {
        return $this->postActivateCertificateAsyncWithHttpInfo($environment_id, $certificate_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postActivateCertificateAsyncWithHttpInfo
     *
     * Activates an SSL certificate.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  int $certificate_id An ID that uniquely identifies a certificate. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postActivateCertificate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postActivateCertificateAsyncWithHttpInfo($environment_id, $certificate_id, string $contentType = self::contentTypes['postActivateCertificate'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
        $request = $this->postActivateCertificateRequest($environment_id, $certificate_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postActivateCertificate'
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  int $certificate_id An ID that uniquely identifies a certificate. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postActivateCertificate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postActivateCertificateRequest($environment_id, $certificate_id, string $contentType = self::contentTypes['postActivateCertificate'][0])
    {

        // verify the required parameter 'environment_id' is set
        if ($environment_id === null || (is_array($environment_id) && count($environment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_id when calling postActivateCertificate'
            );
        }

        // verify the required parameter 'certificate_id' is set
        if ($certificate_id === null || (is_array($certificate_id) && count($certificate_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $certificate_id when calling postActivateCertificate'
            );
        }


        $resourcePath = '/environments/{environmentId}/ssl/certificates/{certificateId}/actions/activate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($environment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'environmentId' . '}',
                ObjectSerializer::toPathValue($environment_id),
                $resourcePath
            );
        }
        // path params
        if ($certificate_id !== null) {
            $resourcePath = str_replace(
                '{' . 'certificateId' . '}',
                ObjectSerializer::toPathValue($certificate_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postCdnByEnvironmentId
     *
     * Enables a CDN for an environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postCdnByEnvironmentId'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error
     */
    public function postCdnByEnvironmentId($environment_id, string $contentType = self::contentTypes['postCdnByEnvironmentId'][0])
    {
        list($response) = $this->postCdnByEnvironmentIdWithHttpInfo($environment_id, $contentType);
        return $response;
    }

    /**
     * Operation postCdnByEnvironmentIdWithHttpInfo
     *
     * Enables a CDN for an environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postCdnByEnvironmentId'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function postCdnByEnvironmentIdWithHttpInfo($environment_id, string $contentType = self::contentTypes['postCdnByEnvironmentId'][0])
    {
        $request = $this->postCdnByEnvironmentIdRequest($environment_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Acquia\CloudApi\Model\MessageWithLinks' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\MessageWithLinks' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\MessageWithLinks', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\MessageWithLinks',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postCdnByEnvironmentIdAsync
     *
     * Enables a CDN for an environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postCdnByEnvironmentId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postCdnByEnvironmentIdAsync($environment_id, string $contentType = self::contentTypes['postCdnByEnvironmentId'][0])
    {
        return $this->postCdnByEnvironmentIdAsyncWithHttpInfo($environment_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postCdnByEnvironmentIdAsyncWithHttpInfo
     *
     * Enables a CDN for an environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postCdnByEnvironmentId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postCdnByEnvironmentIdAsyncWithHttpInfo($environment_id, string $contentType = self::contentTypes['postCdnByEnvironmentId'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
        $request = $this->postCdnByEnvironmentIdRequest($environment_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postCdnByEnvironmentId'
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postCdnByEnvironmentId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postCdnByEnvironmentIdRequest($environment_id, string $contentType = self::contentTypes['postCdnByEnvironmentId'][0])
    {

        // verify the required parameter 'environment_id' is set
        if ($environment_id === null || (is_array($environment_id) && count($environment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_id when calling postCdnByEnvironmentId'
            );
        }


        $resourcePath = '/environments/{environmentId}/cdn';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($environment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'environmentId' . '}',
                ObjectSerializer::toPathValue($environment_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postCertificate
     *
     * Install an SSL certificate.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  \Acquia\CloudApi\Model\PostCertificate $post_certificate post_certificate (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postCertificate'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\ValidationError
     */
    public function postCertificate($environment_id, $post_certificate, string $contentType = self::contentTypes['postCertificate'][0])
    {
        list($response) = $this->postCertificateWithHttpInfo($environment_id, $post_certificate, $contentType);
        return $response;
    }

    /**
     * Operation postCertificateWithHttpInfo
     *
     * Install an SSL certificate.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  \Acquia\CloudApi\Model\PostCertificate $post_certificate (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postCertificate'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\ValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function postCertificateWithHttpInfo($environment_id, $post_certificate, string $contentType = self::contentTypes['postCertificate'][0])
    {
        $request = $this->postCertificateRequest($environment_id, $post_certificate, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 202:
                    if ('\Acquia\CloudApi\Model\MessageWithLinks' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\MessageWithLinks' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\MessageWithLinks', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Acquia\CloudApi\Model\ValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\ValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\ValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\MessageWithLinks',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\ValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postCertificateAsync
     *
     * Install an SSL certificate.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  \Acquia\CloudApi\Model\PostCertificate $post_certificate (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postCertificate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postCertificateAsync($environment_id, $post_certificate, string $contentType = self::contentTypes['postCertificate'][0])
    {
        return $this->postCertificateAsyncWithHttpInfo($environment_id, $post_certificate, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postCertificateAsyncWithHttpInfo
     *
     * Install an SSL certificate.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  \Acquia\CloudApi\Model\PostCertificate $post_certificate (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postCertificate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postCertificateAsyncWithHttpInfo($environment_id, $post_certificate, string $contentType = self::contentTypes['postCertificate'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
        $request = $this->postCertificateRequest($environment_id, $post_certificate, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postCertificate'
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  \Acquia\CloudApi\Model\PostCertificate $post_certificate (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postCertificate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postCertificateRequest($environment_id, $post_certificate, string $contentType = self::contentTypes['postCertificate'][0])
    {

        // verify the required parameter 'environment_id' is set
        if ($environment_id === null || (is_array($environment_id) && count($environment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_id when calling postCertificate'
            );
        }

        // verify the required parameter 'post_certificate' is set
        if ($post_certificate === null || (is_array($post_certificate) && count($post_certificate) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $post_certificate when calling postCertificate'
            );
        }


        $resourcePath = '/environments/{environmentId}/ssl/certificates';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($environment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'environmentId' . '}',
                ObjectSerializer::toPathValue($environment_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_certificate)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_certificate));
            } else {
                $httpBody = $post_certificate;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postCertificateSigningRequest
     *
     * Generates a certificate signing request (CSR) for one or more domains.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  \Acquia\CloudApi\Model\PostCsr $post_csr post_csr (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postCertificateSigningRequest'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\Message|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\ValidationError
     */
    public function postCertificateSigningRequest($environment_id, $post_csr, string $contentType = self::contentTypes['postCertificateSigningRequest'][0])
    {
        list($response) = $this->postCertificateSigningRequestWithHttpInfo($environment_id, $post_csr, $contentType);
        return $response;
    }

    /**
     * Operation postCertificateSigningRequestWithHttpInfo
     *
     * Generates a certificate signing request (CSR) for one or more domains.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  \Acquia\CloudApi\Model\PostCsr $post_csr (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postCertificateSigningRequest'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\Message|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\ValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function postCertificateSigningRequestWithHttpInfo($environment_id, $post_csr, string $contentType = self::contentTypes['postCertificateSigningRequest'][0])
    {
        $request = $this->postCertificateSigningRequestRequest($environment_id, $post_csr, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 202:
                    if ('\Acquia\CloudApi\Model\Message' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Message' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Message', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Acquia\CloudApi\Model\ValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\ValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\ValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\Message';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Message',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\ValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postCertificateSigningRequestAsync
     *
     * Generates a certificate signing request (CSR) for one or more domains.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  \Acquia\CloudApi\Model\PostCsr $post_csr (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postCertificateSigningRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postCertificateSigningRequestAsync($environment_id, $post_csr, string $contentType = self::contentTypes['postCertificateSigningRequest'][0])
    {
        return $this->postCertificateSigningRequestAsyncWithHttpInfo($environment_id, $post_csr, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postCertificateSigningRequestAsyncWithHttpInfo
     *
     * Generates a certificate signing request (CSR) for one or more domains.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  \Acquia\CloudApi\Model\PostCsr $post_csr (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postCertificateSigningRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postCertificateSigningRequestAsyncWithHttpInfo($environment_id, $post_csr, string $contentType = self::contentTypes['postCertificateSigningRequest'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\Message';
        $request = $this->postCertificateSigningRequestRequest($environment_id, $post_csr, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postCertificateSigningRequest'
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  \Acquia\CloudApi\Model\PostCsr $post_csr (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postCertificateSigningRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postCertificateSigningRequestRequest($environment_id, $post_csr, string $contentType = self::contentTypes['postCertificateSigningRequest'][0])
    {

        // verify the required parameter 'environment_id' is set
        if ($environment_id === null || (is_array($environment_id) && count($environment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_id when calling postCertificateSigningRequest'
            );
        }

        // verify the required parameter 'post_csr' is set
        if ($post_csr === null || (is_array($post_csr) && count($post_csr) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $post_csr when calling postCertificateSigningRequest'
            );
        }


        $resourcePath = '/environments/{environmentId}/ssl/csrs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($environment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'environmentId' . '}',
                ObjectSerializer::toPathValue($environment_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_csr)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_csr));
            } else {
                $httpBody = $post_csr;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postChangeEnvironmentLabel
     *
     * Change the label for an environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  \Acquia\CloudApi\Model\PostChangeEnvironmentLabelRequest $post_change_environment_label_request post_change_environment_label_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postChangeEnvironmentLabel'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\Message|\Acquia\CloudApi\Model\ValidationError|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error
     * @deprecated
     */
    public function postChangeEnvironmentLabel($environment_id, $post_change_environment_label_request, string $contentType = self::contentTypes['postChangeEnvironmentLabel'][0])
    {
        list($response) = $this->postChangeEnvironmentLabelWithHttpInfo($environment_id, $post_change_environment_label_request, $contentType);
        return $response;
    }

    /**
     * Operation postChangeEnvironmentLabelWithHttpInfo
     *
     * Change the label for an environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  \Acquia\CloudApi\Model\PostChangeEnvironmentLabelRequest $post_change_environment_label_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postChangeEnvironmentLabel'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\Message|\Acquia\CloudApi\Model\ValidationError|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function postChangeEnvironmentLabelWithHttpInfo($environment_id, $post_change_environment_label_request, string $contentType = self::contentTypes['postChangeEnvironmentLabel'][0])
    {
        $request = $this->postChangeEnvironmentLabelRequest($environment_id, $post_change_environment_label_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 202:
                    if ('\Acquia\CloudApi\Model\Message' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Message' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Message', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Acquia\CloudApi\Model\ValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\ValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\ValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\Message';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Message',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\ValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postChangeEnvironmentLabelAsync
     *
     * Change the label for an environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  \Acquia\CloudApi\Model\PostChangeEnvironmentLabelRequest $post_change_environment_label_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postChangeEnvironmentLabel'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function postChangeEnvironmentLabelAsync($environment_id, $post_change_environment_label_request, string $contentType = self::contentTypes['postChangeEnvironmentLabel'][0])
    {
        return $this->postChangeEnvironmentLabelAsyncWithHttpInfo($environment_id, $post_change_environment_label_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postChangeEnvironmentLabelAsyncWithHttpInfo
     *
     * Change the label for an environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  \Acquia\CloudApi\Model\PostChangeEnvironmentLabelRequest $post_change_environment_label_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postChangeEnvironmentLabel'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function postChangeEnvironmentLabelAsyncWithHttpInfo($environment_id, $post_change_environment_label_request, string $contentType = self::contentTypes['postChangeEnvironmentLabel'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\Message';
        $request = $this->postChangeEnvironmentLabelRequest($environment_id, $post_change_environment_label_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postChangeEnvironmentLabel'
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  \Acquia\CloudApi\Model\PostChangeEnvironmentLabelRequest $post_change_environment_label_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postChangeEnvironmentLabel'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function postChangeEnvironmentLabelRequest($environment_id, $post_change_environment_label_request, string $contentType = self::contentTypes['postChangeEnvironmentLabel'][0])
    {

        // verify the required parameter 'environment_id' is set
        if ($environment_id === null || (is_array($environment_id) && count($environment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_id when calling postChangeEnvironmentLabel'
            );
        }

        // verify the required parameter 'post_change_environment_label_request' is set
        if ($post_change_environment_label_request === null || (is_array($post_change_environment_label_request) && count($post_change_environment_label_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $post_change_environment_label_request when calling postChangeEnvironmentLabel'
            );
        }


        $resourcePath = '/environments/{environmentId}/actions/change-label';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($environment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'environmentId' . '}',
                ObjectSerializer::toPathValue($environment_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_change_environment_label_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_change_environment_label_request));
            } else {
                $httpBody = $post_change_environment_label_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postDeactivateCertificate
     *
     * Deactivates an active SSL certificate.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  int $certificate_id An ID that uniquely identifies a certificate. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postDeactivateCertificate'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\ValidationError|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error
     */
    public function postDeactivateCertificate($environment_id, $certificate_id, string $contentType = self::contentTypes['postDeactivateCertificate'][0])
    {
        list($response) = $this->postDeactivateCertificateWithHttpInfo($environment_id, $certificate_id, $contentType);
        return $response;
    }

    /**
     * Operation postDeactivateCertificateWithHttpInfo
     *
     * Deactivates an active SSL certificate.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  int $certificate_id An ID that uniquely identifies a certificate. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postDeactivateCertificate'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\ValidationError|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function postDeactivateCertificateWithHttpInfo($environment_id, $certificate_id, string $contentType = self::contentTypes['postDeactivateCertificate'][0])
    {
        $request = $this->postDeactivateCertificateRequest($environment_id, $certificate_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 202:
                    if ('\Acquia\CloudApi\Model\MessageWithLinks' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\MessageWithLinks' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\MessageWithLinks', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Acquia\CloudApi\Model\ValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\ValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\ValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\MessageWithLinks',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\ValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postDeactivateCertificateAsync
     *
     * Deactivates an active SSL certificate.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  int $certificate_id An ID that uniquely identifies a certificate. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postDeactivateCertificate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postDeactivateCertificateAsync($environment_id, $certificate_id, string $contentType = self::contentTypes['postDeactivateCertificate'][0])
    {
        return $this->postDeactivateCertificateAsyncWithHttpInfo($environment_id, $certificate_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postDeactivateCertificateAsyncWithHttpInfo
     *
     * Deactivates an active SSL certificate.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  int $certificate_id An ID that uniquely identifies a certificate. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postDeactivateCertificate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postDeactivateCertificateAsyncWithHttpInfo($environment_id, $certificate_id, string $contentType = self::contentTypes['postDeactivateCertificate'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
        $request = $this->postDeactivateCertificateRequest($environment_id, $certificate_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postDeactivateCertificate'
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  int $certificate_id An ID that uniquely identifies a certificate. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postDeactivateCertificate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postDeactivateCertificateRequest($environment_id, $certificate_id, string $contentType = self::contentTypes['postDeactivateCertificate'][0])
    {

        // verify the required parameter 'environment_id' is set
        if ($environment_id === null || (is_array($environment_id) && count($environment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_id when calling postDeactivateCertificate'
            );
        }

        // verify the required parameter 'certificate_id' is set
        if ($certificate_id === null || (is_array($certificate_id) && count($certificate_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $certificate_id when calling postDeactivateCertificate'
            );
        }


        $resourcePath = '/environments/{environmentId}/ssl/certificates/{certificateId}/actions/deactivate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($environment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'environmentId' . '}',
                ObjectSerializer::toPathValue($environment_id),
                $resourcePath
            );
        }
        // path params
        if ($certificate_id !== null) {
            $resourcePath = str_replace(
                '{' . 'certificateId' . '}',
                ObjectSerializer::toPathValue($certificate_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postDeployArtifact
     *
     * Deploys an artifact to this environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  \Acquia\CloudApi\Model\PostDeployArtifactRequest $post_deploy_artifact_request post_deploy_artifact_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postDeployArtifact'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\ValidationError|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error
     */
    public function postDeployArtifact($environment_id, $post_deploy_artifact_request, string $contentType = self::contentTypes['postDeployArtifact'][0])
    {
        list($response) = $this->postDeployArtifactWithHttpInfo($environment_id, $post_deploy_artifact_request, $contentType);
        return $response;
    }

    /**
     * Operation postDeployArtifactWithHttpInfo
     *
     * Deploys an artifact to this environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  \Acquia\CloudApi\Model\PostDeployArtifactRequest $post_deploy_artifact_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postDeployArtifact'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\ValidationError|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function postDeployArtifactWithHttpInfo($environment_id, $post_deploy_artifact_request, string $contentType = self::contentTypes['postDeployArtifact'][0])
    {
        $request = $this->postDeployArtifactRequest($environment_id, $post_deploy_artifact_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 202:
                    if ('\Acquia\CloudApi\Model\MessageWithLinks' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\MessageWithLinks' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\MessageWithLinks', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Acquia\CloudApi\Model\ValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\ValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\ValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\MessageWithLinks',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\ValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postDeployArtifactAsync
     *
     * Deploys an artifact to this environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  \Acquia\CloudApi\Model\PostDeployArtifactRequest $post_deploy_artifact_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postDeployArtifact'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postDeployArtifactAsync($environment_id, $post_deploy_artifact_request, string $contentType = self::contentTypes['postDeployArtifact'][0])
    {
        return $this->postDeployArtifactAsyncWithHttpInfo($environment_id, $post_deploy_artifact_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postDeployArtifactAsyncWithHttpInfo
     *
     * Deploys an artifact to this environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  \Acquia\CloudApi\Model\PostDeployArtifactRequest $post_deploy_artifact_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postDeployArtifact'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postDeployArtifactAsyncWithHttpInfo($environment_id, $post_deploy_artifact_request, string $contentType = self::contentTypes['postDeployArtifact'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
        $request = $this->postDeployArtifactRequest($environment_id, $post_deploy_artifact_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postDeployArtifact'
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  \Acquia\CloudApi\Model\PostDeployArtifactRequest $post_deploy_artifact_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postDeployArtifact'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postDeployArtifactRequest($environment_id, $post_deploy_artifact_request, string $contentType = self::contentTypes['postDeployArtifact'][0])
    {

        // verify the required parameter 'environment_id' is set
        if ($environment_id === null || (is_array($environment_id) && count($environment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_id when calling postDeployArtifact'
            );
        }

        // verify the required parameter 'post_deploy_artifact_request' is set
        if ($post_deploy_artifact_request === null || (is_array($post_deploy_artifact_request) && count($post_deploy_artifact_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $post_deploy_artifact_request when calling postDeployArtifact'
            );
        }


        $resourcePath = '/environments/{environmentId}/artifacts/actions/switch';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($environment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'environmentId' . '}',
                ObjectSerializer::toPathValue($environment_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_deploy_artifact_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_deploy_artifact_request));
            } else {
                $httpBody = $post_deploy_artifact_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postEnvironmentCloudActionsDisable
     *
     * Disables Cloud Actions.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentCloudActionsDisable'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error
     */
    public function postEnvironmentCloudActionsDisable($environment_id, string $contentType = self::contentTypes['postEnvironmentCloudActionsDisable'][0])
    {
        list($response) = $this->postEnvironmentCloudActionsDisableWithHttpInfo($environment_id, $contentType);
        return $response;
    }

    /**
     * Operation postEnvironmentCloudActionsDisableWithHttpInfo
     *
     * Disables Cloud Actions.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentCloudActionsDisable'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function postEnvironmentCloudActionsDisableWithHttpInfo($environment_id, string $contentType = self::contentTypes['postEnvironmentCloudActionsDisable'][0])
    {
        $request = $this->postEnvironmentCloudActionsDisableRequest($environment_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Acquia\CloudApi\Model\MessageWithLinks' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\MessageWithLinks' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\MessageWithLinks', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\MessageWithLinks',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postEnvironmentCloudActionsDisableAsync
     *
     * Disables Cloud Actions.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentCloudActionsDisable'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnvironmentCloudActionsDisableAsync($environment_id, string $contentType = self::contentTypes['postEnvironmentCloudActionsDisable'][0])
    {
        return $this->postEnvironmentCloudActionsDisableAsyncWithHttpInfo($environment_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postEnvironmentCloudActionsDisableAsyncWithHttpInfo
     *
     * Disables Cloud Actions.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentCloudActionsDisable'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnvironmentCloudActionsDisableAsyncWithHttpInfo($environment_id, string $contentType = self::contentTypes['postEnvironmentCloudActionsDisable'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
        $request = $this->postEnvironmentCloudActionsDisableRequest($environment_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postEnvironmentCloudActionsDisable'
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentCloudActionsDisable'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postEnvironmentCloudActionsDisableRequest($environment_id, string $contentType = self::contentTypes['postEnvironmentCloudActionsDisable'][0])
    {

        // verify the required parameter 'environment_id' is set
        if ($environment_id === null || (is_array($environment_id) && count($environment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_id when calling postEnvironmentCloudActionsDisable'
            );
        }


        $resourcePath = '/environments/{environmentId}/cloud-actions/actions/disable';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($environment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'environmentId' . '}',
                ObjectSerializer::toPathValue($environment_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postEnvironmentCloudActionsEnable
     *
     * Enables Cloud Actions.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentCloudActionsEnable'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error
     */
    public function postEnvironmentCloudActionsEnable($environment_id, string $contentType = self::contentTypes['postEnvironmentCloudActionsEnable'][0])
    {
        list($response) = $this->postEnvironmentCloudActionsEnableWithHttpInfo($environment_id, $contentType);
        return $response;
    }

    /**
     * Operation postEnvironmentCloudActionsEnableWithHttpInfo
     *
     * Enables Cloud Actions.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentCloudActionsEnable'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function postEnvironmentCloudActionsEnableWithHttpInfo($environment_id, string $contentType = self::contentTypes['postEnvironmentCloudActionsEnable'][0])
    {
        $request = $this->postEnvironmentCloudActionsEnableRequest($environment_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Acquia\CloudApi\Model\MessageWithLinks' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\MessageWithLinks' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\MessageWithLinks', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\MessageWithLinks',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postEnvironmentCloudActionsEnableAsync
     *
     * Enables Cloud Actions.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentCloudActionsEnable'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnvironmentCloudActionsEnableAsync($environment_id, string $contentType = self::contentTypes['postEnvironmentCloudActionsEnable'][0])
    {
        return $this->postEnvironmentCloudActionsEnableAsyncWithHttpInfo($environment_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postEnvironmentCloudActionsEnableAsyncWithHttpInfo
     *
     * Enables Cloud Actions.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentCloudActionsEnable'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnvironmentCloudActionsEnableAsyncWithHttpInfo($environment_id, string $contentType = self::contentTypes['postEnvironmentCloudActionsEnable'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
        $request = $this->postEnvironmentCloudActionsEnableRequest($environment_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postEnvironmentCloudActionsEnable'
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentCloudActionsEnable'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postEnvironmentCloudActionsEnableRequest($environment_id, string $contentType = self::contentTypes['postEnvironmentCloudActionsEnable'][0])
    {

        // verify the required parameter 'environment_id' is set
        if ($environment_id === null || (is_array($environment_id) && count($environment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_id when calling postEnvironmentCloudActionsEnable'
            );
        }


        $resourcePath = '/environments/{environmentId}/cloud-actions/actions/enable';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($environment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'environmentId' . '}',
                ObjectSerializer::toPathValue($environment_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postEnvironmentCloudActionsReset
     *
     * Resets Cloud Actions.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentCloudActionsReset'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error
     */
    public function postEnvironmentCloudActionsReset($environment_id, string $contentType = self::contentTypes['postEnvironmentCloudActionsReset'][0])
    {
        list($response) = $this->postEnvironmentCloudActionsResetWithHttpInfo($environment_id, $contentType);
        return $response;
    }

    /**
     * Operation postEnvironmentCloudActionsResetWithHttpInfo
     *
     * Resets Cloud Actions.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentCloudActionsReset'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function postEnvironmentCloudActionsResetWithHttpInfo($environment_id, string $contentType = self::contentTypes['postEnvironmentCloudActionsReset'][0])
    {
        $request = $this->postEnvironmentCloudActionsResetRequest($environment_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Acquia\CloudApi\Model\MessageWithLinks' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\MessageWithLinks' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\MessageWithLinks', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\MessageWithLinks',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postEnvironmentCloudActionsResetAsync
     *
     * Resets Cloud Actions.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentCloudActionsReset'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnvironmentCloudActionsResetAsync($environment_id, string $contentType = self::contentTypes['postEnvironmentCloudActionsReset'][0])
    {
        return $this->postEnvironmentCloudActionsResetAsyncWithHttpInfo($environment_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postEnvironmentCloudActionsResetAsyncWithHttpInfo
     *
     * Resets Cloud Actions.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentCloudActionsReset'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnvironmentCloudActionsResetAsyncWithHttpInfo($environment_id, string $contentType = self::contentTypes['postEnvironmentCloudActionsReset'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
        $request = $this->postEnvironmentCloudActionsResetRequest($environment_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postEnvironmentCloudActionsReset'
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentCloudActionsReset'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postEnvironmentCloudActionsResetRequest($environment_id, string $contentType = self::contentTypes['postEnvironmentCloudActionsReset'][0])
    {

        // verify the required parameter 'environment_id' is set
        if ($environment_id === null || (is_array($environment_id) && count($environment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_id when calling postEnvironmentCloudActionsReset'
            );
        }


        $resourcePath = '/environments/{environmentId}/cloud-actions/actions/reset';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($environment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'environmentId' . '}',
                ObjectSerializer::toPathValue($environment_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postEnvironmentCronDelete
     *
     * Deletes a cron job.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $cron_id An ID that uniquely identifies a cron job. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentCronDelete'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error
     */
    public function postEnvironmentCronDelete($environment_id, $cron_id, string $contentType = self::contentTypes['postEnvironmentCronDelete'][0])
    {
        list($response) = $this->postEnvironmentCronDeleteWithHttpInfo($environment_id, $cron_id, $contentType);
        return $response;
    }

    /**
     * Operation postEnvironmentCronDeleteWithHttpInfo
     *
     * Deletes a cron job.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $cron_id An ID that uniquely identifies a cron job. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentCronDelete'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function postEnvironmentCronDeleteWithHttpInfo($environment_id, $cron_id, string $contentType = self::contentTypes['postEnvironmentCronDelete'][0])
    {
        $request = $this->postEnvironmentCronDeleteRequest($environment_id, $cron_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 202:
                    if ('\Acquia\CloudApi\Model\MessageWithLinks' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\MessageWithLinks' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\MessageWithLinks', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\MessageWithLinks',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postEnvironmentCronDeleteAsync
     *
     * Deletes a cron job.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $cron_id An ID that uniquely identifies a cron job. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentCronDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnvironmentCronDeleteAsync($environment_id, $cron_id, string $contentType = self::contentTypes['postEnvironmentCronDelete'][0])
    {
        return $this->postEnvironmentCronDeleteAsyncWithHttpInfo($environment_id, $cron_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postEnvironmentCronDeleteAsyncWithHttpInfo
     *
     * Deletes a cron job.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $cron_id An ID that uniquely identifies a cron job. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentCronDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnvironmentCronDeleteAsyncWithHttpInfo($environment_id, $cron_id, string $contentType = self::contentTypes['postEnvironmentCronDelete'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
        $request = $this->postEnvironmentCronDeleteRequest($environment_id, $cron_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postEnvironmentCronDelete'
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $cron_id An ID that uniquely identifies a cron job. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentCronDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postEnvironmentCronDeleteRequest($environment_id, $cron_id, string $contentType = self::contentTypes['postEnvironmentCronDelete'][0])
    {

        // verify the required parameter 'environment_id' is set
        if ($environment_id === null || (is_array($environment_id) && count($environment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_id when calling postEnvironmentCronDelete'
            );
        }

        // verify the required parameter 'cron_id' is set
        if ($cron_id === null || (is_array($cron_id) && count($cron_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cron_id when calling postEnvironmentCronDelete'
            );
        }


        $resourcePath = '/environments/{environmentId}/crons/{cronId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($environment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'environmentId' . '}',
                ObjectSerializer::toPathValue($environment_id),
                $resourcePath
            );
        }
        // path params
        if ($cron_id !== null) {
            $resourcePath = str_replace(
                '{' . 'cronId' . '}',
                ObjectSerializer::toPathValue($cron_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postEnvironmentCronDisable
     *
     * Disables a cron job.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $cron_id An ID that uniquely identifies a cron job. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentCronDisable'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error
     */
    public function postEnvironmentCronDisable($environment_id, $cron_id, string $contentType = self::contentTypes['postEnvironmentCronDisable'][0])
    {
        list($response) = $this->postEnvironmentCronDisableWithHttpInfo($environment_id, $cron_id, $contentType);
        return $response;
    }

    /**
     * Operation postEnvironmentCronDisableWithHttpInfo
     *
     * Disables a cron job.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $cron_id An ID that uniquely identifies a cron job. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentCronDisable'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function postEnvironmentCronDisableWithHttpInfo($environment_id, $cron_id, string $contentType = self::contentTypes['postEnvironmentCronDisable'][0])
    {
        $request = $this->postEnvironmentCronDisableRequest($environment_id, $cron_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 202:
                    if ('\Acquia\CloudApi\Model\MessageWithLinks' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\MessageWithLinks' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\MessageWithLinks', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\MessageWithLinks',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postEnvironmentCronDisableAsync
     *
     * Disables a cron job.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $cron_id An ID that uniquely identifies a cron job. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentCronDisable'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnvironmentCronDisableAsync($environment_id, $cron_id, string $contentType = self::contentTypes['postEnvironmentCronDisable'][0])
    {
        return $this->postEnvironmentCronDisableAsyncWithHttpInfo($environment_id, $cron_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postEnvironmentCronDisableAsyncWithHttpInfo
     *
     * Disables a cron job.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $cron_id An ID that uniquely identifies a cron job. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentCronDisable'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnvironmentCronDisableAsyncWithHttpInfo($environment_id, $cron_id, string $contentType = self::contentTypes['postEnvironmentCronDisable'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
        $request = $this->postEnvironmentCronDisableRequest($environment_id, $cron_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postEnvironmentCronDisable'
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $cron_id An ID that uniquely identifies a cron job. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentCronDisable'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postEnvironmentCronDisableRequest($environment_id, $cron_id, string $contentType = self::contentTypes['postEnvironmentCronDisable'][0])
    {

        // verify the required parameter 'environment_id' is set
        if ($environment_id === null || (is_array($environment_id) && count($environment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_id when calling postEnvironmentCronDisable'
            );
        }

        // verify the required parameter 'cron_id' is set
        if ($cron_id === null || (is_array($cron_id) && count($cron_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cron_id when calling postEnvironmentCronDisable'
            );
        }


        $resourcePath = '/environments/{environmentId}/crons/{cronId}/actions/disable';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($environment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'environmentId' . '}',
                ObjectSerializer::toPathValue($environment_id),
                $resourcePath
            );
        }
        // path params
        if ($cron_id !== null) {
            $resourcePath = str_replace(
                '{' . 'cronId' . '}',
                ObjectSerializer::toPathValue($cron_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postEnvironmentCronEnable
     *
     * Enables a cron job.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $cron_id An ID that uniquely identifies a cron job. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentCronEnable'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error
     */
    public function postEnvironmentCronEnable($environment_id, $cron_id, string $contentType = self::contentTypes['postEnvironmentCronEnable'][0])
    {
        list($response) = $this->postEnvironmentCronEnableWithHttpInfo($environment_id, $cron_id, $contentType);
        return $response;
    }

    /**
     * Operation postEnvironmentCronEnableWithHttpInfo
     *
     * Enables a cron job.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $cron_id An ID that uniquely identifies a cron job. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentCronEnable'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function postEnvironmentCronEnableWithHttpInfo($environment_id, $cron_id, string $contentType = self::contentTypes['postEnvironmentCronEnable'][0])
    {
        $request = $this->postEnvironmentCronEnableRequest($environment_id, $cron_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 202:
                    if ('\Acquia\CloudApi\Model\MessageWithLinks' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\MessageWithLinks' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\MessageWithLinks', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\MessageWithLinks',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postEnvironmentCronEnableAsync
     *
     * Enables a cron job.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $cron_id An ID that uniquely identifies a cron job. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentCronEnable'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnvironmentCronEnableAsync($environment_id, $cron_id, string $contentType = self::contentTypes['postEnvironmentCronEnable'][0])
    {
        return $this->postEnvironmentCronEnableAsyncWithHttpInfo($environment_id, $cron_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postEnvironmentCronEnableAsyncWithHttpInfo
     *
     * Enables a cron job.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $cron_id An ID that uniquely identifies a cron job. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentCronEnable'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnvironmentCronEnableAsyncWithHttpInfo($environment_id, $cron_id, string $contentType = self::contentTypes['postEnvironmentCronEnable'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
        $request = $this->postEnvironmentCronEnableRequest($environment_id, $cron_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postEnvironmentCronEnable'
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $cron_id An ID that uniquely identifies a cron job. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentCronEnable'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postEnvironmentCronEnableRequest($environment_id, $cron_id, string $contentType = self::contentTypes['postEnvironmentCronEnable'][0])
    {

        // verify the required parameter 'environment_id' is set
        if ($environment_id === null || (is_array($environment_id) && count($environment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_id when calling postEnvironmentCronEnable'
            );
        }

        // verify the required parameter 'cron_id' is set
        if ($cron_id === null || (is_array($cron_id) && count($cron_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cron_id when calling postEnvironmentCronEnable'
            );
        }


        $resourcePath = '/environments/{environmentId}/crons/{cronId}/actions/enable';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($environment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'environmentId' . '}',
                ObjectSerializer::toPathValue($environment_id),
                $resourcePath
            );
        }
        // path params
        if ($cron_id !== null) {
            $resourcePath = str_replace(
                '{' . 'cronId' . '}',
                ObjectSerializer::toPathValue($cron_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postEnvironmentCrons
     *
     * Creates a scheduled job with cron.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  \Acquia\CloudApi\Model\PostCron $post_cron post_cron (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentCrons'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\ValidationError|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error
     */
    public function postEnvironmentCrons($environment_id, $post_cron, string $contentType = self::contentTypes['postEnvironmentCrons'][0])
    {
        list($response) = $this->postEnvironmentCronsWithHttpInfo($environment_id, $post_cron, $contentType);
        return $response;
    }

    /**
     * Operation postEnvironmentCronsWithHttpInfo
     *
     * Creates a scheduled job with cron.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  \Acquia\CloudApi\Model\PostCron $post_cron (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentCrons'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\ValidationError|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function postEnvironmentCronsWithHttpInfo($environment_id, $post_cron, string $contentType = self::contentTypes['postEnvironmentCrons'][0])
    {
        $request = $this->postEnvironmentCronsRequest($environment_id, $post_cron, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 202:
                    if ('\Acquia\CloudApi\Model\MessageWithLinks' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\MessageWithLinks' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\MessageWithLinks', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Acquia\CloudApi\Model\ValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\ValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\ValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\MessageWithLinks',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\ValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postEnvironmentCronsAsync
     *
     * Creates a scheduled job with cron.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  \Acquia\CloudApi\Model\PostCron $post_cron (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentCrons'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnvironmentCronsAsync($environment_id, $post_cron, string $contentType = self::contentTypes['postEnvironmentCrons'][0])
    {
        return $this->postEnvironmentCronsAsyncWithHttpInfo($environment_id, $post_cron, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postEnvironmentCronsAsyncWithHttpInfo
     *
     * Creates a scheduled job with cron.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  \Acquia\CloudApi\Model\PostCron $post_cron (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentCrons'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnvironmentCronsAsyncWithHttpInfo($environment_id, $post_cron, string $contentType = self::contentTypes['postEnvironmentCrons'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
        $request = $this->postEnvironmentCronsRequest($environment_id, $post_cron, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postEnvironmentCrons'
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  \Acquia\CloudApi\Model\PostCron $post_cron (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentCrons'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postEnvironmentCronsRequest($environment_id, $post_cron, string $contentType = self::contentTypes['postEnvironmentCrons'][0])
    {

        // verify the required parameter 'environment_id' is set
        if ($environment_id === null || (is_array($environment_id) && count($environment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_id when calling postEnvironmentCrons'
            );
        }

        // verify the required parameter 'post_cron' is set
        if ($post_cron === null || (is_array($post_cron) && count($post_cron) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $post_cron when calling postEnvironmentCrons'
            );
        }


        $resourcePath = '/environments/{environmentId}/crons';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($environment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'environmentId' . '}',
                ObjectSerializer::toPathValue($environment_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_cron)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_cron));
            } else {
                $httpBody = $post_cron;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postEnvironmentEmailDisable
     *
     * Disables email for an environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentEmailDisable'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error
     */
    public function postEnvironmentEmailDisable($environment_id, string $contentType = self::contentTypes['postEnvironmentEmailDisable'][0])
    {
        list($response) = $this->postEnvironmentEmailDisableWithHttpInfo($environment_id, $contentType);
        return $response;
    }

    /**
     * Operation postEnvironmentEmailDisableWithHttpInfo
     *
     * Disables email for an environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentEmailDisable'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function postEnvironmentEmailDisableWithHttpInfo($environment_id, string $contentType = self::contentTypes['postEnvironmentEmailDisable'][0])
    {
        $request = $this->postEnvironmentEmailDisableRequest($environment_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Acquia\CloudApi\Model\MessageWithLinks' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\MessageWithLinks' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\MessageWithLinks', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\MessageWithLinks',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postEnvironmentEmailDisableAsync
     *
     * Disables email for an environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentEmailDisable'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnvironmentEmailDisableAsync($environment_id, string $contentType = self::contentTypes['postEnvironmentEmailDisable'][0])
    {
        return $this->postEnvironmentEmailDisableAsyncWithHttpInfo($environment_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postEnvironmentEmailDisableAsyncWithHttpInfo
     *
     * Disables email for an environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentEmailDisable'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnvironmentEmailDisableAsyncWithHttpInfo($environment_id, string $contentType = self::contentTypes['postEnvironmentEmailDisable'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
        $request = $this->postEnvironmentEmailDisableRequest($environment_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postEnvironmentEmailDisable'
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentEmailDisable'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postEnvironmentEmailDisableRequest($environment_id, string $contentType = self::contentTypes['postEnvironmentEmailDisable'][0])
    {

        // verify the required parameter 'environment_id' is set
        if ($environment_id === null || (is_array($environment_id) && count($environment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_id when calling postEnvironmentEmailDisable'
            );
        }


        $resourcePath = '/environments/{environmentId}/email/actions/disable';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($environment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'environmentId' . '}',
                ObjectSerializer::toPathValue($environment_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postEnvironmentEmailEnable
     *
     * Enables email for an environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentEmailEnable'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error
     */
    public function postEnvironmentEmailEnable($environment_id, string $contentType = self::contentTypes['postEnvironmentEmailEnable'][0])
    {
        list($response) = $this->postEnvironmentEmailEnableWithHttpInfo($environment_id, $contentType);
        return $response;
    }

    /**
     * Operation postEnvironmentEmailEnableWithHttpInfo
     *
     * Enables email for an environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentEmailEnable'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function postEnvironmentEmailEnableWithHttpInfo($environment_id, string $contentType = self::contentTypes['postEnvironmentEmailEnable'][0])
    {
        $request = $this->postEnvironmentEmailEnableRequest($environment_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Acquia\CloudApi\Model\MessageWithLinks' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\MessageWithLinks' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\MessageWithLinks', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\MessageWithLinks',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postEnvironmentEmailEnableAsync
     *
     * Enables email for an environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentEmailEnable'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnvironmentEmailEnableAsync($environment_id, string $contentType = self::contentTypes['postEnvironmentEmailEnable'][0])
    {
        return $this->postEnvironmentEmailEnableAsyncWithHttpInfo($environment_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postEnvironmentEmailEnableAsyncWithHttpInfo
     *
     * Enables email for an environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentEmailEnable'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnvironmentEmailEnableAsyncWithHttpInfo($environment_id, string $contentType = self::contentTypes['postEnvironmentEmailEnable'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
        $request = $this->postEnvironmentEmailEnableRequest($environment_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postEnvironmentEmailEnable'
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentEmailEnable'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postEnvironmentEmailEnableRequest($environment_id, string $contentType = self::contentTypes['postEnvironmentEmailEnable'][0])
    {

        // verify the required parameter 'environment_id' is set
        if ($environment_id === null || (is_array($environment_id) && count($environment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_id when calling postEnvironmentEmailEnable'
            );
        }


        $resourcePath = '/environments/{environmentId}/email/actions/enable';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($environment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'environmentId' . '}',
                ObjectSerializer::toPathValue($environment_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postEnvironmentSearchIndexes
     *
     * Creates a search index for an environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  \Acquia\CloudApi\Model\PostEnvironmentSearchIndexesRequest $post_environment_search_indexes_request post_environment_search_indexes_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentSearchIndexes'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error
     */
    public function postEnvironmentSearchIndexes($environment_id, $post_environment_search_indexes_request, string $contentType = self::contentTypes['postEnvironmentSearchIndexes'][0])
    {
        list($response) = $this->postEnvironmentSearchIndexesWithHttpInfo($environment_id, $post_environment_search_indexes_request, $contentType);
        return $response;
    }

    /**
     * Operation postEnvironmentSearchIndexesWithHttpInfo
     *
     * Creates a search index for an environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  \Acquia\CloudApi\Model\PostEnvironmentSearchIndexesRequest $post_environment_search_indexes_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentSearchIndexes'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function postEnvironmentSearchIndexesWithHttpInfo($environment_id, $post_environment_search_indexes_request, string $contentType = self::contentTypes['postEnvironmentSearchIndexes'][0])
    {
        $request = $this->postEnvironmentSearchIndexesRequest($environment_id, $post_environment_search_indexes_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 202:
                    if ('\Acquia\CloudApi\Model\MessageWithLinks' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\MessageWithLinks' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\MessageWithLinks', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\MessageWithLinks',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postEnvironmentSearchIndexesAsync
     *
     * Creates a search index for an environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  \Acquia\CloudApi\Model\PostEnvironmentSearchIndexesRequest $post_environment_search_indexes_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentSearchIndexes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnvironmentSearchIndexesAsync($environment_id, $post_environment_search_indexes_request, string $contentType = self::contentTypes['postEnvironmentSearchIndexes'][0])
    {
        return $this->postEnvironmentSearchIndexesAsyncWithHttpInfo($environment_id, $post_environment_search_indexes_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postEnvironmentSearchIndexesAsyncWithHttpInfo
     *
     * Creates a search index for an environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  \Acquia\CloudApi\Model\PostEnvironmentSearchIndexesRequest $post_environment_search_indexes_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentSearchIndexes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnvironmentSearchIndexesAsyncWithHttpInfo($environment_id, $post_environment_search_indexes_request, string $contentType = self::contentTypes['postEnvironmentSearchIndexes'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
        $request = $this->postEnvironmentSearchIndexesRequest($environment_id, $post_environment_search_indexes_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postEnvironmentSearchIndexes'
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  \Acquia\CloudApi\Model\PostEnvironmentSearchIndexesRequest $post_environment_search_indexes_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentSearchIndexes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postEnvironmentSearchIndexesRequest($environment_id, $post_environment_search_indexes_request, string $contentType = self::contentTypes['postEnvironmentSearchIndexes'][0])
    {

        // verify the required parameter 'environment_id' is set
        if ($environment_id === null || (is_array($environment_id) && count($environment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_id when calling postEnvironmentSearchIndexes'
            );
        }

        // verify the required parameter 'post_environment_search_indexes_request' is set
        if ($post_environment_search_indexes_request === null || (is_array($post_environment_search_indexes_request) && count($post_environment_search_indexes_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $post_environment_search_indexes_request when calling postEnvironmentSearchIndexes'
            );
        }


        $resourcePath = '/environments/{environmentId}/search/indexes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($environment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'environmentId' . '}',
                ObjectSerializer::toPathValue($environment_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_environment_search_indexes_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_environment_search_indexes_request));
            } else {
                $httpBody = $post_environment_search_indexes_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postEnvironmentsClearCaches
     *
     * Clears the caches for one or more domains attached to this environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  \Acquia\CloudApi\Model\PostEnvironmentsClearCachesRequest $post_environments_clear_caches_request post_environments_clear_caches_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsClearCaches'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error
     */
    public function postEnvironmentsClearCaches($environment_id, $post_environments_clear_caches_request, string $contentType = self::contentTypes['postEnvironmentsClearCaches'][0])
    {
        list($response) = $this->postEnvironmentsClearCachesWithHttpInfo($environment_id, $post_environments_clear_caches_request, $contentType);
        return $response;
    }

    /**
     * Operation postEnvironmentsClearCachesWithHttpInfo
     *
     * Clears the caches for one or more domains attached to this environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  \Acquia\CloudApi\Model\PostEnvironmentsClearCachesRequest $post_environments_clear_caches_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsClearCaches'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function postEnvironmentsClearCachesWithHttpInfo($environment_id, $post_environments_clear_caches_request, string $contentType = self::contentTypes['postEnvironmentsClearCaches'][0])
    {
        $request = $this->postEnvironmentsClearCachesRequest($environment_id, $post_environments_clear_caches_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 202:
                    if ('\Acquia\CloudApi\Model\MessageWithLinks' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\MessageWithLinks' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\MessageWithLinks', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\MessageWithLinks',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postEnvironmentsClearCachesAsync
     *
     * Clears the caches for one or more domains attached to this environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  \Acquia\CloudApi\Model\PostEnvironmentsClearCachesRequest $post_environments_clear_caches_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsClearCaches'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnvironmentsClearCachesAsync($environment_id, $post_environments_clear_caches_request, string $contentType = self::contentTypes['postEnvironmentsClearCaches'][0])
    {
        return $this->postEnvironmentsClearCachesAsyncWithHttpInfo($environment_id, $post_environments_clear_caches_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postEnvironmentsClearCachesAsyncWithHttpInfo
     *
     * Clears the caches for one or more domains attached to this environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  \Acquia\CloudApi\Model\PostEnvironmentsClearCachesRequest $post_environments_clear_caches_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsClearCaches'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnvironmentsClearCachesAsyncWithHttpInfo($environment_id, $post_environments_clear_caches_request, string $contentType = self::contentTypes['postEnvironmentsClearCaches'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
        $request = $this->postEnvironmentsClearCachesRequest($environment_id, $post_environments_clear_caches_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postEnvironmentsClearCaches'
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  \Acquia\CloudApi\Model\PostEnvironmentsClearCachesRequest $post_environments_clear_caches_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsClearCaches'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postEnvironmentsClearCachesRequest($environment_id, $post_environments_clear_caches_request, string $contentType = self::contentTypes['postEnvironmentsClearCaches'][0])
    {

        // verify the required parameter 'environment_id' is set
        if ($environment_id === null || (is_array($environment_id) && count($environment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_id when calling postEnvironmentsClearCaches'
            );
        }

        // verify the required parameter 'post_environments_clear_caches_request' is set
        if ($post_environments_clear_caches_request === null || (is_array($post_environments_clear_caches_request) && count($post_environments_clear_caches_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $post_environments_clear_caches_request when calling postEnvironmentsClearCaches'
            );
        }


        $resourcePath = '/environments/{environmentId}/actions/clear-caches';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($environment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'environmentId' . '}',
                ObjectSerializer::toPathValue($environment_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_environments_clear_caches_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_environments_clear_caches_request));
            } else {
                $httpBody = $post_environments_clear_caches_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postEnvironmentsDatabaseBackups
     *
     * Create a backup.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $database_name The database name, typically lower snake case. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsDatabaseBackups'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\ValidationError|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error
     */
    public function postEnvironmentsDatabaseBackups($environment_id, $database_name, string $contentType = self::contentTypes['postEnvironmentsDatabaseBackups'][0])
    {
        list($response) = $this->postEnvironmentsDatabaseBackupsWithHttpInfo($environment_id, $database_name, $contentType);
        return $response;
    }

    /**
     * Operation postEnvironmentsDatabaseBackupsWithHttpInfo
     *
     * Create a backup.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $database_name The database name, typically lower snake case. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsDatabaseBackups'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\ValidationError|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function postEnvironmentsDatabaseBackupsWithHttpInfo($environment_id, $database_name, string $contentType = self::contentTypes['postEnvironmentsDatabaseBackups'][0])
    {
        $request = $this->postEnvironmentsDatabaseBackupsRequest($environment_id, $database_name, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 202:
                    if ('\Acquia\CloudApi\Model\MessageWithLinks' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\MessageWithLinks' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\MessageWithLinks', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Acquia\CloudApi\Model\ValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\ValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\ValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\MessageWithLinks',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\ValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postEnvironmentsDatabaseBackupsAsync
     *
     * Create a backup.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $database_name The database name, typically lower snake case. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsDatabaseBackups'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnvironmentsDatabaseBackupsAsync($environment_id, $database_name, string $contentType = self::contentTypes['postEnvironmentsDatabaseBackups'][0])
    {
        return $this->postEnvironmentsDatabaseBackupsAsyncWithHttpInfo($environment_id, $database_name, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postEnvironmentsDatabaseBackupsAsyncWithHttpInfo
     *
     * Create a backup.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $database_name The database name, typically lower snake case. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsDatabaseBackups'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnvironmentsDatabaseBackupsAsyncWithHttpInfo($environment_id, $database_name, string $contentType = self::contentTypes['postEnvironmentsDatabaseBackups'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
        $request = $this->postEnvironmentsDatabaseBackupsRequest($environment_id, $database_name, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postEnvironmentsDatabaseBackups'
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $database_name The database name, typically lower snake case. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsDatabaseBackups'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postEnvironmentsDatabaseBackupsRequest($environment_id, $database_name, string $contentType = self::contentTypes['postEnvironmentsDatabaseBackups'][0])
    {

        // verify the required parameter 'environment_id' is set
        if ($environment_id === null || (is_array($environment_id) && count($environment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_id when calling postEnvironmentsDatabaseBackups'
            );
        }

        // verify the required parameter 'database_name' is set
        if ($database_name === null || (is_array($database_name) && count($database_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $database_name when calling postEnvironmentsDatabaseBackups'
            );
        }


        $resourcePath = '/environments/{environmentId}/databases/{databaseName}/backups';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($environment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'environmentId' . '}',
                ObjectSerializer::toPathValue($environment_id),
                $resourcePath
            );
        }
        // path params
        if ($database_name !== null) {
            $resourcePath = str_replace(
                '{' . 'databaseName' . '}',
                ObjectSerializer::toPathValue($database_name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postEnvironmentsDatabaseRestoreBackup
     *
     * Restores this backup to the appropriate environment&#39;s database.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $database_name The database name, typically lower snake case. (required)
     * @param  int $backup_id The database backup identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsDatabaseRestoreBackup'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\ValidationError|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error
     */
    public function postEnvironmentsDatabaseRestoreBackup($environment_id, $database_name, $backup_id, string $contentType = self::contentTypes['postEnvironmentsDatabaseRestoreBackup'][0])
    {
        list($response) = $this->postEnvironmentsDatabaseRestoreBackupWithHttpInfo($environment_id, $database_name, $backup_id, $contentType);
        return $response;
    }

    /**
     * Operation postEnvironmentsDatabaseRestoreBackupWithHttpInfo
     *
     * Restores this backup to the appropriate environment&#39;s database.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $database_name The database name, typically lower snake case. (required)
     * @param  int $backup_id The database backup identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsDatabaseRestoreBackup'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\ValidationError|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function postEnvironmentsDatabaseRestoreBackupWithHttpInfo($environment_id, $database_name, $backup_id, string $contentType = self::contentTypes['postEnvironmentsDatabaseRestoreBackup'][0])
    {
        $request = $this->postEnvironmentsDatabaseRestoreBackupRequest($environment_id, $database_name, $backup_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 202:
                    if ('\Acquia\CloudApi\Model\MessageWithLinks' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\MessageWithLinks' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\MessageWithLinks', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Acquia\CloudApi\Model\ValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\ValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\ValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\MessageWithLinks',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\ValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postEnvironmentsDatabaseRestoreBackupAsync
     *
     * Restores this backup to the appropriate environment&#39;s database.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $database_name The database name, typically lower snake case. (required)
     * @param  int $backup_id The database backup identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsDatabaseRestoreBackup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnvironmentsDatabaseRestoreBackupAsync($environment_id, $database_name, $backup_id, string $contentType = self::contentTypes['postEnvironmentsDatabaseRestoreBackup'][0])
    {
        return $this->postEnvironmentsDatabaseRestoreBackupAsyncWithHttpInfo($environment_id, $database_name, $backup_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postEnvironmentsDatabaseRestoreBackupAsyncWithHttpInfo
     *
     * Restores this backup to the appropriate environment&#39;s database.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $database_name The database name, typically lower snake case. (required)
     * @param  int $backup_id The database backup identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsDatabaseRestoreBackup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnvironmentsDatabaseRestoreBackupAsyncWithHttpInfo($environment_id, $database_name, $backup_id, string $contentType = self::contentTypes['postEnvironmentsDatabaseRestoreBackup'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
        $request = $this->postEnvironmentsDatabaseRestoreBackupRequest($environment_id, $database_name, $backup_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postEnvironmentsDatabaseRestoreBackup'
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $database_name The database name, typically lower snake case. (required)
     * @param  int $backup_id The database backup identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsDatabaseRestoreBackup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postEnvironmentsDatabaseRestoreBackupRequest($environment_id, $database_name, $backup_id, string $contentType = self::contentTypes['postEnvironmentsDatabaseRestoreBackup'][0])
    {

        // verify the required parameter 'environment_id' is set
        if ($environment_id === null || (is_array($environment_id) && count($environment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_id when calling postEnvironmentsDatabaseRestoreBackup'
            );
        }

        // verify the required parameter 'database_name' is set
        if ($database_name === null || (is_array($database_name) && count($database_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $database_name when calling postEnvironmentsDatabaseRestoreBackup'
            );
        }

        // verify the required parameter 'backup_id' is set
        if ($backup_id === null || (is_array($backup_id) && count($backup_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $backup_id when calling postEnvironmentsDatabaseRestoreBackup'
            );
        }


        $resourcePath = '/environments/{environmentId}/databases/{databaseName}/backups/{backupId}/actions/restore';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($environment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'environmentId' . '}',
                ObjectSerializer::toPathValue($environment_id),
                $resourcePath
            );
        }
        // path params
        if ($database_name !== null) {
            $resourcePath = str_replace(
                '{' . 'databaseName' . '}',
                ObjectSerializer::toPathValue($database_name),
                $resourcePath
            );
        }
        // path params
        if ($backup_id !== null) {
            $resourcePath = str_replace(
                '{' . 'backupId' . '}',
                ObjectSerializer::toPathValue($backup_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postEnvironmentsDatabases
     *
     * Copies a database to this environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  \Acquia\CloudApi\Model\PostEnvironmentsDatabasesRequest $post_environments_databases_request post_environments_databases_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsDatabases'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\ValidationError|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error
     */
    public function postEnvironmentsDatabases($environment_id, $post_environments_databases_request, string $contentType = self::contentTypes['postEnvironmentsDatabases'][0])
    {
        list($response) = $this->postEnvironmentsDatabasesWithHttpInfo($environment_id, $post_environments_databases_request, $contentType);
        return $response;
    }

    /**
     * Operation postEnvironmentsDatabasesWithHttpInfo
     *
     * Copies a database to this environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  \Acquia\CloudApi\Model\PostEnvironmentsDatabasesRequest $post_environments_databases_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsDatabases'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\ValidationError|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function postEnvironmentsDatabasesWithHttpInfo($environment_id, $post_environments_databases_request, string $contentType = self::contentTypes['postEnvironmentsDatabases'][0])
    {
        $request = $this->postEnvironmentsDatabasesRequest($environment_id, $post_environments_databases_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 202:
                    if ('\Acquia\CloudApi\Model\MessageWithLinks' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\MessageWithLinks' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\MessageWithLinks', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Acquia\CloudApi\Model\ValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\ValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\ValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\MessageWithLinks',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\ValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postEnvironmentsDatabasesAsync
     *
     * Copies a database to this environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  \Acquia\CloudApi\Model\PostEnvironmentsDatabasesRequest $post_environments_databases_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsDatabases'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnvironmentsDatabasesAsync($environment_id, $post_environments_databases_request, string $contentType = self::contentTypes['postEnvironmentsDatabases'][0])
    {
        return $this->postEnvironmentsDatabasesAsyncWithHttpInfo($environment_id, $post_environments_databases_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postEnvironmentsDatabasesAsyncWithHttpInfo
     *
     * Copies a database to this environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  \Acquia\CloudApi\Model\PostEnvironmentsDatabasesRequest $post_environments_databases_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsDatabases'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnvironmentsDatabasesAsyncWithHttpInfo($environment_id, $post_environments_databases_request, string $contentType = self::contentTypes['postEnvironmentsDatabases'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
        $request = $this->postEnvironmentsDatabasesRequest($environment_id, $post_environments_databases_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postEnvironmentsDatabases'
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  \Acquia\CloudApi\Model\PostEnvironmentsDatabasesRequest $post_environments_databases_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsDatabases'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postEnvironmentsDatabasesRequest($environment_id, $post_environments_databases_request, string $contentType = self::contentTypes['postEnvironmentsDatabases'][0])
    {

        // verify the required parameter 'environment_id' is set
        if ($environment_id === null || (is_array($environment_id) && count($environment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_id when calling postEnvironmentsDatabases'
            );
        }

        // verify the required parameter 'post_environments_databases_request' is set
        if ($post_environments_databases_request === null || (is_array($post_environments_databases_request) && count($post_environments_databases_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $post_environments_databases_request when calling postEnvironmentsDatabases'
            );
        }


        $resourcePath = '/environments/{environmentId}/databases';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($environment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'environmentId' . '}',
                ObjectSerializer::toPathValue($environment_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_environments_databases_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_environments_databases_request));
            } else {
                $httpBody = $post_environments_databases_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postEnvironmentsDeployCode
     *
     * Deploys code to this environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  \Acquia\CloudApi\Model\DeployCodeRequest $deploy_code_request deploy_code_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsDeployCode'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\ValidationError|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error
     */
    public function postEnvironmentsDeployCode($environment_id, $deploy_code_request, string $contentType = self::contentTypes['postEnvironmentsDeployCode'][0])
    {
        list($response) = $this->postEnvironmentsDeployCodeWithHttpInfo($environment_id, $deploy_code_request, $contentType);
        return $response;
    }

    /**
     * Operation postEnvironmentsDeployCodeWithHttpInfo
     *
     * Deploys code to this environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  \Acquia\CloudApi\Model\DeployCodeRequest $deploy_code_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsDeployCode'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\ValidationError|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function postEnvironmentsDeployCodeWithHttpInfo($environment_id, $deploy_code_request, string $contentType = self::contentTypes['postEnvironmentsDeployCode'][0])
    {
        $request = $this->postEnvironmentsDeployCodeRequest($environment_id, $deploy_code_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 202:
                    if ('\Acquia\CloudApi\Model\MessageWithLinks' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\MessageWithLinks' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\MessageWithLinks', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Acquia\CloudApi\Model\ValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\ValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\ValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\MessageWithLinks',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\ValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postEnvironmentsDeployCodeAsync
     *
     * Deploys code to this environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  \Acquia\CloudApi\Model\DeployCodeRequest $deploy_code_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsDeployCode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnvironmentsDeployCodeAsync($environment_id, $deploy_code_request, string $contentType = self::contentTypes['postEnvironmentsDeployCode'][0])
    {
        return $this->postEnvironmentsDeployCodeAsyncWithHttpInfo($environment_id, $deploy_code_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postEnvironmentsDeployCodeAsyncWithHttpInfo
     *
     * Deploys code to this environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  \Acquia\CloudApi\Model\DeployCodeRequest $deploy_code_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsDeployCode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnvironmentsDeployCodeAsyncWithHttpInfo($environment_id, $deploy_code_request, string $contentType = self::contentTypes['postEnvironmentsDeployCode'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
        $request = $this->postEnvironmentsDeployCodeRequest($environment_id, $deploy_code_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postEnvironmentsDeployCode'
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  \Acquia\CloudApi\Model\DeployCodeRequest $deploy_code_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsDeployCode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postEnvironmentsDeployCodeRequest($environment_id, $deploy_code_request, string $contentType = self::contentTypes['postEnvironmentsDeployCode'][0])
    {

        // verify the required parameter 'environment_id' is set
        if ($environment_id === null || (is_array($environment_id) && count($environment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_id when calling postEnvironmentsDeployCode'
            );
        }

        // verify the required parameter 'deploy_code_request' is set
        if ($deploy_code_request === null || (is_array($deploy_code_request) && count($deploy_code_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $deploy_code_request when calling postEnvironmentsDeployCode'
            );
        }


        $resourcePath = '/environments/{environmentId}/code';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($environment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'environmentId' . '}',
                ObjectSerializer::toPathValue($environment_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($deploy_code_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($deploy_code_request));
            } else {
                $httpBody = $deploy_code_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postEnvironmentsDisableLiveDev
     *
     * Disable Live Development on this environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  \Acquia\CloudApi\Model\PostEnvironmentsDisableLiveDevRequest $post_environments_disable_live_dev_request post_environments_disable_live_dev_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsDisableLiveDev'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\Message|\Acquia\CloudApi\Model\ValidationError|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error
     */
    public function postEnvironmentsDisableLiveDev($environment_id, $post_environments_disable_live_dev_request, string $contentType = self::contentTypes['postEnvironmentsDisableLiveDev'][0])
    {
        list($response) = $this->postEnvironmentsDisableLiveDevWithHttpInfo($environment_id, $post_environments_disable_live_dev_request, $contentType);
        return $response;
    }

    /**
     * Operation postEnvironmentsDisableLiveDevWithHttpInfo
     *
     * Disable Live Development on this environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  \Acquia\CloudApi\Model\PostEnvironmentsDisableLiveDevRequest $post_environments_disable_live_dev_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsDisableLiveDev'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\Message|\Acquia\CloudApi\Model\ValidationError|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function postEnvironmentsDisableLiveDevWithHttpInfo($environment_id, $post_environments_disable_live_dev_request, string $contentType = self::contentTypes['postEnvironmentsDisableLiveDev'][0])
    {
        $request = $this->postEnvironmentsDisableLiveDevRequest($environment_id, $post_environments_disable_live_dev_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 202:
                    if ('\Acquia\CloudApi\Model\Message' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Message' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Message', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Acquia\CloudApi\Model\ValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\ValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\ValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\Message';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Message',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\ValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postEnvironmentsDisableLiveDevAsync
     *
     * Disable Live Development on this environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  \Acquia\CloudApi\Model\PostEnvironmentsDisableLiveDevRequest $post_environments_disable_live_dev_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsDisableLiveDev'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnvironmentsDisableLiveDevAsync($environment_id, $post_environments_disable_live_dev_request, string $contentType = self::contentTypes['postEnvironmentsDisableLiveDev'][0])
    {
        return $this->postEnvironmentsDisableLiveDevAsyncWithHttpInfo($environment_id, $post_environments_disable_live_dev_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postEnvironmentsDisableLiveDevAsyncWithHttpInfo
     *
     * Disable Live Development on this environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  \Acquia\CloudApi\Model\PostEnvironmentsDisableLiveDevRequest $post_environments_disable_live_dev_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsDisableLiveDev'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnvironmentsDisableLiveDevAsyncWithHttpInfo($environment_id, $post_environments_disable_live_dev_request, string $contentType = self::contentTypes['postEnvironmentsDisableLiveDev'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\Message';
        $request = $this->postEnvironmentsDisableLiveDevRequest($environment_id, $post_environments_disable_live_dev_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postEnvironmentsDisableLiveDev'
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  \Acquia\CloudApi\Model\PostEnvironmentsDisableLiveDevRequest $post_environments_disable_live_dev_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsDisableLiveDev'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postEnvironmentsDisableLiveDevRequest($environment_id, $post_environments_disable_live_dev_request, string $contentType = self::contentTypes['postEnvironmentsDisableLiveDev'][0])
    {

        // verify the required parameter 'environment_id' is set
        if ($environment_id === null || (is_array($environment_id) && count($environment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_id when calling postEnvironmentsDisableLiveDev'
            );
        }

        // verify the required parameter 'post_environments_disable_live_dev_request' is set
        if ($post_environments_disable_live_dev_request === null || (is_array($post_environments_disable_live_dev_request) && count($post_environments_disable_live_dev_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $post_environments_disable_live_dev_request when calling postEnvironmentsDisableLiveDev'
            );
        }


        $resourcePath = '/environments/{environmentId}/livedev/actions/disable';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($environment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'environmentId' . '}',
                ObjectSerializer::toPathValue($environment_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_environments_disable_live_dev_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_environments_disable_live_dev_request));
            } else {
                $httpBody = $post_environments_disable_live_dev_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postEnvironmentsDisableLogForwardingDestination
     *
     * Disables the specified log forwarding destination.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $log_forwarding_destination_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsDisableLogForwardingDestination'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\ValidationError|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error
     */
    public function postEnvironmentsDisableLogForwardingDestination($environment_id, $log_forwarding_destination_uuid, string $contentType = self::contentTypes['postEnvironmentsDisableLogForwardingDestination'][0])
    {
        list($response) = $this->postEnvironmentsDisableLogForwardingDestinationWithHttpInfo($environment_id, $log_forwarding_destination_uuid, $contentType);
        return $response;
    }

    /**
     * Operation postEnvironmentsDisableLogForwardingDestinationWithHttpInfo
     *
     * Disables the specified log forwarding destination.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $log_forwarding_destination_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsDisableLogForwardingDestination'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\ValidationError|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function postEnvironmentsDisableLogForwardingDestinationWithHttpInfo($environment_id, $log_forwarding_destination_uuid, string $contentType = self::contentTypes['postEnvironmentsDisableLogForwardingDestination'][0])
    {
        $request = $this->postEnvironmentsDisableLogForwardingDestinationRequest($environment_id, $log_forwarding_destination_uuid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 202:
                    if ('\Acquia\CloudApi\Model\MessageWithLinks' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\MessageWithLinks' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\MessageWithLinks', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Acquia\CloudApi\Model\ValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\ValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\ValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\MessageWithLinks',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\ValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postEnvironmentsDisableLogForwardingDestinationAsync
     *
     * Disables the specified log forwarding destination.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $log_forwarding_destination_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsDisableLogForwardingDestination'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnvironmentsDisableLogForwardingDestinationAsync($environment_id, $log_forwarding_destination_uuid, string $contentType = self::contentTypes['postEnvironmentsDisableLogForwardingDestination'][0])
    {
        return $this->postEnvironmentsDisableLogForwardingDestinationAsyncWithHttpInfo($environment_id, $log_forwarding_destination_uuid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postEnvironmentsDisableLogForwardingDestinationAsyncWithHttpInfo
     *
     * Disables the specified log forwarding destination.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $log_forwarding_destination_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsDisableLogForwardingDestination'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnvironmentsDisableLogForwardingDestinationAsyncWithHttpInfo($environment_id, $log_forwarding_destination_uuid, string $contentType = self::contentTypes['postEnvironmentsDisableLogForwardingDestination'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
        $request = $this->postEnvironmentsDisableLogForwardingDestinationRequest($environment_id, $log_forwarding_destination_uuid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postEnvironmentsDisableLogForwardingDestination'
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $log_forwarding_destination_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsDisableLogForwardingDestination'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postEnvironmentsDisableLogForwardingDestinationRequest($environment_id, $log_forwarding_destination_uuid, string $contentType = self::contentTypes['postEnvironmentsDisableLogForwardingDestination'][0])
    {

        // verify the required parameter 'environment_id' is set
        if ($environment_id === null || (is_array($environment_id) && count($environment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_id when calling postEnvironmentsDisableLogForwardingDestination'
            );
        }

        // verify the required parameter 'log_forwarding_destination_uuid' is set
        if ($log_forwarding_destination_uuid === null || (is_array($log_forwarding_destination_uuid) && count($log_forwarding_destination_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $log_forwarding_destination_uuid when calling postEnvironmentsDisableLogForwardingDestination'
            );
        }


        $resourcePath = '/environments/{environmentId}/log-forwarding-destinations/{logForwardingDestinationUuid}/actions/disable';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($environment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'environmentId' . '}',
                ObjectSerializer::toPathValue($environment_id),
                $resourcePath
            );
        }
        // path params
        if ($log_forwarding_destination_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'logForwardingDestinationUuid' . '}',
                ObjectSerializer::toPathValue($log_forwarding_destination_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postEnvironmentsDisableProductionMode
     *
     * Disables production mode for an environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsDisableProductionMode'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\Message|\Acquia\CloudApi\Model\ValidationError|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error
     */
    public function postEnvironmentsDisableProductionMode($environment_id, string $contentType = self::contentTypes['postEnvironmentsDisableProductionMode'][0])
    {
        list($response) = $this->postEnvironmentsDisableProductionModeWithHttpInfo($environment_id, $contentType);
        return $response;
    }

    /**
     * Operation postEnvironmentsDisableProductionModeWithHttpInfo
     *
     * Disables production mode for an environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsDisableProductionMode'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\Message|\Acquia\CloudApi\Model\ValidationError|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function postEnvironmentsDisableProductionModeWithHttpInfo($environment_id, string $contentType = self::contentTypes['postEnvironmentsDisableProductionMode'][0])
    {
        $request = $this->postEnvironmentsDisableProductionModeRequest($environment_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 202:
                    if ('\Acquia\CloudApi\Model\Message' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Message' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Message', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Acquia\CloudApi\Model\ValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\ValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\ValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\Message';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Message',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\ValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postEnvironmentsDisableProductionModeAsync
     *
     * Disables production mode for an environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsDisableProductionMode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnvironmentsDisableProductionModeAsync($environment_id, string $contentType = self::contentTypes['postEnvironmentsDisableProductionMode'][0])
    {
        return $this->postEnvironmentsDisableProductionModeAsyncWithHttpInfo($environment_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postEnvironmentsDisableProductionModeAsyncWithHttpInfo
     *
     * Disables production mode for an environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsDisableProductionMode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnvironmentsDisableProductionModeAsyncWithHttpInfo($environment_id, string $contentType = self::contentTypes['postEnvironmentsDisableProductionMode'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\Message';
        $request = $this->postEnvironmentsDisableProductionModeRequest($environment_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postEnvironmentsDisableProductionMode'
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsDisableProductionMode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postEnvironmentsDisableProductionModeRequest($environment_id, string $contentType = self::contentTypes['postEnvironmentsDisableProductionMode'][0])
    {

        // verify the required parameter 'environment_id' is set
        if ($environment_id === null || (is_array($environment_id) && count($environment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_id when calling postEnvironmentsDisableProductionMode'
            );
        }


        $resourcePath = '/environments/{environmentId}/production-mode/actions/disable';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($environment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'environmentId' . '}',
                ObjectSerializer::toPathValue($environment_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postEnvironmentsDomainClearCaches
     *
     * Clears the caches for the specified domain.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $domain A domain name. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsDomainClearCaches'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error
     */
    public function postEnvironmentsDomainClearCaches($environment_id, $domain, string $contentType = self::contentTypes['postEnvironmentsDomainClearCaches'][0])
    {
        list($response) = $this->postEnvironmentsDomainClearCachesWithHttpInfo($environment_id, $domain, $contentType);
        return $response;
    }

    /**
     * Operation postEnvironmentsDomainClearCachesWithHttpInfo
     *
     * Clears the caches for the specified domain.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $domain A domain name. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsDomainClearCaches'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function postEnvironmentsDomainClearCachesWithHttpInfo($environment_id, $domain, string $contentType = self::contentTypes['postEnvironmentsDomainClearCaches'][0])
    {
        $request = $this->postEnvironmentsDomainClearCachesRequest($environment_id, $domain, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 202:
                    if ('\Acquia\CloudApi\Model\MessageWithLinks' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\MessageWithLinks' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\MessageWithLinks', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\MessageWithLinks',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postEnvironmentsDomainClearCachesAsync
     *
     * Clears the caches for the specified domain.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $domain A domain name. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsDomainClearCaches'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnvironmentsDomainClearCachesAsync($environment_id, $domain, string $contentType = self::contentTypes['postEnvironmentsDomainClearCaches'][0])
    {
        return $this->postEnvironmentsDomainClearCachesAsyncWithHttpInfo($environment_id, $domain, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postEnvironmentsDomainClearCachesAsyncWithHttpInfo
     *
     * Clears the caches for the specified domain.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $domain A domain name. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsDomainClearCaches'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnvironmentsDomainClearCachesAsyncWithHttpInfo($environment_id, $domain, string $contentType = self::contentTypes['postEnvironmentsDomainClearCaches'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
        $request = $this->postEnvironmentsDomainClearCachesRequest($environment_id, $domain, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postEnvironmentsDomainClearCaches'
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $domain A domain name. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsDomainClearCaches'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postEnvironmentsDomainClearCachesRequest($environment_id, $domain, string $contentType = self::contentTypes['postEnvironmentsDomainClearCaches'][0])
    {

        // verify the required parameter 'environment_id' is set
        if ($environment_id === null || (is_array($environment_id) && count($environment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_id when calling postEnvironmentsDomainClearCaches'
            );
        }

        // verify the required parameter 'domain' is set
        if ($domain === null || (is_array($domain) && count($domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $domain when calling postEnvironmentsDomainClearCaches'
            );
        }


        $resourcePath = '/environments/{environmentId}/domains/{domain}/actions/clear-caches';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($environment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'environmentId' . '}',
                ObjectSerializer::toPathValue($environment_id),
                $resourcePath
            );
        }
        // path params
        if ($domain !== null) {
            $resourcePath = str_replace(
                '{' . 'domain' . '}',
                ObjectSerializer::toPathValue($domain),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postEnvironmentsDomainClearVarnish
     *
     * Clears the Varnish cache for the specified domain.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $domain A domain name. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsDomainClearVarnish'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error
     * @deprecated
     */
    public function postEnvironmentsDomainClearVarnish($environment_id, $domain, string $contentType = self::contentTypes['postEnvironmentsDomainClearVarnish'][0])
    {
        list($response) = $this->postEnvironmentsDomainClearVarnishWithHttpInfo($environment_id, $domain, $contentType);
        return $response;
    }

    /**
     * Operation postEnvironmentsDomainClearVarnishWithHttpInfo
     *
     * Clears the Varnish cache for the specified domain.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $domain A domain name. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsDomainClearVarnish'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function postEnvironmentsDomainClearVarnishWithHttpInfo($environment_id, $domain, string $contentType = self::contentTypes['postEnvironmentsDomainClearVarnish'][0])
    {
        $request = $this->postEnvironmentsDomainClearVarnishRequest($environment_id, $domain, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 202:
                    if ('\Acquia\CloudApi\Model\MessageWithLinks' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\MessageWithLinks' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\MessageWithLinks', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\MessageWithLinks',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postEnvironmentsDomainClearVarnishAsync
     *
     * Clears the Varnish cache for the specified domain.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $domain A domain name. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsDomainClearVarnish'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function postEnvironmentsDomainClearVarnishAsync($environment_id, $domain, string $contentType = self::contentTypes['postEnvironmentsDomainClearVarnish'][0])
    {
        return $this->postEnvironmentsDomainClearVarnishAsyncWithHttpInfo($environment_id, $domain, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postEnvironmentsDomainClearVarnishAsyncWithHttpInfo
     *
     * Clears the Varnish cache for the specified domain.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $domain A domain name. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsDomainClearVarnish'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function postEnvironmentsDomainClearVarnishAsyncWithHttpInfo($environment_id, $domain, string $contentType = self::contentTypes['postEnvironmentsDomainClearVarnish'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
        $request = $this->postEnvironmentsDomainClearVarnishRequest($environment_id, $domain, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postEnvironmentsDomainClearVarnish'
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $domain A domain name. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsDomainClearVarnish'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function postEnvironmentsDomainClearVarnishRequest($environment_id, $domain, string $contentType = self::contentTypes['postEnvironmentsDomainClearVarnish'][0])
    {

        // verify the required parameter 'environment_id' is set
        if ($environment_id === null || (is_array($environment_id) && count($environment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_id when calling postEnvironmentsDomainClearVarnish'
            );
        }

        // verify the required parameter 'domain' is set
        if ($domain === null || (is_array($domain) && count($domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $domain when calling postEnvironmentsDomainClearVarnish'
            );
        }


        $resourcePath = '/environments/{environmentId}/domains/{domain}/actions/clear-varnish';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($environment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'environmentId' . '}',
                ObjectSerializer::toPathValue($environment_id),
                $resourcePath
            );
        }
        // path params
        if ($domain !== null) {
            $resourcePath = str_replace(
                '{' . 'domain' . '}',
                ObjectSerializer::toPathValue($domain),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postEnvironmentsDomains
     *
     * Adds a domain to the environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  \Acquia\CloudApi\Model\PostEnvironmentsDomainsRequest $post_environments_domains_request post_environments_domains_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsDomains'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error
     */
    public function postEnvironmentsDomains($environment_id, $post_environments_domains_request, string $contentType = self::contentTypes['postEnvironmentsDomains'][0])
    {
        list($response) = $this->postEnvironmentsDomainsWithHttpInfo($environment_id, $post_environments_domains_request, $contentType);
        return $response;
    }

    /**
     * Operation postEnvironmentsDomainsWithHttpInfo
     *
     * Adds a domain to the environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  \Acquia\CloudApi\Model\PostEnvironmentsDomainsRequest $post_environments_domains_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsDomains'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function postEnvironmentsDomainsWithHttpInfo($environment_id, $post_environments_domains_request, string $contentType = self::contentTypes['postEnvironmentsDomains'][0])
    {
        $request = $this->postEnvironmentsDomainsRequest($environment_id, $post_environments_domains_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 202:
                    if ('\Acquia\CloudApi\Model\MessageWithLinks' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\MessageWithLinks' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\MessageWithLinks', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\MessageWithLinks',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postEnvironmentsDomainsAsync
     *
     * Adds a domain to the environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  \Acquia\CloudApi\Model\PostEnvironmentsDomainsRequest $post_environments_domains_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsDomains'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnvironmentsDomainsAsync($environment_id, $post_environments_domains_request, string $contentType = self::contentTypes['postEnvironmentsDomains'][0])
    {
        return $this->postEnvironmentsDomainsAsyncWithHttpInfo($environment_id, $post_environments_domains_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postEnvironmentsDomainsAsyncWithHttpInfo
     *
     * Adds a domain to the environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  \Acquia\CloudApi\Model\PostEnvironmentsDomainsRequest $post_environments_domains_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsDomains'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnvironmentsDomainsAsyncWithHttpInfo($environment_id, $post_environments_domains_request, string $contentType = self::contentTypes['postEnvironmentsDomains'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
        $request = $this->postEnvironmentsDomainsRequest($environment_id, $post_environments_domains_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postEnvironmentsDomains'
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  \Acquia\CloudApi\Model\PostEnvironmentsDomainsRequest $post_environments_domains_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsDomains'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postEnvironmentsDomainsRequest($environment_id, $post_environments_domains_request, string $contentType = self::contentTypes['postEnvironmentsDomains'][0])
    {

        // verify the required parameter 'environment_id' is set
        if ($environment_id === null || (is_array($environment_id) && count($environment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_id when calling postEnvironmentsDomains'
            );
        }

        // verify the required parameter 'post_environments_domains_request' is set
        if ($post_environments_domains_request === null || (is_array($post_environments_domains_request) && count($post_environments_domains_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $post_environments_domains_request when calling postEnvironmentsDomains'
            );
        }


        $resourcePath = '/environments/{environmentId}/domains';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($environment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'environmentId' . '}',
                ObjectSerializer::toPathValue($environment_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_environments_domains_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_environments_domains_request));
            } else {
                $httpBody = $post_environments_domains_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postEnvironmentsDomainsClearVarnish
     *
     * Clears the Varnish cache for one or more domains attached to this environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  \Acquia\CloudApi\Model\PostEnvironmentsDomainsClearVarnishRequest $post_environments_domains_clear_varnish_request post_environments_domains_clear_varnish_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsDomainsClearVarnish'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error
     * @deprecated
     */
    public function postEnvironmentsDomainsClearVarnish($environment_id, $post_environments_domains_clear_varnish_request, string $contentType = self::contentTypes['postEnvironmentsDomainsClearVarnish'][0])
    {
        list($response) = $this->postEnvironmentsDomainsClearVarnishWithHttpInfo($environment_id, $post_environments_domains_clear_varnish_request, $contentType);
        return $response;
    }

    /**
     * Operation postEnvironmentsDomainsClearVarnishWithHttpInfo
     *
     * Clears the Varnish cache for one or more domains attached to this environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  \Acquia\CloudApi\Model\PostEnvironmentsDomainsClearVarnishRequest $post_environments_domains_clear_varnish_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsDomainsClearVarnish'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function postEnvironmentsDomainsClearVarnishWithHttpInfo($environment_id, $post_environments_domains_clear_varnish_request, string $contentType = self::contentTypes['postEnvironmentsDomainsClearVarnish'][0])
    {
        $request = $this->postEnvironmentsDomainsClearVarnishRequest($environment_id, $post_environments_domains_clear_varnish_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 202:
                    if ('\Acquia\CloudApi\Model\MessageWithLinks' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\MessageWithLinks' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\MessageWithLinks', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\MessageWithLinks',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postEnvironmentsDomainsClearVarnishAsync
     *
     * Clears the Varnish cache for one or more domains attached to this environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  \Acquia\CloudApi\Model\PostEnvironmentsDomainsClearVarnishRequest $post_environments_domains_clear_varnish_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsDomainsClearVarnish'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function postEnvironmentsDomainsClearVarnishAsync($environment_id, $post_environments_domains_clear_varnish_request, string $contentType = self::contentTypes['postEnvironmentsDomainsClearVarnish'][0])
    {
        return $this->postEnvironmentsDomainsClearVarnishAsyncWithHttpInfo($environment_id, $post_environments_domains_clear_varnish_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postEnvironmentsDomainsClearVarnishAsyncWithHttpInfo
     *
     * Clears the Varnish cache for one or more domains attached to this environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  \Acquia\CloudApi\Model\PostEnvironmentsDomainsClearVarnishRequest $post_environments_domains_clear_varnish_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsDomainsClearVarnish'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function postEnvironmentsDomainsClearVarnishAsyncWithHttpInfo($environment_id, $post_environments_domains_clear_varnish_request, string $contentType = self::contentTypes['postEnvironmentsDomainsClearVarnish'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
        $request = $this->postEnvironmentsDomainsClearVarnishRequest($environment_id, $post_environments_domains_clear_varnish_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postEnvironmentsDomainsClearVarnish'
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  \Acquia\CloudApi\Model\PostEnvironmentsDomainsClearVarnishRequest $post_environments_domains_clear_varnish_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsDomainsClearVarnish'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function postEnvironmentsDomainsClearVarnishRequest($environment_id, $post_environments_domains_clear_varnish_request, string $contentType = self::contentTypes['postEnvironmentsDomainsClearVarnish'][0])
    {

        // verify the required parameter 'environment_id' is set
        if ($environment_id === null || (is_array($environment_id) && count($environment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_id when calling postEnvironmentsDomainsClearVarnish'
            );
        }

        // verify the required parameter 'post_environments_domains_clear_varnish_request' is set
        if ($post_environments_domains_clear_varnish_request === null || (is_array($post_environments_domains_clear_varnish_request) && count($post_environments_domains_clear_varnish_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $post_environments_domains_clear_varnish_request when calling postEnvironmentsDomainsClearVarnish'
            );
        }


        $resourcePath = '/environments/{environmentId}/domains/actions/clear-varnish';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($environment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'environmentId' . '}',
                ObjectSerializer::toPathValue($environment_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_environments_domains_clear_varnish_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_environments_domains_clear_varnish_request));
            } else {
                $httpBody = $post_environments_domains_clear_varnish_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postEnvironmentsEnableLiveDev
     *
     * Enable Live Development on this environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsEnableLiveDev'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\Message|\Acquia\CloudApi\Model\ValidationError|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error
     */
    public function postEnvironmentsEnableLiveDev($environment_id, string $contentType = self::contentTypes['postEnvironmentsEnableLiveDev'][0])
    {
        list($response) = $this->postEnvironmentsEnableLiveDevWithHttpInfo($environment_id, $contentType);
        return $response;
    }

    /**
     * Operation postEnvironmentsEnableLiveDevWithHttpInfo
     *
     * Enable Live Development on this environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsEnableLiveDev'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\Message|\Acquia\CloudApi\Model\ValidationError|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function postEnvironmentsEnableLiveDevWithHttpInfo($environment_id, string $contentType = self::contentTypes['postEnvironmentsEnableLiveDev'][0])
    {
        $request = $this->postEnvironmentsEnableLiveDevRequest($environment_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 202:
                    if ('\Acquia\CloudApi\Model\Message' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Message' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Message', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Acquia\CloudApi\Model\ValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\ValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\ValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\Message';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Message',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\ValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postEnvironmentsEnableLiveDevAsync
     *
     * Enable Live Development on this environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsEnableLiveDev'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnvironmentsEnableLiveDevAsync($environment_id, string $contentType = self::contentTypes['postEnvironmentsEnableLiveDev'][0])
    {
        return $this->postEnvironmentsEnableLiveDevAsyncWithHttpInfo($environment_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postEnvironmentsEnableLiveDevAsyncWithHttpInfo
     *
     * Enable Live Development on this environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsEnableLiveDev'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnvironmentsEnableLiveDevAsyncWithHttpInfo($environment_id, string $contentType = self::contentTypes['postEnvironmentsEnableLiveDev'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\Message';
        $request = $this->postEnvironmentsEnableLiveDevRequest($environment_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postEnvironmentsEnableLiveDev'
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsEnableLiveDev'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postEnvironmentsEnableLiveDevRequest($environment_id, string $contentType = self::contentTypes['postEnvironmentsEnableLiveDev'][0])
    {

        // verify the required parameter 'environment_id' is set
        if ($environment_id === null || (is_array($environment_id) && count($environment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_id when calling postEnvironmentsEnableLiveDev'
            );
        }


        $resourcePath = '/environments/{environmentId}/livedev/actions/enable';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($environment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'environmentId' . '}',
                ObjectSerializer::toPathValue($environment_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postEnvironmentsEnableLogForwardingDestination
     *
     * Enables the specified log forwarding destination.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $log_forwarding_destination_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsEnableLogForwardingDestination'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\ValidationError|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error
     */
    public function postEnvironmentsEnableLogForwardingDestination($environment_id, $log_forwarding_destination_uuid, string $contentType = self::contentTypes['postEnvironmentsEnableLogForwardingDestination'][0])
    {
        list($response) = $this->postEnvironmentsEnableLogForwardingDestinationWithHttpInfo($environment_id, $log_forwarding_destination_uuid, $contentType);
        return $response;
    }

    /**
     * Operation postEnvironmentsEnableLogForwardingDestinationWithHttpInfo
     *
     * Enables the specified log forwarding destination.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $log_forwarding_destination_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsEnableLogForwardingDestination'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\ValidationError|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function postEnvironmentsEnableLogForwardingDestinationWithHttpInfo($environment_id, $log_forwarding_destination_uuid, string $contentType = self::contentTypes['postEnvironmentsEnableLogForwardingDestination'][0])
    {
        $request = $this->postEnvironmentsEnableLogForwardingDestinationRequest($environment_id, $log_forwarding_destination_uuid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 202:
                    if ('\Acquia\CloudApi\Model\MessageWithLinks' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\MessageWithLinks' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\MessageWithLinks', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Acquia\CloudApi\Model\ValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\ValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\ValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\MessageWithLinks',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\ValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postEnvironmentsEnableLogForwardingDestinationAsync
     *
     * Enables the specified log forwarding destination.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $log_forwarding_destination_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsEnableLogForwardingDestination'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnvironmentsEnableLogForwardingDestinationAsync($environment_id, $log_forwarding_destination_uuid, string $contentType = self::contentTypes['postEnvironmentsEnableLogForwardingDestination'][0])
    {
        return $this->postEnvironmentsEnableLogForwardingDestinationAsyncWithHttpInfo($environment_id, $log_forwarding_destination_uuid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postEnvironmentsEnableLogForwardingDestinationAsyncWithHttpInfo
     *
     * Enables the specified log forwarding destination.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $log_forwarding_destination_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsEnableLogForwardingDestination'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnvironmentsEnableLogForwardingDestinationAsyncWithHttpInfo($environment_id, $log_forwarding_destination_uuid, string $contentType = self::contentTypes['postEnvironmentsEnableLogForwardingDestination'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
        $request = $this->postEnvironmentsEnableLogForwardingDestinationRequest($environment_id, $log_forwarding_destination_uuid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postEnvironmentsEnableLogForwardingDestination'
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $log_forwarding_destination_uuid The entity&#39;s universally unique identifier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsEnableLogForwardingDestination'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postEnvironmentsEnableLogForwardingDestinationRequest($environment_id, $log_forwarding_destination_uuid, string $contentType = self::contentTypes['postEnvironmentsEnableLogForwardingDestination'][0])
    {

        // verify the required parameter 'environment_id' is set
        if ($environment_id === null || (is_array($environment_id) && count($environment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_id when calling postEnvironmentsEnableLogForwardingDestination'
            );
        }

        // verify the required parameter 'log_forwarding_destination_uuid' is set
        if ($log_forwarding_destination_uuid === null || (is_array($log_forwarding_destination_uuid) && count($log_forwarding_destination_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $log_forwarding_destination_uuid when calling postEnvironmentsEnableLogForwardingDestination'
            );
        }


        $resourcePath = '/environments/{environmentId}/log-forwarding-destinations/{logForwardingDestinationUuid}/actions/enable';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($environment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'environmentId' . '}',
                ObjectSerializer::toPathValue($environment_id),
                $resourcePath
            );
        }
        // path params
        if ($log_forwarding_destination_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'logForwardingDestinationUuid' . '}',
                ObjectSerializer::toPathValue($log_forwarding_destination_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postEnvironmentsEnableProductionMode
     *
     * Enables production mode for an environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsEnableProductionMode'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\Message|\Acquia\CloudApi\Model\ValidationError|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error
     */
    public function postEnvironmentsEnableProductionMode($environment_id, string $contentType = self::contentTypes['postEnvironmentsEnableProductionMode'][0])
    {
        list($response) = $this->postEnvironmentsEnableProductionModeWithHttpInfo($environment_id, $contentType);
        return $response;
    }

    /**
     * Operation postEnvironmentsEnableProductionModeWithHttpInfo
     *
     * Enables production mode for an environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsEnableProductionMode'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\Message|\Acquia\CloudApi\Model\ValidationError|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function postEnvironmentsEnableProductionModeWithHttpInfo($environment_id, string $contentType = self::contentTypes['postEnvironmentsEnableProductionMode'][0])
    {
        $request = $this->postEnvironmentsEnableProductionModeRequest($environment_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 202:
                    if ('\Acquia\CloudApi\Model\Message' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Message' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Message', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Acquia\CloudApi\Model\ValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\ValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\ValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\Message';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Message',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\ValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postEnvironmentsEnableProductionModeAsync
     *
     * Enables production mode for an environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsEnableProductionMode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnvironmentsEnableProductionModeAsync($environment_id, string $contentType = self::contentTypes['postEnvironmentsEnableProductionMode'][0])
    {
        return $this->postEnvironmentsEnableProductionModeAsyncWithHttpInfo($environment_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postEnvironmentsEnableProductionModeAsyncWithHttpInfo
     *
     * Enables production mode for an environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsEnableProductionMode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnvironmentsEnableProductionModeAsyncWithHttpInfo($environment_id, string $contentType = self::contentTypes['postEnvironmentsEnableProductionMode'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\Message';
        $request = $this->postEnvironmentsEnableProductionModeRequest($environment_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postEnvironmentsEnableProductionMode'
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsEnableProductionMode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postEnvironmentsEnableProductionModeRequest($environment_id, string $contentType = self::contentTypes['postEnvironmentsEnableProductionMode'][0])
    {

        // verify the required parameter 'environment_id' is set
        if ($environment_id === null || (is_array($environment_id) && count($environment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_id when calling postEnvironmentsEnableProductionMode'
            );
        }


        $resourcePath = '/environments/{environmentId}/production-mode/actions/enable';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($environment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'environmentId' . '}',
                ObjectSerializer::toPathValue($environment_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postEnvironmentsFiles
     *
     * Copies files to this environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  \Acquia\CloudApi\Model\PostEnvironmentsFilesRequest $post_environments_files_request post_environments_files_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsFiles'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\ValidationError|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error
     */
    public function postEnvironmentsFiles($environment_id, $post_environments_files_request, string $contentType = self::contentTypes['postEnvironmentsFiles'][0])
    {
        list($response) = $this->postEnvironmentsFilesWithHttpInfo($environment_id, $post_environments_files_request, $contentType);
        return $response;
    }

    /**
     * Operation postEnvironmentsFilesWithHttpInfo
     *
     * Copies files to this environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  \Acquia\CloudApi\Model\PostEnvironmentsFilesRequest $post_environments_files_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsFiles'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\ValidationError|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function postEnvironmentsFilesWithHttpInfo($environment_id, $post_environments_files_request, string $contentType = self::contentTypes['postEnvironmentsFiles'][0])
    {
        $request = $this->postEnvironmentsFilesRequest($environment_id, $post_environments_files_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 202:
                    if ('\Acquia\CloudApi\Model\MessageWithLinks' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\MessageWithLinks' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\MessageWithLinks', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Acquia\CloudApi\Model\ValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\ValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\ValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\MessageWithLinks',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\ValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postEnvironmentsFilesAsync
     *
     * Copies files to this environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  \Acquia\CloudApi\Model\PostEnvironmentsFilesRequest $post_environments_files_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsFiles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnvironmentsFilesAsync($environment_id, $post_environments_files_request, string $contentType = self::contentTypes['postEnvironmentsFiles'][0])
    {
        return $this->postEnvironmentsFilesAsyncWithHttpInfo($environment_id, $post_environments_files_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postEnvironmentsFilesAsyncWithHttpInfo
     *
     * Copies files to this environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  \Acquia\CloudApi\Model\PostEnvironmentsFilesRequest $post_environments_files_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsFiles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnvironmentsFilesAsyncWithHttpInfo($environment_id, $post_environments_files_request, string $contentType = self::contentTypes['postEnvironmentsFiles'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
        $request = $this->postEnvironmentsFilesRequest($environment_id, $post_environments_files_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postEnvironmentsFiles'
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  \Acquia\CloudApi\Model\PostEnvironmentsFilesRequest $post_environments_files_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsFiles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postEnvironmentsFilesRequest($environment_id, $post_environments_files_request, string $contentType = self::contentTypes['postEnvironmentsFiles'][0])
    {

        // verify the required parameter 'environment_id' is set
        if ($environment_id === null || (is_array($environment_id) && count($environment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_id when calling postEnvironmentsFiles'
            );
        }

        // verify the required parameter 'post_environments_files_request' is set
        if ($post_environments_files_request === null || (is_array($post_environments_files_request) && count($post_environments_files_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $post_environments_files_request when calling postEnvironmentsFiles'
            );
        }


        $resourcePath = '/environments/{environmentId}/files';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($environment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'environmentId' . '}',
                ObjectSerializer::toPathValue($environment_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_environments_files_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_environments_files_request));
            } else {
                $httpBody = $post_environments_files_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postEnvironmentsImportSite
     *
     * Imports a site to this environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  \Acquia\CloudApi\Model\ImportSiteRequest $import_site_request import_site_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsImportSite'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\ValidationError|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error
     */
    public function postEnvironmentsImportSite($environment_id, $import_site_request, string $contentType = self::contentTypes['postEnvironmentsImportSite'][0])
    {
        list($response) = $this->postEnvironmentsImportSiteWithHttpInfo($environment_id, $import_site_request, $contentType);
        return $response;
    }

    /**
     * Operation postEnvironmentsImportSiteWithHttpInfo
     *
     * Imports a site to this environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  \Acquia\CloudApi\Model\ImportSiteRequest $import_site_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsImportSite'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\ValidationError|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function postEnvironmentsImportSiteWithHttpInfo($environment_id, $import_site_request, string $contentType = self::contentTypes['postEnvironmentsImportSite'][0])
    {
        $request = $this->postEnvironmentsImportSiteRequest($environment_id, $import_site_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 202:
                    if ('\Acquia\CloudApi\Model\MessageWithLinks' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\MessageWithLinks' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\MessageWithLinks', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Acquia\CloudApi\Model\ValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\ValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\ValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\MessageWithLinks',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\ValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postEnvironmentsImportSiteAsync
     *
     * Imports a site to this environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  \Acquia\CloudApi\Model\ImportSiteRequest $import_site_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsImportSite'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnvironmentsImportSiteAsync($environment_id, $import_site_request, string $contentType = self::contentTypes['postEnvironmentsImportSite'][0])
    {
        return $this->postEnvironmentsImportSiteAsyncWithHttpInfo($environment_id, $import_site_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postEnvironmentsImportSiteAsyncWithHttpInfo
     *
     * Imports a site to this environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  \Acquia\CloudApi\Model\ImportSiteRequest $import_site_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsImportSite'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnvironmentsImportSiteAsyncWithHttpInfo($environment_id, $import_site_request, string $contentType = self::contentTypes['postEnvironmentsImportSite'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
        $request = $this->postEnvironmentsImportSiteRequest($environment_id, $import_site_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postEnvironmentsImportSite'
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  \Acquia\CloudApi\Model\ImportSiteRequest $import_site_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsImportSite'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postEnvironmentsImportSiteRequest($environment_id, $import_site_request, string $contentType = self::contentTypes['postEnvironmentsImportSite'][0])
    {

        // verify the required parameter 'environment_id' is set
        if ($environment_id === null || (is_array($environment_id) && count($environment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_id when calling postEnvironmentsImportSite'
            );
        }

        // verify the required parameter 'import_site_request' is set
        if ($import_site_request === null || (is_array($import_site_request) && count($import_site_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $import_site_request when calling postEnvironmentsImportSite'
            );
        }


        $resourcePath = '/environments/{environmentId}/code/actions/import';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($environment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'environmentId' . '}',
                ObjectSerializer::toPathValue($environment_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($import_site_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($import_site_request));
            } else {
                $httpBody = $import_site_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postEnvironmentsLog
     *
     * Creates a log file snapshot.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $log_type An ID that uniquely identifies a log type. (required)
     * @param  \Acquia\CloudApi\Model\PostEnvironmentsLogRequest $post_environments_log_request post_environments_log_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsLog'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\ValidationError|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error
     */
    public function postEnvironmentsLog($environment_id, $log_type, $post_environments_log_request = null, string $contentType = self::contentTypes['postEnvironmentsLog'][0])
    {
        list($response) = $this->postEnvironmentsLogWithHttpInfo($environment_id, $log_type, $post_environments_log_request, $contentType);
        return $response;
    }

    /**
     * Operation postEnvironmentsLogWithHttpInfo
     *
     * Creates a log file snapshot.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $log_type An ID that uniquely identifies a log type. (required)
     * @param  \Acquia\CloudApi\Model\PostEnvironmentsLogRequest $post_environments_log_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsLog'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\ValidationError|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function postEnvironmentsLogWithHttpInfo($environment_id, $log_type, $post_environments_log_request = null, string $contentType = self::contentTypes['postEnvironmentsLog'][0])
    {
        $request = $this->postEnvironmentsLogRequest($environment_id, $log_type, $post_environments_log_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\Acquia\CloudApi\Model\MessageWithLinks' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\MessageWithLinks' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\MessageWithLinks', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Acquia\CloudApi\Model\ValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\ValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\ValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\MessageWithLinks',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\ValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postEnvironmentsLogAsync
     *
     * Creates a log file snapshot.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $log_type An ID that uniquely identifies a log type. (required)
     * @param  \Acquia\CloudApi\Model\PostEnvironmentsLogRequest $post_environments_log_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsLog'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnvironmentsLogAsync($environment_id, $log_type, $post_environments_log_request = null, string $contentType = self::contentTypes['postEnvironmentsLog'][0])
    {
        return $this->postEnvironmentsLogAsyncWithHttpInfo($environment_id, $log_type, $post_environments_log_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postEnvironmentsLogAsyncWithHttpInfo
     *
     * Creates a log file snapshot.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $log_type An ID that uniquely identifies a log type. (required)
     * @param  \Acquia\CloudApi\Model\PostEnvironmentsLogRequest $post_environments_log_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsLog'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnvironmentsLogAsyncWithHttpInfo($environment_id, $log_type, $post_environments_log_request = null, string $contentType = self::contentTypes['postEnvironmentsLog'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
        $request = $this->postEnvironmentsLogRequest($environment_id, $log_type, $post_environments_log_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postEnvironmentsLog'
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $log_type An ID that uniquely identifies a log type. (required)
     * @param  \Acquia\CloudApi\Model\PostEnvironmentsLogRequest $post_environments_log_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsLog'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postEnvironmentsLogRequest($environment_id, $log_type, $post_environments_log_request = null, string $contentType = self::contentTypes['postEnvironmentsLog'][0])
    {

        // verify the required parameter 'environment_id' is set
        if ($environment_id === null || (is_array($environment_id) && count($environment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_id when calling postEnvironmentsLog'
            );
        }

        // verify the required parameter 'log_type' is set
        if ($log_type === null || (is_array($log_type) && count($log_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $log_type when calling postEnvironmentsLog'
            );
        }



        $resourcePath = '/environments/{environmentId}/logs/{logType}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($environment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'environmentId' . '}',
                ObjectSerializer::toPathValue($environment_id),
                $resourcePath
            );
        }
        // path params
        if ($log_type !== null) {
            $resourcePath = str_replace(
                '{' . 'logType' . '}',
                ObjectSerializer::toPathValue($log_type),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/hal+json', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_environments_log_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_environments_log_request));
            } else {
                $httpBody = $post_environments_log_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postEnvironmentsLogForwardingDestinations
     *
     * Creates a log forwarding destination.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  \Acquia\CloudApi\Model\PostEnvironmentsLogForwardingDestinationsRequest $post_environments_log_forwarding_destinations_request post_environments_log_forwarding_destinations_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsLogForwardingDestinations'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\ValidationError|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error
     */
    public function postEnvironmentsLogForwardingDestinations($environment_id, $post_environments_log_forwarding_destinations_request, string $contentType = self::contentTypes['postEnvironmentsLogForwardingDestinations'][0])
    {
        list($response) = $this->postEnvironmentsLogForwardingDestinationsWithHttpInfo($environment_id, $post_environments_log_forwarding_destinations_request, $contentType);
        return $response;
    }

    /**
     * Operation postEnvironmentsLogForwardingDestinationsWithHttpInfo
     *
     * Creates a log forwarding destination.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  \Acquia\CloudApi\Model\PostEnvironmentsLogForwardingDestinationsRequest $post_environments_log_forwarding_destinations_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsLogForwardingDestinations'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\ValidationError|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function postEnvironmentsLogForwardingDestinationsWithHttpInfo($environment_id, $post_environments_log_forwarding_destinations_request, string $contentType = self::contentTypes['postEnvironmentsLogForwardingDestinations'][0])
    {
        $request = $this->postEnvironmentsLogForwardingDestinationsRequest($environment_id, $post_environments_log_forwarding_destinations_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 202:
                    if ('\Acquia\CloudApi\Model\MessageWithLinks' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\MessageWithLinks' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\MessageWithLinks', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Acquia\CloudApi\Model\ValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\ValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\ValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\MessageWithLinks',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\ValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postEnvironmentsLogForwardingDestinationsAsync
     *
     * Creates a log forwarding destination.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  \Acquia\CloudApi\Model\PostEnvironmentsLogForwardingDestinationsRequest $post_environments_log_forwarding_destinations_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsLogForwardingDestinations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnvironmentsLogForwardingDestinationsAsync($environment_id, $post_environments_log_forwarding_destinations_request, string $contentType = self::contentTypes['postEnvironmentsLogForwardingDestinations'][0])
    {
        return $this->postEnvironmentsLogForwardingDestinationsAsyncWithHttpInfo($environment_id, $post_environments_log_forwarding_destinations_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postEnvironmentsLogForwardingDestinationsAsyncWithHttpInfo
     *
     * Creates a log forwarding destination.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  \Acquia\CloudApi\Model\PostEnvironmentsLogForwardingDestinationsRequest $post_environments_log_forwarding_destinations_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsLogForwardingDestinations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnvironmentsLogForwardingDestinationsAsyncWithHttpInfo($environment_id, $post_environments_log_forwarding_destinations_request, string $contentType = self::contentTypes['postEnvironmentsLogForwardingDestinations'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
        $request = $this->postEnvironmentsLogForwardingDestinationsRequest($environment_id, $post_environments_log_forwarding_destinations_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postEnvironmentsLogForwardingDestinations'
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  \Acquia\CloudApi\Model\PostEnvironmentsLogForwardingDestinationsRequest $post_environments_log_forwarding_destinations_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsLogForwardingDestinations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postEnvironmentsLogForwardingDestinationsRequest($environment_id, $post_environments_log_forwarding_destinations_request, string $contentType = self::contentTypes['postEnvironmentsLogForwardingDestinations'][0])
    {

        // verify the required parameter 'environment_id' is set
        if ($environment_id === null || (is_array($environment_id) && count($environment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_id when calling postEnvironmentsLogForwardingDestinations'
            );
        }

        // verify the required parameter 'post_environments_log_forwarding_destinations_request' is set
        if ($post_environments_log_forwarding_destinations_request === null || (is_array($post_environments_log_forwarding_destinations_request) && count($post_environments_log_forwarding_destinations_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $post_environments_log_forwarding_destinations_request when calling postEnvironmentsLogForwardingDestinations'
            );
        }


        $resourcePath = '/environments/{environmentId}/log-forwarding-destinations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($environment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'environmentId' . '}',
                ObjectSerializer::toPathValue($environment_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_environments_log_forwarding_destinations_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_environments_log_forwarding_destinations_request));
            } else {
                $httpBody = $post_environments_log_forwarding_destinations_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postEnvironmentsServerReboot
     *
     * Reboots a server.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $server_id The internal database identifier of the server. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsServerReboot'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\Message|\Acquia\CloudApi\Model\ValidationError|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error
     */
    public function postEnvironmentsServerReboot($environment_id, $server_id, string $contentType = self::contentTypes['postEnvironmentsServerReboot'][0])
    {
        list($response) = $this->postEnvironmentsServerRebootWithHttpInfo($environment_id, $server_id, $contentType);
        return $response;
    }

    /**
     * Operation postEnvironmentsServerRebootWithHttpInfo
     *
     * Reboots a server.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $server_id The internal database identifier of the server. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsServerReboot'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\Message|\Acquia\CloudApi\Model\ValidationError|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function postEnvironmentsServerRebootWithHttpInfo($environment_id, $server_id, string $contentType = self::contentTypes['postEnvironmentsServerReboot'][0])
    {
        $request = $this->postEnvironmentsServerRebootRequest($environment_id, $server_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 202:
                    if ('\Acquia\CloudApi\Model\Message' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Message' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Message', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Acquia\CloudApi\Model\ValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\ValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\ValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\Message';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Message',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\ValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postEnvironmentsServerRebootAsync
     *
     * Reboots a server.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $server_id The internal database identifier of the server. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsServerReboot'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnvironmentsServerRebootAsync($environment_id, $server_id, string $contentType = self::contentTypes['postEnvironmentsServerReboot'][0])
    {
        return $this->postEnvironmentsServerRebootAsyncWithHttpInfo($environment_id, $server_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postEnvironmentsServerRebootAsyncWithHttpInfo
     *
     * Reboots a server.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $server_id The internal database identifier of the server. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsServerReboot'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnvironmentsServerRebootAsyncWithHttpInfo($environment_id, $server_id, string $contentType = self::contentTypes['postEnvironmentsServerReboot'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\Message';
        $request = $this->postEnvironmentsServerRebootRequest($environment_id, $server_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postEnvironmentsServerReboot'
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $server_id The internal database identifier of the server. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsServerReboot'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postEnvironmentsServerRebootRequest($environment_id, $server_id, string $contentType = self::contentTypes['postEnvironmentsServerReboot'][0])
    {

        // verify the required parameter 'environment_id' is set
        if ($environment_id === null || (is_array($environment_id) && count($environment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_id when calling postEnvironmentsServerReboot'
            );
        }

        // verify the required parameter 'server_id' is set
        if ($server_id === null || (is_array($server_id) && count($server_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $server_id when calling postEnvironmentsServerReboot'
            );
        }


        $resourcePath = '/environments/{environmentId}/servers/{serverId}/actions/reboot';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($environment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'environmentId' . '}',
                ObjectSerializer::toPathValue($environment_id),
                $resourcePath
            );
        }
        // path params
        if ($server_id !== null) {
            $resourcePath = str_replace(
                '{' . 'serverId' . '}',
                ObjectSerializer::toPathValue($server_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postEnvironmentsServerRelaunch
     *
     * Relaunches a server.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $server_id The internal database identifier of the server. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsServerRelaunch'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\Message|\Acquia\CloudApi\Model\ValidationError|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error
     */
    public function postEnvironmentsServerRelaunch($environment_id, $server_id, string $contentType = self::contentTypes['postEnvironmentsServerRelaunch'][0])
    {
        list($response) = $this->postEnvironmentsServerRelaunchWithHttpInfo($environment_id, $server_id, $contentType);
        return $response;
    }

    /**
     * Operation postEnvironmentsServerRelaunchWithHttpInfo
     *
     * Relaunches a server.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $server_id The internal database identifier of the server. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsServerRelaunch'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\Message|\Acquia\CloudApi\Model\ValidationError|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function postEnvironmentsServerRelaunchWithHttpInfo($environment_id, $server_id, string $contentType = self::contentTypes['postEnvironmentsServerRelaunch'][0])
    {
        $request = $this->postEnvironmentsServerRelaunchRequest($environment_id, $server_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 202:
                    if ('\Acquia\CloudApi\Model\Message' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Message' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Message', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Acquia\CloudApi\Model\ValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\ValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\ValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\Message';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Message',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\ValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postEnvironmentsServerRelaunchAsync
     *
     * Relaunches a server.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $server_id The internal database identifier of the server. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsServerRelaunch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnvironmentsServerRelaunchAsync($environment_id, $server_id, string $contentType = self::contentTypes['postEnvironmentsServerRelaunch'][0])
    {
        return $this->postEnvironmentsServerRelaunchAsyncWithHttpInfo($environment_id, $server_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postEnvironmentsServerRelaunchAsyncWithHttpInfo
     *
     * Relaunches a server.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $server_id The internal database identifier of the server. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsServerRelaunch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnvironmentsServerRelaunchAsyncWithHttpInfo($environment_id, $server_id, string $contentType = self::contentTypes['postEnvironmentsServerRelaunch'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\Message';
        $request = $this->postEnvironmentsServerRelaunchRequest($environment_id, $server_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postEnvironmentsServerRelaunch'
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $server_id The internal database identifier of the server. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsServerRelaunch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postEnvironmentsServerRelaunchRequest($environment_id, $server_id, string $contentType = self::contentTypes['postEnvironmentsServerRelaunch'][0])
    {

        // verify the required parameter 'environment_id' is set
        if ($environment_id === null || (is_array($environment_id) && count($environment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_id when calling postEnvironmentsServerRelaunch'
            );
        }

        // verify the required parameter 'server_id' is set
        if ($server_id === null || (is_array($server_id) && count($server_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $server_id when calling postEnvironmentsServerRelaunch'
            );
        }


        $resourcePath = '/environments/{environmentId}/servers/{serverId}/actions/relaunch';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($environment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'environmentId' . '}',
                ObjectSerializer::toPathValue($environment_id),
                $resourcePath
            );
        }
        // path params
        if ($server_id !== null) {
            $resourcePath = str_replace(
                '{' . 'serverId' . '}',
                ObjectSerializer::toPathValue($server_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postEnvironmentsServerSuspend
     *
     * Suspends a server.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $server_id The internal database identifier of the server. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsServerSuspend'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\Message|\Acquia\CloudApi\Model\ValidationError|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error
     */
    public function postEnvironmentsServerSuspend($environment_id, $server_id, string $contentType = self::contentTypes['postEnvironmentsServerSuspend'][0])
    {
        list($response) = $this->postEnvironmentsServerSuspendWithHttpInfo($environment_id, $server_id, $contentType);
        return $response;
    }

    /**
     * Operation postEnvironmentsServerSuspendWithHttpInfo
     *
     * Suspends a server.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $server_id The internal database identifier of the server. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsServerSuspend'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\Message|\Acquia\CloudApi\Model\ValidationError|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function postEnvironmentsServerSuspendWithHttpInfo($environment_id, $server_id, string $contentType = self::contentTypes['postEnvironmentsServerSuspend'][0])
    {
        $request = $this->postEnvironmentsServerSuspendRequest($environment_id, $server_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 202:
                    if ('\Acquia\CloudApi\Model\Message' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Message' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Message', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Acquia\CloudApi\Model\ValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\ValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\ValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\Message';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Message',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\ValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postEnvironmentsServerSuspendAsync
     *
     * Suspends a server.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $server_id The internal database identifier of the server. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsServerSuspend'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnvironmentsServerSuspendAsync($environment_id, $server_id, string $contentType = self::contentTypes['postEnvironmentsServerSuspend'][0])
    {
        return $this->postEnvironmentsServerSuspendAsyncWithHttpInfo($environment_id, $server_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postEnvironmentsServerSuspendAsyncWithHttpInfo
     *
     * Suspends a server.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $server_id The internal database identifier of the server. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsServerSuspend'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnvironmentsServerSuspendAsyncWithHttpInfo($environment_id, $server_id, string $contentType = self::contentTypes['postEnvironmentsServerSuspend'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\Message';
        $request = $this->postEnvironmentsServerSuspendRequest($environment_id, $server_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postEnvironmentsServerSuspend'
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $server_id The internal database identifier of the server. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsServerSuspend'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postEnvironmentsServerSuspendRequest($environment_id, $server_id, string $contentType = self::contentTypes['postEnvironmentsServerSuspend'][0])
    {

        // verify the required parameter 'environment_id' is set
        if ($environment_id === null || (is_array($environment_id) && count($environment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_id when calling postEnvironmentsServerSuspend'
            );
        }

        // verify the required parameter 'server_id' is set
        if ($server_id === null || (is_array($server_id) && count($server_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $server_id when calling postEnvironmentsServerSuspend'
            );
        }


        $resourcePath = '/environments/{environmentId}/servers/{serverId}/actions/suspend';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($environment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'environmentId' . '}',
                ObjectSerializer::toPathValue($environment_id),
                $resourcePath
            );
        }
        // path params
        if ($server_id !== null) {
            $resourcePath = str_replace(
                '{' . 'serverId' . '}',
                ObjectSerializer::toPathValue($server_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postEnvironmentsServerUpgrade
     *
     * Upgrades a server from \&quot;precise\&quot; to \&quot;xenial\&quot;.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $server_id The internal database identifier of the server. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsServerUpgrade'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\Message|\Acquia\CloudApi\Model\ValidationError|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error
     */
    public function postEnvironmentsServerUpgrade($environment_id, $server_id, string $contentType = self::contentTypes['postEnvironmentsServerUpgrade'][0])
    {
        list($response) = $this->postEnvironmentsServerUpgradeWithHttpInfo($environment_id, $server_id, $contentType);
        return $response;
    }

    /**
     * Operation postEnvironmentsServerUpgradeWithHttpInfo
     *
     * Upgrades a server from \&quot;precise\&quot; to \&quot;xenial\&quot;.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $server_id The internal database identifier of the server. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsServerUpgrade'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\Message|\Acquia\CloudApi\Model\ValidationError|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function postEnvironmentsServerUpgradeWithHttpInfo($environment_id, $server_id, string $contentType = self::contentTypes['postEnvironmentsServerUpgrade'][0])
    {
        $request = $this->postEnvironmentsServerUpgradeRequest($environment_id, $server_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 202:
                    if ('\Acquia\CloudApi\Model\Message' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Message' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Message', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Acquia\CloudApi\Model\ValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\ValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\ValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\Message';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Message',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\ValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postEnvironmentsServerUpgradeAsync
     *
     * Upgrades a server from \&quot;precise\&quot; to \&quot;xenial\&quot;.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $server_id The internal database identifier of the server. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsServerUpgrade'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnvironmentsServerUpgradeAsync($environment_id, $server_id, string $contentType = self::contentTypes['postEnvironmentsServerUpgrade'][0])
    {
        return $this->postEnvironmentsServerUpgradeAsyncWithHttpInfo($environment_id, $server_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postEnvironmentsServerUpgradeAsyncWithHttpInfo
     *
     * Upgrades a server from \&quot;precise\&quot; to \&quot;xenial\&quot;.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $server_id The internal database identifier of the server. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsServerUpgrade'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnvironmentsServerUpgradeAsyncWithHttpInfo($environment_id, $server_id, string $contentType = self::contentTypes['postEnvironmentsServerUpgrade'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\Message';
        $request = $this->postEnvironmentsServerUpgradeRequest($environment_id, $server_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postEnvironmentsServerUpgrade'
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $server_id The internal database identifier of the server. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsServerUpgrade'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postEnvironmentsServerUpgradeRequest($environment_id, $server_id, string $contentType = self::contentTypes['postEnvironmentsServerUpgrade'][0])
    {

        // verify the required parameter 'environment_id' is set
        if ($environment_id === null || (is_array($environment_id) && count($environment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_id when calling postEnvironmentsServerUpgrade'
            );
        }

        // verify the required parameter 'server_id' is set
        if ($server_id === null || (is_array($server_id) && count($server_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $server_id when calling postEnvironmentsServerUpgrade'
            );
        }


        $resourcePath = '/environments/{environmentId}/servers/{serverId}/actions/upgrade';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($environment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'environmentId' . '}',
                ObjectSerializer::toPathValue($environment_id),
                $resourcePath
            );
        }
        // path params
        if ($server_id !== null) {
            $resourcePath = str_replace(
                '{' . 'serverId' . '}',
                ObjectSerializer::toPathValue($server_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postEnvironmentsSwitchCode
     *
     * Switches code on this environment to a different branch or release tag.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  \Acquia\CloudApi\Model\SwitchCodeRequest $switch_code_request switch_code_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsSwitchCode'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\ValidationError|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error
     */
    public function postEnvironmentsSwitchCode($environment_id, $switch_code_request, string $contentType = self::contentTypes['postEnvironmentsSwitchCode'][0])
    {
        list($response) = $this->postEnvironmentsSwitchCodeWithHttpInfo($environment_id, $switch_code_request, $contentType);
        return $response;
    }

    /**
     * Operation postEnvironmentsSwitchCodeWithHttpInfo
     *
     * Switches code on this environment to a different branch or release tag.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  \Acquia\CloudApi\Model\SwitchCodeRequest $switch_code_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsSwitchCode'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\ValidationError|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function postEnvironmentsSwitchCodeWithHttpInfo($environment_id, $switch_code_request, string $contentType = self::contentTypes['postEnvironmentsSwitchCode'][0])
    {
        $request = $this->postEnvironmentsSwitchCodeRequest($environment_id, $switch_code_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 202:
                    if ('\Acquia\CloudApi\Model\MessageWithLinks' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\MessageWithLinks' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\MessageWithLinks', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Acquia\CloudApi\Model\ValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\ValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\ValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\MessageWithLinks',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\ValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postEnvironmentsSwitchCodeAsync
     *
     * Switches code on this environment to a different branch or release tag.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  \Acquia\CloudApi\Model\SwitchCodeRequest $switch_code_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsSwitchCode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnvironmentsSwitchCodeAsync($environment_id, $switch_code_request, string $contentType = self::contentTypes['postEnvironmentsSwitchCode'][0])
    {
        return $this->postEnvironmentsSwitchCodeAsyncWithHttpInfo($environment_id, $switch_code_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postEnvironmentsSwitchCodeAsyncWithHttpInfo
     *
     * Switches code on this environment to a different branch or release tag.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  \Acquia\CloudApi\Model\SwitchCodeRequest $switch_code_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsSwitchCode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnvironmentsSwitchCodeAsyncWithHttpInfo($environment_id, $switch_code_request, string $contentType = self::contentTypes['postEnvironmentsSwitchCode'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
        $request = $this->postEnvironmentsSwitchCodeRequest($environment_id, $switch_code_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postEnvironmentsSwitchCode'
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  \Acquia\CloudApi\Model\SwitchCodeRequest $switch_code_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsSwitchCode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postEnvironmentsSwitchCodeRequest($environment_id, $switch_code_request, string $contentType = self::contentTypes['postEnvironmentsSwitchCode'][0])
    {

        // verify the required parameter 'environment_id' is set
        if ($environment_id === null || (is_array($environment_id) && count($environment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_id when calling postEnvironmentsSwitchCode'
            );
        }

        // verify the required parameter 'switch_code_request' is set
        if ($switch_code_request === null || (is_array($switch_code_request) && count($switch_code_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $switch_code_request when calling postEnvironmentsSwitchCode'
            );
        }


        $resourcePath = '/environments/{environmentId}/code/actions/switch';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($environment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'environmentId' . '}',
                ObjectSerializer::toPathValue($environment_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($switch_code_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($switch_code_request));
            } else {
                $httpBody = $switch_code_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postEnvironmentsVariables
     *
     * Adds a new environment variable to an environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  \Acquia\CloudApi\Model\PostEnvironmentsVariablesRequest $post_environments_variables_request post_environments_variables_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsVariables'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\ValidationError|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error
     */
    public function postEnvironmentsVariables($environment_id, $post_environments_variables_request, string $contentType = self::contentTypes['postEnvironmentsVariables'][0])
    {
        list($response) = $this->postEnvironmentsVariablesWithHttpInfo($environment_id, $post_environments_variables_request, $contentType);
        return $response;
    }

    /**
     * Operation postEnvironmentsVariablesWithHttpInfo
     *
     * Adds a new environment variable to an environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  \Acquia\CloudApi\Model\PostEnvironmentsVariablesRequest $post_environments_variables_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsVariables'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\ValidationError|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function postEnvironmentsVariablesWithHttpInfo($environment_id, $post_environments_variables_request, string $contentType = self::contentTypes['postEnvironmentsVariables'][0])
    {
        $request = $this->postEnvironmentsVariablesRequest($environment_id, $post_environments_variables_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 202:
                    if ('\Acquia\CloudApi\Model\MessageWithLinks' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\MessageWithLinks' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\MessageWithLinks', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Acquia\CloudApi\Model\ValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\ValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\ValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\MessageWithLinks',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\ValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postEnvironmentsVariablesAsync
     *
     * Adds a new environment variable to an environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  \Acquia\CloudApi\Model\PostEnvironmentsVariablesRequest $post_environments_variables_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsVariables'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnvironmentsVariablesAsync($environment_id, $post_environments_variables_request, string $contentType = self::contentTypes['postEnvironmentsVariables'][0])
    {
        return $this->postEnvironmentsVariablesAsyncWithHttpInfo($environment_id, $post_environments_variables_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postEnvironmentsVariablesAsyncWithHttpInfo
     *
     * Adds a new environment variable to an environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  \Acquia\CloudApi\Model\PostEnvironmentsVariablesRequest $post_environments_variables_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsVariables'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnvironmentsVariablesAsyncWithHttpInfo($environment_id, $post_environments_variables_request, string $contentType = self::contentTypes['postEnvironmentsVariables'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
        $request = $this->postEnvironmentsVariablesRequest($environment_id, $post_environments_variables_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postEnvironmentsVariables'
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  \Acquia\CloudApi\Model\PostEnvironmentsVariablesRequest $post_environments_variables_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postEnvironmentsVariables'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postEnvironmentsVariablesRequest($environment_id, $post_environments_variables_request, string $contentType = self::contentTypes['postEnvironmentsVariables'][0])
    {

        // verify the required parameter 'environment_id' is set
        if ($environment_id === null || (is_array($environment_id) && count($environment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_id when calling postEnvironmentsVariables'
            );
        }

        // verify the required parameter 'post_environments_variables_request' is set
        if ($post_environments_variables_request === null || (is_array($post_environments_variables_request) && count($post_environments_variables_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $post_environments_variables_request when calling postEnvironmentsVariables'
            );
        }


        $resourcePath = '/environments/{environmentId}/variables';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($environment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'environmentId' . '}',
                ObjectSerializer::toPathValue($environment_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_environments_variables_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_environments_variables_request));
            } else {
                $httpBody = $post_environments_variables_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postMigrateEnvironment
     *
     * Create a Migrate Environment using the provided environment as its source.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  \Acquia\CloudApi\Model\PostMigrateEnvironmentRequest $post_migrate_environment_request post_migrate_environment_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postMigrateEnvironment'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\ValidationError|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error
     */
    public function postMigrateEnvironment($environment_id, $post_migrate_environment_request, string $contentType = self::contentTypes['postMigrateEnvironment'][0])
    {
        list($response) = $this->postMigrateEnvironmentWithHttpInfo($environment_id, $post_migrate_environment_request, $contentType);
        return $response;
    }

    /**
     * Operation postMigrateEnvironmentWithHttpInfo
     *
     * Create a Migrate Environment using the provided environment as its source.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  \Acquia\CloudApi\Model\PostMigrateEnvironmentRequest $post_migrate_environment_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postMigrateEnvironment'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\ValidationError|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function postMigrateEnvironmentWithHttpInfo($environment_id, $post_migrate_environment_request, string $contentType = self::contentTypes['postMigrateEnvironment'][0])
    {
        $request = $this->postMigrateEnvironmentRequest($environment_id, $post_migrate_environment_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 202:
                    if ('\Acquia\CloudApi\Model\MessageWithLinks' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\MessageWithLinks' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\MessageWithLinks', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Acquia\CloudApi\Model\ValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\ValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\ValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\MessageWithLinks',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\ValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postMigrateEnvironmentAsync
     *
     * Create a Migrate Environment using the provided environment as its source.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  \Acquia\CloudApi\Model\PostMigrateEnvironmentRequest $post_migrate_environment_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postMigrateEnvironment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postMigrateEnvironmentAsync($environment_id, $post_migrate_environment_request, string $contentType = self::contentTypes['postMigrateEnvironment'][0])
    {
        return $this->postMigrateEnvironmentAsyncWithHttpInfo($environment_id, $post_migrate_environment_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postMigrateEnvironmentAsyncWithHttpInfo
     *
     * Create a Migrate Environment using the provided environment as its source.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  \Acquia\CloudApi\Model\PostMigrateEnvironmentRequest $post_migrate_environment_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postMigrateEnvironment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postMigrateEnvironmentAsyncWithHttpInfo($environment_id, $post_migrate_environment_request, string $contentType = self::contentTypes['postMigrateEnvironment'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
        $request = $this->postMigrateEnvironmentRequest($environment_id, $post_migrate_environment_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postMigrateEnvironment'
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  \Acquia\CloudApi\Model\PostMigrateEnvironmentRequest $post_migrate_environment_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postMigrateEnvironment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postMigrateEnvironmentRequest($environment_id, $post_migrate_environment_request, string $contentType = self::contentTypes['postMigrateEnvironment'][0])
    {

        // verify the required parameter 'environment_id' is set
        if ($environment_id === null || (is_array($environment_id) && count($environment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_id when calling postMigrateEnvironment'
            );
        }

        // verify the required parameter 'post_migrate_environment_request' is set
        if ($post_migrate_environment_request === null || (is_array($post_migrate_environment_request) && count($post_migrate_environment_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $post_migrate_environment_request when calling postMigrateEnvironment'
            );
        }


        $resourcePath = '/environments/{environmentId}/actions/migrate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($environment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'environmentId' . '}',
                ObjectSerializer::toPathValue($environment_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_migrate_environment_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_migrate_environment_request));
            } else {
                $httpBody = $post_migrate_environment_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postPromoteEnvironment
     *
     * Promote a Migrate Environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  \Acquia\CloudApi\Model\PostPromoteEnvironmentRequest $post_promote_environment_request post_promote_environment_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postPromoteEnvironment'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\ValidationError|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error
     */
    public function postPromoteEnvironment($environment_id, $post_promote_environment_request, string $contentType = self::contentTypes['postPromoteEnvironment'][0])
    {
        list($response) = $this->postPromoteEnvironmentWithHttpInfo($environment_id, $post_promote_environment_request, $contentType);
        return $response;
    }

    /**
     * Operation postPromoteEnvironmentWithHttpInfo
     *
     * Promote a Migrate Environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  \Acquia\CloudApi\Model\PostPromoteEnvironmentRequest $post_promote_environment_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postPromoteEnvironment'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\ValidationError|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function postPromoteEnvironmentWithHttpInfo($environment_id, $post_promote_environment_request, string $contentType = self::contentTypes['postPromoteEnvironment'][0])
    {
        $request = $this->postPromoteEnvironmentRequest($environment_id, $post_promote_environment_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 202:
                    if ('\Acquia\CloudApi\Model\MessageWithLinks' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\MessageWithLinks' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\MessageWithLinks', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Acquia\CloudApi\Model\ValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\ValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\ValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\MessageWithLinks',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\ValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postPromoteEnvironmentAsync
     *
     * Promote a Migrate Environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  \Acquia\CloudApi\Model\PostPromoteEnvironmentRequest $post_promote_environment_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postPromoteEnvironment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postPromoteEnvironmentAsync($environment_id, $post_promote_environment_request, string $contentType = self::contentTypes['postPromoteEnvironment'][0])
    {
        return $this->postPromoteEnvironmentAsyncWithHttpInfo($environment_id, $post_promote_environment_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postPromoteEnvironmentAsyncWithHttpInfo
     *
     * Promote a Migrate Environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  \Acquia\CloudApi\Model\PostPromoteEnvironmentRequest $post_promote_environment_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postPromoteEnvironment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postPromoteEnvironmentAsyncWithHttpInfo($environment_id, $post_promote_environment_request, string $contentType = self::contentTypes['postPromoteEnvironment'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
        $request = $this->postPromoteEnvironmentRequest($environment_id, $post_promote_environment_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postPromoteEnvironment'
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  \Acquia\CloudApi\Model\PostPromoteEnvironmentRequest $post_promote_environment_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postPromoteEnvironment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postPromoteEnvironmentRequest($environment_id, $post_promote_environment_request, string $contentType = self::contentTypes['postPromoteEnvironment'][0])
    {

        // verify the required parameter 'environment_id' is set
        if ($environment_id === null || (is_array($environment_id) && count($environment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_id when calling postPromoteEnvironment'
            );
        }

        // verify the required parameter 'post_promote_environment_request' is set
        if ($post_promote_environment_request === null || (is_array($post_promote_environment_request) && count($post_promote_environment_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $post_promote_environment_request when calling postPromoteEnvironment'
            );
        }


        $resourcePath = '/environments/{environmentId}/actions/promote';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($environment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'environmentId' . '}',
                ObjectSerializer::toPathValue($environment_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_promote_environment_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_promote_environment_request));
            } else {
                $httpBody = $post_promote_environment_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postRefreshEnvironment
     *
     * Refreshes a Migrate Environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postRefreshEnvironment'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\ValidationError|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error
     */
    public function postRefreshEnvironment($environment_id, string $contentType = self::contentTypes['postRefreshEnvironment'][0])
    {
        list($response) = $this->postRefreshEnvironmentWithHttpInfo($environment_id, $contentType);
        return $response;
    }

    /**
     * Operation postRefreshEnvironmentWithHttpInfo
     *
     * Refreshes a Migrate Environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postRefreshEnvironment'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\ValidationError|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function postRefreshEnvironmentWithHttpInfo($environment_id, string $contentType = self::contentTypes['postRefreshEnvironment'][0])
    {
        $request = $this->postRefreshEnvironmentRequest($environment_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 202:
                    if ('\Acquia\CloudApi\Model\MessageWithLinks' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\MessageWithLinks' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\MessageWithLinks', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Acquia\CloudApi\Model\ValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\ValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\ValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\MessageWithLinks',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\ValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postRefreshEnvironmentAsync
     *
     * Refreshes a Migrate Environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postRefreshEnvironment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postRefreshEnvironmentAsync($environment_id, string $contentType = self::contentTypes['postRefreshEnvironment'][0])
    {
        return $this->postRefreshEnvironmentAsyncWithHttpInfo($environment_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postRefreshEnvironmentAsyncWithHttpInfo
     *
     * Refreshes a Migrate Environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postRefreshEnvironment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postRefreshEnvironmentAsyncWithHttpInfo($environment_id, string $contentType = self::contentTypes['postRefreshEnvironment'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
        $request = $this->postRefreshEnvironmentRequest($environment_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postRefreshEnvironment'
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postRefreshEnvironment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postRefreshEnvironmentRequest($environment_id, string $contentType = self::contentTypes['postRefreshEnvironment'][0])
    {

        // verify the required parameter 'environment_id' is set
        if ($environment_id === null || (is_array($environment_id) && count($environment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_id when calling postRefreshEnvironment'
            );
        }


        $resourcePath = '/environments/{environmentId}/actions/refresh';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($environment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'environmentId' . '}',
                ObjectSerializer::toPathValue($environment_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putCron
     *
     * Modify an existing scheduled job.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $cron_id An ID that uniquely identifies a cron job. (required)
     * @param  \Acquia\CloudApi\Model\PutCron $put_cron put_cron (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putCron'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\ValidationError
     */
    public function putCron($environment_id, $cron_id, $put_cron, string $contentType = self::contentTypes['putCron'][0])
    {
        list($response) = $this->putCronWithHttpInfo($environment_id, $cron_id, $put_cron, $contentType);
        return $response;
    }

    /**
     * Operation putCronWithHttpInfo
     *
     * Modify an existing scheduled job.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $cron_id An ID that uniquely identifies a cron job. (required)
     * @param  \Acquia\CloudApi\Model\PutCron $put_cron (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putCron'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\ValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function putCronWithHttpInfo($environment_id, $cron_id, $put_cron, string $contentType = self::contentTypes['putCron'][0])
    {
        $request = $this->putCronRequest($environment_id, $cron_id, $put_cron, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 202:
                    if ('\Acquia\CloudApi\Model\MessageWithLinks' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\MessageWithLinks' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\MessageWithLinks', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Acquia\CloudApi\Model\ValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\ValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\ValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\MessageWithLinks',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\ValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putCronAsync
     *
     * Modify an existing scheduled job.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $cron_id An ID that uniquely identifies a cron job. (required)
     * @param  \Acquia\CloudApi\Model\PutCron $put_cron (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putCron'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putCronAsync($environment_id, $cron_id, $put_cron, string $contentType = self::contentTypes['putCron'][0])
    {
        return $this->putCronAsyncWithHttpInfo($environment_id, $cron_id, $put_cron, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putCronAsyncWithHttpInfo
     *
     * Modify an existing scheduled job.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $cron_id An ID that uniquely identifies a cron job. (required)
     * @param  \Acquia\CloudApi\Model\PutCron $put_cron (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putCron'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putCronAsyncWithHttpInfo($environment_id, $cron_id, $put_cron, string $contentType = self::contentTypes['putCron'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
        $request = $this->putCronRequest($environment_id, $cron_id, $put_cron, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putCron'
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $cron_id An ID that uniquely identifies a cron job. (required)
     * @param  \Acquia\CloudApi\Model\PutCron $put_cron (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putCron'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function putCronRequest($environment_id, $cron_id, $put_cron, string $contentType = self::contentTypes['putCron'][0])
    {

        // verify the required parameter 'environment_id' is set
        if ($environment_id === null || (is_array($environment_id) && count($environment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_id when calling putCron'
            );
        }

        // verify the required parameter 'cron_id' is set
        if ($cron_id === null || (is_array($cron_id) && count($cron_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cron_id when calling putCron'
            );
        }

        // verify the required parameter 'put_cron' is set
        if ($put_cron === null || (is_array($put_cron) && count($put_cron) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $put_cron when calling putCron'
            );
        }


        $resourcePath = '/environments/{environmentId}/crons/{cronId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($environment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'environmentId' . '}',
                ObjectSerializer::toPathValue($environment_id),
                $resourcePath
            );
        }
        // path params
        if ($cron_id !== null) {
            $resourcePath = str_replace(
                '{' . 'cronId' . '}',
                ObjectSerializer::toPathValue($cron_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($put_cron)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($put_cron));
            } else {
                $httpBody = $put_cron;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putEnvironment
     *
     * Modifies configuration settings for an environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  \Acquia\CloudApi\Model\EnvironmentConfigurations $environment_configurations environment_configurations (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putEnvironment'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\ValidationError|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error
     */
    public function putEnvironment($environment_id, $environment_configurations, string $contentType = self::contentTypes['putEnvironment'][0])
    {
        list($response) = $this->putEnvironmentWithHttpInfo($environment_id, $environment_configurations, $contentType);
        return $response;
    }

    /**
     * Operation putEnvironmentWithHttpInfo
     *
     * Modifies configuration settings for an environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  \Acquia\CloudApi\Model\EnvironmentConfigurations $environment_configurations (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putEnvironment'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\ValidationError|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function putEnvironmentWithHttpInfo($environment_id, $environment_configurations, string $contentType = self::contentTypes['putEnvironment'][0])
    {
        $request = $this->putEnvironmentRequest($environment_id, $environment_configurations, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 202:
                    if ('\Acquia\CloudApi\Model\MessageWithLinks' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\MessageWithLinks' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\MessageWithLinks', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Acquia\CloudApi\Model\ValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\ValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\ValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\MessageWithLinks',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\ValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putEnvironmentAsync
     *
     * Modifies configuration settings for an environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  \Acquia\CloudApi\Model\EnvironmentConfigurations $environment_configurations (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putEnvironment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putEnvironmentAsync($environment_id, $environment_configurations, string $contentType = self::contentTypes['putEnvironment'][0])
    {
        return $this->putEnvironmentAsyncWithHttpInfo($environment_id, $environment_configurations, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putEnvironmentAsyncWithHttpInfo
     *
     * Modifies configuration settings for an environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  \Acquia\CloudApi\Model\EnvironmentConfigurations $environment_configurations (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putEnvironment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putEnvironmentAsyncWithHttpInfo($environment_id, $environment_configurations, string $contentType = self::contentTypes['putEnvironment'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
        $request = $this->putEnvironmentRequest($environment_id, $environment_configurations, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putEnvironment'
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  \Acquia\CloudApi\Model\EnvironmentConfigurations $environment_configurations (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putEnvironment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function putEnvironmentRequest($environment_id, $environment_configurations, string $contentType = self::contentTypes['putEnvironment'][0])
    {

        // verify the required parameter 'environment_id' is set
        if ($environment_id === null || (is_array($environment_id) && count($environment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_id when calling putEnvironment'
            );
        }

        // verify the required parameter 'environment_configurations' is set
        if ($environment_configurations === null || (is_array($environment_configurations) && count($environment_configurations) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_configurations when calling putEnvironment'
            );
        }


        $resourcePath = '/environments/{environmentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($environment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'environmentId' . '}',
                ObjectSerializer::toPathValue($environment_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($environment_configurations)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($environment_configurations));
            } else {
                $httpBody = $environment_configurations;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putEnvironmentCloudActions
     *
     * Modifies an existing list of Cloud Actions.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  \Acquia\CloudApi\Model\PutCloudActions $put_cloud_actions put_cloud_actions (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putEnvironmentCloudActions'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error
     */
    public function putEnvironmentCloudActions($environment_id, $put_cloud_actions, string $contentType = self::contentTypes['putEnvironmentCloudActions'][0])
    {
        list($response) = $this->putEnvironmentCloudActionsWithHttpInfo($environment_id, $put_cloud_actions, $contentType);
        return $response;
    }

    /**
     * Operation putEnvironmentCloudActionsWithHttpInfo
     *
     * Modifies an existing list of Cloud Actions.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  \Acquia\CloudApi\Model\PutCloudActions $put_cloud_actions (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putEnvironmentCloudActions'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function putEnvironmentCloudActionsWithHttpInfo($environment_id, $put_cloud_actions, string $contentType = self::contentTypes['putEnvironmentCloudActions'][0])
    {
        $request = $this->putEnvironmentCloudActionsRequest($environment_id, $put_cloud_actions, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Acquia\CloudApi\Model\MessageWithLinks' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\MessageWithLinks' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\MessageWithLinks', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\MessageWithLinks',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putEnvironmentCloudActionsAsync
     *
     * Modifies an existing list of Cloud Actions.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  \Acquia\CloudApi\Model\PutCloudActions $put_cloud_actions (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putEnvironmentCloudActions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putEnvironmentCloudActionsAsync($environment_id, $put_cloud_actions, string $contentType = self::contentTypes['putEnvironmentCloudActions'][0])
    {
        return $this->putEnvironmentCloudActionsAsyncWithHttpInfo($environment_id, $put_cloud_actions, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putEnvironmentCloudActionsAsyncWithHttpInfo
     *
     * Modifies an existing list of Cloud Actions.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  \Acquia\CloudApi\Model\PutCloudActions $put_cloud_actions (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putEnvironmentCloudActions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putEnvironmentCloudActionsAsyncWithHttpInfo($environment_id, $put_cloud_actions, string $contentType = self::contentTypes['putEnvironmentCloudActions'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
        $request = $this->putEnvironmentCloudActionsRequest($environment_id, $put_cloud_actions, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putEnvironmentCloudActions'
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  \Acquia\CloudApi\Model\PutCloudActions $put_cloud_actions (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putEnvironmentCloudActions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function putEnvironmentCloudActionsRequest($environment_id, $put_cloud_actions, string $contentType = self::contentTypes['putEnvironmentCloudActions'][0])
    {

        // verify the required parameter 'environment_id' is set
        if ($environment_id === null || (is_array($environment_id) && count($environment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_id when calling putEnvironmentCloudActions'
            );
        }

        // verify the required parameter 'put_cloud_actions' is set
        if ($put_cloud_actions === null || (is_array($put_cloud_actions) && count($put_cloud_actions) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $put_cloud_actions when calling putEnvironmentCloudActions'
            );
        }


        $resourcePath = '/environments/{environmentId}/cloud-actions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($environment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'environmentId' . '}',
                ObjectSerializer::toPathValue($environment_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($put_cloud_actions)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($put_cloud_actions));
            } else {
                $httpBody = $put_cloud_actions;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putEnvironmentSearchIndex
     *
     * Updates a search index on an environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $index_id An ID that uniquely identifies an index. (required)
     * @param  \Acquia\CloudApi\Model\PutEnvironmentSearchIndexRequest $put_environment_search_index_request put_environment_search_index_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putEnvironmentSearchIndex'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error
     */
    public function putEnvironmentSearchIndex($environment_id, $index_id, $put_environment_search_index_request, string $contentType = self::contentTypes['putEnvironmentSearchIndex'][0])
    {
        list($response) = $this->putEnvironmentSearchIndexWithHttpInfo($environment_id, $index_id, $put_environment_search_index_request, $contentType);
        return $response;
    }

    /**
     * Operation putEnvironmentSearchIndexWithHttpInfo
     *
     * Updates a search index on an environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $index_id An ID that uniquely identifies an index. (required)
     * @param  \Acquia\CloudApi\Model\PutEnvironmentSearchIndexRequest $put_environment_search_index_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putEnvironmentSearchIndex'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function putEnvironmentSearchIndexWithHttpInfo($environment_id, $index_id, $put_environment_search_index_request, string $contentType = self::contentTypes['putEnvironmentSearchIndex'][0])
    {
        $request = $this->putEnvironmentSearchIndexRequest($environment_id, $index_id, $put_environment_search_index_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 202:
                    if ('\Acquia\CloudApi\Model\MessageWithLinks' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\MessageWithLinks' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\MessageWithLinks', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\MessageWithLinks',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putEnvironmentSearchIndexAsync
     *
     * Updates a search index on an environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $index_id An ID that uniquely identifies an index. (required)
     * @param  \Acquia\CloudApi\Model\PutEnvironmentSearchIndexRequest $put_environment_search_index_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putEnvironmentSearchIndex'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putEnvironmentSearchIndexAsync($environment_id, $index_id, $put_environment_search_index_request, string $contentType = self::contentTypes['putEnvironmentSearchIndex'][0])
    {
        return $this->putEnvironmentSearchIndexAsyncWithHttpInfo($environment_id, $index_id, $put_environment_search_index_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putEnvironmentSearchIndexAsyncWithHttpInfo
     *
     * Updates a search index on an environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $index_id An ID that uniquely identifies an index. (required)
     * @param  \Acquia\CloudApi\Model\PutEnvironmentSearchIndexRequest $put_environment_search_index_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putEnvironmentSearchIndex'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putEnvironmentSearchIndexAsyncWithHttpInfo($environment_id, $index_id, $put_environment_search_index_request, string $contentType = self::contentTypes['putEnvironmentSearchIndex'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
        $request = $this->putEnvironmentSearchIndexRequest($environment_id, $index_id, $put_environment_search_index_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putEnvironmentSearchIndex'
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $index_id An ID that uniquely identifies an index. (required)
     * @param  \Acquia\CloudApi\Model\PutEnvironmentSearchIndexRequest $put_environment_search_index_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putEnvironmentSearchIndex'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function putEnvironmentSearchIndexRequest($environment_id, $index_id, $put_environment_search_index_request, string $contentType = self::contentTypes['putEnvironmentSearchIndex'][0])
    {

        // verify the required parameter 'environment_id' is set
        if ($environment_id === null || (is_array($environment_id) && count($environment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_id when calling putEnvironmentSearchIndex'
            );
        }

        // verify the required parameter 'index_id' is set
        if ($index_id === null || (is_array($index_id) && count($index_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $index_id when calling putEnvironmentSearchIndex'
            );
        }

        // verify the required parameter 'put_environment_search_index_request' is set
        if ($put_environment_search_index_request === null || (is_array($put_environment_search_index_request) && count($put_environment_search_index_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $put_environment_search_index_request when calling putEnvironmentSearchIndex'
            );
        }


        $resourcePath = '/environments/{environmentId}/search/indexes/{indexId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($environment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'environmentId' . '}',
                ObjectSerializer::toPathValue($environment_id),
                $resourcePath
            );
        }
        // path params
        if ($index_id !== null) {
            $resourcePath = str_replace(
                '{' . 'indexId' . '}',
                ObjectSerializer::toPathValue($index_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($put_environment_search_index_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($put_environment_search_index_request));
            } else {
                $httpBody = $put_environment_search_index_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putEnvironmentsLogForwardingDestination
     *
     * Updates an environment&#39;s log forwarding destination.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $log_forwarding_destination_uuid The entity&#39;s universally unique identifier. (required)
     * @param  \Acquia\CloudApi\Model\PutEnvironmentsLogForwardingDestinationRequest $put_environments_log_forwarding_destination_request put_environments_log_forwarding_destination_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putEnvironmentsLogForwardingDestination'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\ValidationError|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error
     */
    public function putEnvironmentsLogForwardingDestination($environment_id, $log_forwarding_destination_uuid, $put_environments_log_forwarding_destination_request, string $contentType = self::contentTypes['putEnvironmentsLogForwardingDestination'][0])
    {
        list($response) = $this->putEnvironmentsLogForwardingDestinationWithHttpInfo($environment_id, $log_forwarding_destination_uuid, $put_environments_log_forwarding_destination_request, $contentType);
        return $response;
    }

    /**
     * Operation putEnvironmentsLogForwardingDestinationWithHttpInfo
     *
     * Updates an environment&#39;s log forwarding destination.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $log_forwarding_destination_uuid The entity&#39;s universally unique identifier. (required)
     * @param  \Acquia\CloudApi\Model\PutEnvironmentsLogForwardingDestinationRequest $put_environments_log_forwarding_destination_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putEnvironmentsLogForwardingDestination'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\ValidationError|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function putEnvironmentsLogForwardingDestinationWithHttpInfo($environment_id, $log_forwarding_destination_uuid, $put_environments_log_forwarding_destination_request, string $contentType = self::contentTypes['putEnvironmentsLogForwardingDestination'][0])
    {
        $request = $this->putEnvironmentsLogForwardingDestinationRequest($environment_id, $log_forwarding_destination_uuid, $put_environments_log_forwarding_destination_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 202:
                    if ('\Acquia\CloudApi\Model\MessageWithLinks' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\MessageWithLinks' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\MessageWithLinks', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Acquia\CloudApi\Model\ValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\ValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\ValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\MessageWithLinks',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\ValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putEnvironmentsLogForwardingDestinationAsync
     *
     * Updates an environment&#39;s log forwarding destination.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $log_forwarding_destination_uuid The entity&#39;s universally unique identifier. (required)
     * @param  \Acquia\CloudApi\Model\PutEnvironmentsLogForwardingDestinationRequest $put_environments_log_forwarding_destination_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putEnvironmentsLogForwardingDestination'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putEnvironmentsLogForwardingDestinationAsync($environment_id, $log_forwarding_destination_uuid, $put_environments_log_forwarding_destination_request, string $contentType = self::contentTypes['putEnvironmentsLogForwardingDestination'][0])
    {
        return $this->putEnvironmentsLogForwardingDestinationAsyncWithHttpInfo($environment_id, $log_forwarding_destination_uuid, $put_environments_log_forwarding_destination_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putEnvironmentsLogForwardingDestinationAsyncWithHttpInfo
     *
     * Updates an environment&#39;s log forwarding destination.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $log_forwarding_destination_uuid The entity&#39;s universally unique identifier. (required)
     * @param  \Acquia\CloudApi\Model\PutEnvironmentsLogForwardingDestinationRequest $put_environments_log_forwarding_destination_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putEnvironmentsLogForwardingDestination'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putEnvironmentsLogForwardingDestinationAsyncWithHttpInfo($environment_id, $log_forwarding_destination_uuid, $put_environments_log_forwarding_destination_request, string $contentType = self::contentTypes['putEnvironmentsLogForwardingDestination'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
        $request = $this->putEnvironmentsLogForwardingDestinationRequest($environment_id, $log_forwarding_destination_uuid, $put_environments_log_forwarding_destination_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putEnvironmentsLogForwardingDestination'
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $log_forwarding_destination_uuid The entity&#39;s universally unique identifier. (required)
     * @param  \Acquia\CloudApi\Model\PutEnvironmentsLogForwardingDestinationRequest $put_environments_log_forwarding_destination_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putEnvironmentsLogForwardingDestination'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function putEnvironmentsLogForwardingDestinationRequest($environment_id, $log_forwarding_destination_uuid, $put_environments_log_forwarding_destination_request, string $contentType = self::contentTypes['putEnvironmentsLogForwardingDestination'][0])
    {

        // verify the required parameter 'environment_id' is set
        if ($environment_id === null || (is_array($environment_id) && count($environment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_id when calling putEnvironmentsLogForwardingDestination'
            );
        }

        // verify the required parameter 'log_forwarding_destination_uuid' is set
        if ($log_forwarding_destination_uuid === null || (is_array($log_forwarding_destination_uuid) && count($log_forwarding_destination_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $log_forwarding_destination_uuid when calling putEnvironmentsLogForwardingDestination'
            );
        }

        // verify the required parameter 'put_environments_log_forwarding_destination_request' is set
        if ($put_environments_log_forwarding_destination_request === null || (is_array($put_environments_log_forwarding_destination_request) && count($put_environments_log_forwarding_destination_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $put_environments_log_forwarding_destination_request when calling putEnvironmentsLogForwardingDestination'
            );
        }


        $resourcePath = '/environments/{environmentId}/log-forwarding-destinations/{logForwardingDestinationUuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($environment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'environmentId' . '}',
                ObjectSerializer::toPathValue($environment_id),
                $resourcePath
            );
        }
        // path params
        if ($log_forwarding_destination_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'logForwardingDestinationUuid' . '}',
                ObjectSerializer::toPathValue($log_forwarding_destination_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($put_environments_log_forwarding_destination_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($put_environments_log_forwarding_destination_request));
            } else {
                $httpBody = $put_environments_log_forwarding_destination_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putEnvironmentsServer
     *
     * Modifies configuration settings for a server.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $server_id The internal database identifier of the server. (required)
     * @param  \Acquia\CloudApi\Model\PutEnvironmentsServerRequest $put_environments_server_request put_environments_server_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putEnvironmentsServer'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\Message|\Acquia\CloudApi\Model\ValidationError|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error
     */
    public function putEnvironmentsServer($environment_id, $server_id, $put_environments_server_request, string $contentType = self::contentTypes['putEnvironmentsServer'][0])
    {
        list($response) = $this->putEnvironmentsServerWithHttpInfo($environment_id, $server_id, $put_environments_server_request, $contentType);
        return $response;
    }

    /**
     * Operation putEnvironmentsServerWithHttpInfo
     *
     * Modifies configuration settings for a server.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $server_id The internal database identifier of the server. (required)
     * @param  \Acquia\CloudApi\Model\PutEnvironmentsServerRequest $put_environments_server_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putEnvironmentsServer'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\Message|\Acquia\CloudApi\Model\ValidationError|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function putEnvironmentsServerWithHttpInfo($environment_id, $server_id, $put_environments_server_request, string $contentType = self::contentTypes['putEnvironmentsServer'][0])
    {
        $request = $this->putEnvironmentsServerRequest($environment_id, $server_id, $put_environments_server_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 202:
                    if ('\Acquia\CloudApi\Model\Message' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Message' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Message', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Acquia\CloudApi\Model\ValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\ValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\ValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\Message';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Message',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\ValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putEnvironmentsServerAsync
     *
     * Modifies configuration settings for a server.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $server_id The internal database identifier of the server. (required)
     * @param  \Acquia\CloudApi\Model\PutEnvironmentsServerRequest $put_environments_server_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putEnvironmentsServer'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putEnvironmentsServerAsync($environment_id, $server_id, $put_environments_server_request, string $contentType = self::contentTypes['putEnvironmentsServer'][0])
    {
        return $this->putEnvironmentsServerAsyncWithHttpInfo($environment_id, $server_id, $put_environments_server_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putEnvironmentsServerAsyncWithHttpInfo
     *
     * Modifies configuration settings for a server.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $server_id The internal database identifier of the server. (required)
     * @param  \Acquia\CloudApi\Model\PutEnvironmentsServerRequest $put_environments_server_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putEnvironmentsServer'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putEnvironmentsServerAsyncWithHttpInfo($environment_id, $server_id, $put_environments_server_request, string $contentType = self::contentTypes['putEnvironmentsServer'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\Message';
        $request = $this->putEnvironmentsServerRequest($environment_id, $server_id, $put_environments_server_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putEnvironmentsServer'
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $server_id The internal database identifier of the server. (required)
     * @param  \Acquia\CloudApi\Model\PutEnvironmentsServerRequest $put_environments_server_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putEnvironmentsServer'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function putEnvironmentsServerRequest($environment_id, $server_id, $put_environments_server_request, string $contentType = self::contentTypes['putEnvironmentsServer'][0])
    {

        // verify the required parameter 'environment_id' is set
        if ($environment_id === null || (is_array($environment_id) && count($environment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_id when calling putEnvironmentsServer'
            );
        }

        // verify the required parameter 'server_id' is set
        if ($server_id === null || (is_array($server_id) && count($server_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $server_id when calling putEnvironmentsServer'
            );
        }

        // verify the required parameter 'put_environments_server_request' is set
        if ($put_environments_server_request === null || (is_array($put_environments_server_request) && count($put_environments_server_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $put_environments_server_request when calling putEnvironmentsServer'
            );
        }


        $resourcePath = '/environments/{environmentId}/servers/{serverId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($environment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'environmentId' . '}',
                ObjectSerializer::toPathValue($environment_id),
                $resourcePath
            );
        }
        // path params
        if ($server_id !== null) {
            $resourcePath = str_replace(
                '{' . 'serverId' . '}',
                ObjectSerializer::toPathValue($server_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($put_environments_server_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($put_environments_server_request));
            } else {
                $httpBody = $put_environments_server_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putEnvironmentsVariable
     *
     * Updates an environment variable on an environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $environment_variable_name The environment variable name. (required)
     * @param  \Acquia\CloudApi\Model\PutEnvironmentsVariableRequest $put_environments_variable_request put_environments_variable_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putEnvironmentsVariable'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\ValidationError|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error
     */
    public function putEnvironmentsVariable($environment_id, $environment_variable_name, $put_environments_variable_request, string $contentType = self::contentTypes['putEnvironmentsVariable'][0])
    {
        list($response) = $this->putEnvironmentsVariableWithHttpInfo($environment_id, $environment_variable_name, $put_environments_variable_request, $contentType);
        return $response;
    }

    /**
     * Operation putEnvironmentsVariableWithHttpInfo
     *
     * Updates an environment variable on an environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $environment_variable_name The environment variable name. (required)
     * @param  \Acquia\CloudApi\Model\PutEnvironmentsVariableRequest $put_environments_variable_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putEnvironmentsVariable'] to see the possible values for this operation
     *
     * @throws \Acquia\CloudApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Acquia\CloudApi\Model\MessageWithLinks|\Acquia\CloudApi\Model\ValidationError|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error|\Acquia\CloudApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function putEnvironmentsVariableWithHttpInfo($environment_id, $environment_variable_name, $put_environments_variable_request, string $contentType = self::contentTypes['putEnvironmentsVariable'][0])
    {
        $request = $this->putEnvironmentsVariableRequest($environment_id, $environment_variable_name, $put_environments_variable_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 202:
                    if ('\Acquia\CloudApi\Model\MessageWithLinks' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\MessageWithLinks' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\MessageWithLinks', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Acquia\CloudApi\Model\ValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\ValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\ValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Acquia\CloudApi\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Acquia\CloudApi\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Acquia\CloudApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\MessageWithLinks',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\ValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Acquia\CloudApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putEnvironmentsVariableAsync
     *
     * Updates an environment variable on an environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $environment_variable_name The environment variable name. (required)
     * @param  \Acquia\CloudApi\Model\PutEnvironmentsVariableRequest $put_environments_variable_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putEnvironmentsVariable'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putEnvironmentsVariableAsync($environment_id, $environment_variable_name, $put_environments_variable_request, string $contentType = self::contentTypes['putEnvironmentsVariable'][0])
    {
        return $this->putEnvironmentsVariableAsyncWithHttpInfo($environment_id, $environment_variable_name, $put_environments_variable_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putEnvironmentsVariableAsyncWithHttpInfo
     *
     * Updates an environment variable on an environment.
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $environment_variable_name The environment variable name. (required)
     * @param  \Acquia\CloudApi\Model\PutEnvironmentsVariableRequest $put_environments_variable_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putEnvironmentsVariable'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putEnvironmentsVariableAsyncWithHttpInfo($environment_id, $environment_variable_name, $put_environments_variable_request, string $contentType = self::contentTypes['putEnvironmentsVariable'][0])
    {
        $returnType = '\Acquia\CloudApi\Model\MessageWithLinks';
        $request = $this->putEnvironmentsVariableRequest($environment_id, $environment_variable_name, $put_environments_variable_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putEnvironmentsVariable'
     *
     * @param  string $environment_id The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID. (required)
     * @param  string $environment_variable_name The environment variable name. (required)
     * @param  \Acquia\CloudApi\Model\PutEnvironmentsVariableRequest $put_environments_variable_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putEnvironmentsVariable'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function putEnvironmentsVariableRequest($environment_id, $environment_variable_name, $put_environments_variable_request, string $contentType = self::contentTypes['putEnvironmentsVariable'][0])
    {

        // verify the required parameter 'environment_id' is set
        if ($environment_id === null || (is_array($environment_id) && count($environment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_id when calling putEnvironmentsVariable'
            );
        }

        // verify the required parameter 'environment_variable_name' is set
        if ($environment_variable_name === null || (is_array($environment_variable_name) && count($environment_variable_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_variable_name when calling putEnvironmentsVariable'
            );
        }
        if (strlen($environment_variable_name) > 255) {
            throw new \InvalidArgumentException('invalid length for "$environment_variable_name" when calling EnvironmentsApi.putEnvironmentsVariable, must be smaller than or equal to 255.');
        }
        if (strlen($environment_variable_name) < 1) {
            throw new \InvalidArgumentException('invalid length for "$environment_variable_name" when calling EnvironmentsApi.putEnvironmentsVariable, must be bigger than or equal to 1.');
        }
        if (!preg_match("/^(?!(ACQUIA_|AH_))[A-Za-z_][A-Za-z0-9_]*$/", $environment_variable_name)) {
            throw new \InvalidArgumentException("invalid value for \"environment_variable_name\" when calling EnvironmentsApi.putEnvironmentsVariable, must conform to the pattern /^(?!(ACQUIA_|AH_))[A-Za-z_][A-Za-z0-9_]*$/.");
        }
        
        // verify the required parameter 'put_environments_variable_request' is set
        if ($put_environments_variable_request === null || (is_array($put_environments_variable_request) && count($put_environments_variable_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $put_environments_variable_request when calling putEnvironmentsVariable'
            );
        }


        $resourcePath = '/environments/{environmentId}/variables/{environmentVariableName}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($environment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'environmentId' . '}',
                ObjectSerializer::toPathValue($environment_id),
                $resourcePath
            );
        }
        // path params
        if ($environment_variable_name !== null) {
            $resourcePath = str_replace(
                '{' . 'environmentVariableName' . '}',
                ObjectSerializer::toPathValue($environment_variable_name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($put_environments_variable_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($put_environments_variable_request));
            } else {
                $httpBody = $put_environments_variable_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
